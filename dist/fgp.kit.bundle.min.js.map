{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","standalone","interactions","drill","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","findChild4Repeat","parentId","parentHtmlObj","arrayItems","newId","newScope","i","parent","currentItem","element","html_render","id","attr","repeat","find","append","findChild","$watch","newVal","oldVal","empty","$destroy","$new","$on","evt","msg","push","forEach","item","items","children","item_new","currentElement","groupItems","dulpItem","param","config","callback","metadata","data","datasource","style","key","from","sendDeviceData","graph","$broadcast","graphs","deviceInfo","then","device","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","graphDataService","_$http","_$q","indexCache","deviceStores","_$interval","_$graphDataService","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","contentType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","fields","params","concat","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","isSame","childrenExtensionInitInfo","extensionType","devicesExtensionInitInfo","devicesKey","promises","__http","fillChildrenTree","buckets","tree","showData","value","flag","info","fillTree","size","calTree","start","end","filter","elem","devicesStoreData","store","interval","start_point","Date","getTime","devices","index","$graphDataService","method","JSON","stringify","deviceGraphData","newComeResult","end_point","deviceStoreData","needLoad","timestamp","sort","a","b","put","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","autoUpdateGraph","schema","count","fetcher","last","trees","frequency","timeKey","graphData","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","$stateParams","_dataService","dom_loading","dom_legend","dom_empty_data","dom_alert_info","dom_datetime_interval","dom_series_list","dom_real_time_grap","html","link","status","timeOut","completionPercent","graphId","getData","numSeries","numRows","labels","initDate","j","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","canScroll","timer","mouseOverHandler","cancel","mouseEnterHandler","mouseOutHandler","scroll","normal","WheelEvent","detail","deltaY","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","wheel","mousedown","mousemove","mouseenter","mouseup","mouseout","drawGapEdgePoints","pointSize","legend","labelsKMB","labelsSeparateLines","highlightSeriesOpts","strokeWidth","strokeBorderWidth","highlightCircleSize","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","timer_auto","process_bar_timer","on","tempConifg","realTimeGraph","currentChartOptions","file","auto_device_name","auto_schema","auto_store","auto_fields","graph_data","worker","deviceConfig","auto_metadata","groups","collections","allLines","yRanges","collection","line","showY2axis","rows","row","label","yaxis","f","Function","counter","realLine","ex","yrange","newLines","copy","perInterval","showRealTimeGraph","modal","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","finalDateRagne","chartDateTime","begin","finalDateRange","view","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","alertMessage","showY2Btns","legendText","legendText_device","legendText_datetime","legendText_column","legendText_value","legendColor","autoupdate","defaultTimeIntervals","scales","dateTimeIntervals","locked_interval","lock","currentIntervalName","currentIntervalChoosed","_item","changeInterval","basic","checked","rangeConfig","loadingShow","intevals","height","begin_path","end_path","init_flag","fixInterval","noneFixed","fixGraphWithGap","currentInterval","fixed","tempDate","obj","labels_","file_","showOrHideDevice","childrenDevices","setVisibility","fixGraphWithGap_click","parent_container","data_from","checkY2Btns","deviceData","nObj","oObj","button_handlers","level","patt","RegExp","lines","columns","match","column","startsWith","initChart","relation","relation_group","initChildrenChart","interactionHandler","devices_key","all","extension_type","buttons","scatter","button","buttons_html","_func","toString","slice","$index","substr","dataFilter","highlighting","hideAllOthers","hideOther","timerInterval","setSelection","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","limits","series_range","l0","rangeBarLabels","objNeed2Add","dataLength","tempObj","rangeSeries","points","connected","connectSeparatedPoints","currentStore","childTrees","arr","deleteIndex","splice","devicesMatchData","updateChildrenDetailChart","rangeChildrenData","updateDetailChart","rangeData","group","fetchData","values","node","array","Array","apply","ordinalRangeData","intevalforshow","rangeTree","allData","first","newData","thePoint","endOf","toDate","updateChart","deviceDatas","devicesInfo","_index","merge","extension","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allXLabels","yRange","originalData","odata","childrenRangeConfig","y2label","axisLabelFormatter","d","Number","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","highlightCallback","pts","seriesName","currentHighLightChildDevice","maxWidth","offsetWidth","sn","point_show","colorIndex","user_attrs_","legendText_device_name","nameColumn","tz","guess","xval","yval","point","canvasy","canvasx","legendbox","$apply","legendTop","legendLeft","unhighlightCallback","autoUpdateChart","rangeSeriesNumber","drillDown","open","lastIndexOf","btntimer","btnZoomInVLeft","btnZoomOutVLeft","btnZoomInVRight","btnZoomOutVRight","btnPanVULeft","btnPanVDLeft","btnPanVURight","btnPanVDRight","btnpanleft","panRange","pan_delta","startDate","endDate","btnpanright","btnzoomin","rangeStart","rangeEnd","btnzoomout","init","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","shown","split","healthinfo","action","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$websocket","labelstyle","listStyle","deviceType","dataStream","port","onMessage","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","itemIndex","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","formatter","record","cleanData","service","input","substring","setTree","localStorage","getTree","addTree","clear","directive","$last","CacheFactoryProvider","extend","defaults","maxAge","deleteOnExpire","CacheFactory","graphCache"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,$,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\n$ = 'default' in $ ? $['default'] : $;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\",\n        standalone: \"=\",\n        interactions: \"=\",\n        drill: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n    $rootScope['standalone'] = $scope.standalone;\n\n\n    var graphBindingArray = [];\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                newScope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    newScope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n            else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    var newScope = null;\n    $scope.$watch('deviceName', function (newVal, oldVal) {\n        if(newVal){\n            $element.empty();\n            if(newScope){\n                newScope.$destroy();\n            }\n            newScope = $rootScope.$new(true);\n            newScope[\"showdata\"] = {};\n\n            newScope.$on('bindChildChartEvent', function (evt, msg) {\n                graphBindingArray.push(msg);\n            });\n\n            newScope[\"interactions\"] = $scope.interactions;\n            newScope[\"drill\"] = $scope.drill;\n\n            newScope.$on('bindChildRepeatEvent', function (evt, msg) {\n                angular$1.forEach($scope.configuration, function (item) {\n                    if (item.id == msg.id) {\n                        var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                        angular$1.forEach(items, function (item_new) {\n                            newScope.showdata[item_new.id] = item;\n                            var currentElement = angular$1.element(item_new);\n                            if (currentElement.attr(\"dulp\")) {\n                                var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                                angular$1.forEach(groupItems, function (dulpItem) {\n                                    findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id,newScope);\n                                });\n                            }else{\n                                findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id,newScope);\n                            }\n                        });\n                    }\n                });\n            });\n\n            newScope.$on('listStyleEvent', function (evt, param) {\n                var config = newScope.showdata[param.id.replace(\"edit\", \"\")];\n                param.callback(config.metadata.data.datasource.style);\n            });\n\n\n            newScope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n                angular$1.forEach(newScope.showdata, function (metadata, key) {\n                    if (key == msg.id) {\n                        msg.callback({data: metadata, from: 'show'});\n                        return;\n                    }\n                });\n            });\n\n            // refersh\n            angular$1.forEach($scope.configuration, function (item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    newScope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)(newScope));\n                    findChild(item.id, currentItem, $scope.configuration,newScope);\n                }\n            });\n            /**\n             * get device information\n             */\n            if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n                // first time\n                sendDeviceData(newScope);\n            }\n            // all item created;\n            $timeout(function () {\n                angular$1.forEach(graphBindingArray, function (graph) {\n                    newScope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n                });\n            });\n        }\n    });\n\n\n    var sendDeviceData = function (newScope) {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    newScope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n    };\n};\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n    this._$interval = $interval;\n    this._$graphDataService = graphDataService;\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/rest/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices?key=' + deviceKey;\n    }\n\n    $.ajaxSettings.async = false;\n    $.ajax({\n        type: 'GET',\n        url: url,\n        contentType: \"application/json\",\n        success: function(data) {\n            var url = host + \"/rest/api/\";\n            if (applicationName) {\n                url += \"app/\" + applicationName + \"/devices/extension-types?device_type=\";\n            } else {\n                url += \"devices/extension-types?device_type=\";\n            }\n            $.ajaxSettings.async = false;\n            $.ajax({\n                type: 'GET',\n                url: url + data.type,\n                contentType: \"application/json\",\n                success: function(types) {\n                    angular$1.forEach(types, function(type) {\n                        Object.defineProperty(data, type.name, {\n                            get: function() {\n                                var result = null;\n                                var url = host + \"/rest/api/\";\n                                if (applicationName) {\n                                    url += \"app/\" + applicationName + \"/devices/extensions?device_name=\";\n                                } else {\n                                    url += \"devices/extensions?device_name=\";\n                                }\n                                $.ajaxSettings.async = false;\n                                $.ajax({\n                                    type: 'GET',\n                                    url: url + this.name + '&extension_type=' + type.name,\n                                    contentType: \"application/json\",\n                                    success: function(field) {\n                                        result = field;\n                                    },\n                                    error: function(e) {\n                                        deferred.reject(e);\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                    });\n                },\n                error: function(e) {\n                    console.log(e.message);\n                }\n            });\n\n            deferred.resolve(data);\n        },\n        error: function(e) {\n            deferred.reject(e);\n        }\n    });\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            'otherLevels': otherLevels,\n            'fields': [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenExtensionInitInfo = function childrenExtensionInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, extensionType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.devicesExtensionInitInfo = function devicesExtensionInitInfo (host, application, devicesKey, storeSchema, extensionType, rangeLevel, otherLevels, fields) {\n    var result = {};\n    var promises = [];\n    var __http = this._$http;\n    angular$1.forEach(devicesKey, function(deviceKey) {\n        if (deviceKey != null) {\n            var promise = __http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n                params: {\n                    otherLevels: otherLevels,\n                    fields: [].concat(fields),\n                    isSame: true\n                },\n                cache: this.deviceStores\n            }).then(\n                function(response) {\n                    return response.data;\n                },\n                function(response) {\n                    console.error(response.data);\n                }\n            );\n            promises.push(promise);\n        }\n    });\n    // call $q.all on the other side\n    return promises;\n};\n\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value;\n                tree['size'] = value.length;\n\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.length;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id) {\n                tree.data = value;\n                tree['size'] = value.size;\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        data['size'] = tree.size;\n                        flag = true;\n                    }\n                });\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end) ||\n            ((start > tree.start) && start <= tree.end) ||\n            ((tree.start >= start) && tree.start < end) ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function(elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (id, host, application, deviceInfo, storeSchema, store, start, end, fields, interval) {\n    var start_point = new Date().getTime();\n    if (!deviceInfo || deviceInfo.length == 0) {\n        return false;\n    }\n\n    var devices = \"[\";\n\n    deviceInfo.forEach(function(device, index) {\n        if (index < deviceInfo.length - 1) {\n            devices += \"\\\"\" + device.name + \"\\\",\";\n        } else {\n            devices += \"\\\"\" + device.name + \"\\\"]\";\n        }\n    });\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end // TODO: change it to post\n    this._$http({\n        method: 'POST',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store,\n        data: {\n            \"devices\": devices,\n            \"fields\": JSON.stringify(fields),\n            \"start\": start,\n            \"end\": end\n        }\n    }).then(\n        function(response) {\n            var result = {};\n            var data = response.data;\n            for (key in data) {\n                var deviceGraphData = $graphDataService.get(key + \"/\" + store + \"/\" + id) ? $graphDataService.get(key + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = data[key].data;\n                // TODO: make all the lines in same x-axis timeseries\n                result[key] = newComeResult;\n            }\n            var end_point = new Date().getTime();\n            console.info((end_point - start_point) / 1000 + \"s\");\n            deferred.resolve(result);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (id, host, application, deviceKey, storeSchema, store, tree, start, end, fields, interval) {\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    var needLoad = true;\n    // if ($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id)) {\n    // //check data\n    // var data = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id);\n    // if (data) {\n    //     //\n    //     var temp_start = null;\n    //     var temp_end = null;\n    //     data.forEach(function(_item){\n    //         if(_item.timestamp >= end && temp_end == null){\n    //             temp_end = _item.timestamp;\n    //         }\n    //         if(_item.timestamp <= start){\n    //             temp_start =  _item.timestamp;\n    //         }\n    //\n    //     });\n    //     var checkLoad = false;\n    //     while (temp_start < temp_end) {\n    //         var _flag = false;\n    //         data.forEach(function(item) {\n    //             if (item.timestamp == temp_start) {\n    //                 _flag = true;\n    //             }\n    //         });\n    //         if (!_flag) {\n    //             // doesn`t exist\n    //             checkLoad = true;\n    //             break;\n    //         }\n    //         temp_start += interval;\n    //         console.info(temp_start);\n    //     }\n    //     if (!checkLoad) {\n    //         needLoad = false;\n    //     }\n    // }\n    // // }\n\n    if (!needLoad) {\n        // return data\n        deferred.resolve($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id));\n    } else {\n        // send request to back-end\n        this._$http({\n            method: 'GET',\n            url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=[\"' + deviceKey + '\"]&fields=' + JSON.stringify(fields) + '&start=' + start + '&end=' + end\n        }).then(\n            function(response) {\n                // only return 1 device data\n                var deviceGraphData = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) ? $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = response.data[deviceKey].data;\n                newComeResult.forEach(function(item) {\n                    var flag = false;\n                    for (var i = 0; i < deviceGraphData.length; i++) {\n                        if (deviceGraphData[i].timestamp == item.timestamp) {\n                            deviceGraphData[i] = item;\n                            flag = true;\n                        }\n                    }\n                    if (!flag) {\n                        // add\n                        deviceGraphData.push(item);\n                    }\n                });\n                // order by timestamp\n                deviceGraphData.sort(function(a, b) {\n                    if (a.timestamp > b.timestamp) {\n                        return 1;\n                    } else if (a.timestamp < b.timestamp) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                $graphDataService.put(deviceKey + \"/\" + store + \"/\" + id, deviceGraphData);\n                deferred.resolve(deviceGraphData);\n            },\n            function(response) {\n                deferred.reject(response.data);\n            }\n        );\n    }\n\n    return deferred.promise;\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) &&\n                    (lor.length == 6) ? lor : co(lor);\n            })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/rest/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function(response) {\n            console.info(response);\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.prototype.autoUpdateGraph = function autoUpdateGraph (application, device, schema, store, fields, count, callback) {\n    var _$interval = this._$interval;\n    var _$http = this._$http;\n    var fetcher = null;\n    this._$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n        .success(function(response) {\n            var last = -1;\n            var interval = -1;\n            if (response.trees && response.trees.length === 1) {\n                interval = response.trees[0].frequency;\n                last = response.trees[0].last.timeKey;\n            }\n            if (interval != -1) {\n                var start = last - (count * interval);\n                var end = last;\n                // first time\n                _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                    params: {\n                        \"devices\": JSON.stringify([device]),\n                        \"fields\": JSON.stringify(fields),\n                        \"start\": start,\n                        \"end\": end\n                    }\n                }).success(function(graphData) {\n\n                    // start task\n                    fetcher = _$interval(function() {\n                        _$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n                            .success(function(response) {\n                                if (response.trees && response.trees.length === 1) {\n                                    last = response.trees[0].last.timeKey;\n                                    start = last - (count * interval);\n                                    end = last;\n                                    _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                                        params: {\n                                            \"devices\": JSON.stringify([device]),\n                                            \"fields\": JSON.stringify(fields),\n                                            \"start\": start,\n                                            \"end\": end\n                                        }\n                                    }).success(function(graphData) {\n                                        // put the data back\n                                        callback(graphData[device], null, interval);\n                                    });\n                                }\n                            });\n                    }, interval);\n\n                    // put the data back\n                    callback(graphData[device], fetcher, interval);\n                });\n            }\n        });\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory, $interval, graphDataService) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory', '$interval', 'graphDataService'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\"\n    };\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:2px;margin-bottom:2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile,$q) {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\"\n    };\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n    this._$interval = $interval;\n    this._$q = $q;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_legend = '<li>{{legendText_device_name}}</li><li>{{legendText_datetime}}</li><li><label style=\"color: {{legendColor}}\">{{legendText_column}}</label>:{{legendText_value}}</li>';\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        var dom_alert_info = '<span class=\"label label-warning\" ng-show=\"alertMessage\" style=\"color: #000;\">{{alertMessage}}</span>';\n\n        var dom_datetime_interval = '<div ng-show=\"rangeSelectorBar\" class=\"dropdown\"> <button class=\"btn btn-info dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">{{currentIntervalChoosed.name}}<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"interval in dateTimeIntervals\"><a href=\"javascript:;\" ng-click=\"changeInterval(interval)\">{{interval.name}}</a></li></ul> </div>';\n\n\n        var dom_series_list = '<div ng-show=\"currentView === 1\" class=\"dropdown\"> <button class=\"btn btn-warning dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">Devices<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;height:auto;max-height:300px;overflow-x:hidden;\"><li ng-repeat=\"device in childrenDevices\"><input type=\"checkbox\" ng-click=\"showOrHideDevice(device)\" ng-checked=\"device.show\"/>{{device.name}}</li></ul> </div>';\n\n\n        var dom_real_time_grap = '<div class=\"modal fade \" id=\"real_time_graph_' + attrs.id + '\" role=\"dialog\">' +\n            '<div class=\"modal-dialog modal-lg\">' +\n            '<div class=\"modal-content\">' +\n            '<div class=\"col-md-12\"  style=\"padding-top:3px;height: 1px;background-color: #0e90d2;\" ng-style=\"{ \\'width\\': completionPercent + \\'%\\' }\"></div>' +\n            '<div class=\"modal-body\" style=\"width: 100%;height: 300px;\">' +\n            '<div class=\"real-time-graph\" style=\"width: 100%;height: 100%\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n\n        var html = '<div id=\"legendbox' + attrs.id + '\" ng-show=\"legendText\" ng-style=\"{top:legendTop,left:legendLeft}\" style=\"border-radius:10px;background-color:#ffffff;position: absolute;border: 1px solid {{legendColor}};-moz-box-shadow: 5px 5px 5px #888888;box-shadow: 5px 5px 5px #888888;z-index: 99999999;margin-right: 5px;\"><ul style=\"list-style: none;list-style-position: inside;text-align: right;\">' + dom_legend + '</ul></div><div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips btn btn-xs btn-info badge\" href=\"javascript:;\" ng-hide=\"interactions.graphs.btns.scatter == \\'hide\\'\"  style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><i class=\"glyphicon glyphicon-transfer\"></i><span>Scatter View</span></a><div id=\"buttons_area\" style=\"\"></div><a ng-show=\"autoupdate\" class=\"tooltips btn btn-xs btn-info badge\" style=\"float: right;margin-right: 10px;\" ng-click=\"showRealTimeGraph()\" data-toggle=\"modal\"><span>Auto Update</span><i class=\"glyphicon glyphicon-random\"></i></a><div style=\"float: right; margin-right: 10px;\">' + dom_series_list + '</div><div style=\"float: right; margin-right: 10px;\">' + dom_datetime_interval + '</div><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\"/>fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? (locked_interval.name == item.name ? \\'#e57432;\\':\\'#009900;\\') : (locked_interval.name == item.name ? \\'#e57432;\\':\\'\\') }}\" ng-click=\"lock(item)\">{{item.name}}</span></label></div><div style=\"float: right; margin-right: 10px;\">' + dom_alert_info + '</div></div></div><div style=\"position: relative;width: 100%;height:100%;\"><div style=\"position: absolute;left:25px;z-index: 999;\" ng-show=\"basicInfo.zoom\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVULeft()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDLeft()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVLeft()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVLeft()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div><div class=\"line-chart-graph\" style=\"width: 100%;height:100%;\" ng-click=\"drillDown()\"></div><div style=\"position: absolute;right:-15px;top:0px;z-index: 999;\" ng-show=\"checkY2Btns()\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVURight()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDRight()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVRight()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVRight()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" style=\"text-align: left;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[0] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[1] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;position: relative\"><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;left: 20px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanleft()\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanright()\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;width: 100%;position: absolute;\"></div><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;right: -5px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomin()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomout()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div></div></div>' + dom_real_time_grap;\n\n        return html;\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    var dataService = this._dataService;\n    var _$interval = this._$interval;\n    scope.status = true;\n    var timeOut = this.$timeout;\n    scope.completionPercent = 0;\n    scope.graphId = attrs.id;\n    this.$timeout(function() {\n        var getData = function(numSeries, numRows, name) {\n            var result = {\n                labels: null,\n                data: null\n            };\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)\n                        ];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function(range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n\n        var canScroll = false;\n\n        var timer = null;\n        var mouseOverHandler = function(e, g, context) {\n            //\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n\n        var mouseEnterHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n        var mouseOutHandler = function(e, g, context) {\n            // set flag to false\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            canScroll = false;\n        };\n\n        var scroll = function(e, g, context) {\n\n            if ((scope.basicInfo && !scope.basicInfo.zoom) || !canScroll) {\n                return;\n            }\n\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function() {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function(e, g, context) {\n            if (context.isPanning) {\n                if (e.offsetX <= (g.plotter_.area.x)) {\n                    movePan(e, g, context, 'r');\n                } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(e, g, context, 'l');\n                } else {\n                    movePan(e, g, context, 'h');\n                }\n                timeOut(function() {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function(e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n\n            canScroll = true;\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'wheel': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseenter': mouseEnterHandler,\n            'mouseup': mouseupHandler,\n            // 'mouseover': mouseOverHandler,\n            'mouseout': mouseOutHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            legend: 'follow',\n            labelsKMB: true,\n            labelsSeparateLines: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            highlightSeriesOpts: {\n                strokeWidth: 3,\n                strokeBorderWidth: 1,\n                highlightCircleSize: 5\n            },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function(y) {\n                        return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function(e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function(g, isInit) {\n                if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                    scope.refersh(g, isInit);\n                }\n            },\n            'interactionModel': interactionModel\n        };\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n        var timer_auto = null;\n        var process_bar_timer = null;\n        element.find(\"#real_time_graph_\" + attrs.id).on(\"hidden.bs.modal\", function() {\n            // put your default event here\n            _$interval.cancel(timer_auto);\n            _$interval.cancel(process_bar_timer);\n        });\n\n\n        //real-time-graph\n        element.find(\"#real_time_graph_\" + attrs.id).on('shown.bs.modal', function() {\n\n            var tempConifg = {\n                drawGapEdgePoints: true,\n                'pointSize': 3,\n                labelsKMB: true,\n                labelsSeparateLines: false,\n                drawPoints: false,\n                drawAxesAtZero: false,\n                labelsDivStyles: {\n                    'text-align': 'right',\n                    'position': 'relative',\n                    'display': 'inline-block'\n                },\n                // x label y label\n                ylabel: 'Value',\n                xlabel: 'Date',\n                colors: scope.defaultColors,\n                // multiple Y axis\n                series: {\n                    'Device0': {\n                        axis: 'y2'\n                    },\n                    'Device4': {\n                        axis: 'y2'\n                    }\n                },\n                // showRangeSelector: true,\n                axes: {\n                    y: {\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    y2: {\n                        // set axis-related properties here\n                        'labelsKMB': true,\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    x: {\n                        // datetime format\n                        valueFormatter: function(y) {\n                            return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                        }\n                    }\n                },\n                interactionModel: {}\n            };\n\n            scope.realTimeGraph = new Dygraph(element.find(\"div[class='real-time-graph']\")[0], sampleData.data, tempConifg);\n            scope.realTimeGraph.updateOptions(scope.currentChartOptions);\n            scope.realTimeGraph.updateOptions({\n                \"file\": [],\n                highlightSeriesOpts: {\n                    strokeWidth: 3,\n                    strokeBorderWidth: 1,\n                    highlightCircleSize: 5\n                },\n            });\n\n            timer_auto = dataService.autoUpdateGraph(scope.applicationName, scope.auto_device_name, scope.auto_schema, scope.auto_store, scope.auto_fields, element.find(\"div[class='real-time-graph']\").width() / 4, function(graph_data, worker, interval) {\n                // update graph\n                var deviceConfig = scope.auto_metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{\n                    min: null,\n                    max: null\n                }, {\n                    min: null,\n                    max: null\n                }];\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == scope.auto_store) {\n                        angular$1.forEach(graph_data.data, function(line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        var showY2axis = false;\n                        angular$1.forEach(collection.rows, function(row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[row.label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular$1.forEach(allLines, function(realLine) {\n                                try {\n                                    var value = f(graph_data.data[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.min) * 0.10;\n                            } else {\n                                yrange.min = yrange.min - (yrange.max - yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max - yrange.min) * 0.10;\n                            }\n                        });\n\n                        var newLines = [];\n                        if (!showY2axis) {\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: newLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        } else {\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: allLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                if (worker) {\n                    timer_auto = worker;\n                }\n\n\n                //\n                var perInterval = interval / 100;\n                var counter = 0;\n\n                if (process_bar_timer) {\n                    _$interval.cancel(process_bar_timer);\n                    counter = 0;\n                }\n\n                process_bar_timer = _$interval(function() {\n                    scope.completionPercent = counter;\n                    counter++;\n                }, perInterval, 100);\n\n\n            });\n        });\n\n\n        scope.currentChartOptions = {};\n\n        scope.showRealTimeGraph = function() {\n            element.find(\"#real_time_graph_\" + attrs.id).modal();\n        };\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                    xAxisHeight: 0,\n                    axes: {\n                        x: {\n                            drawAxis: false\n                        }\n                    },\n                    showRangeSelector: true,\n                    rangeSelectorHeight: 30\n                });\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function(event) {\n                status = false;\n                timeOut(function() {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {\n                        begin: finalDateRagne[0],\n                        end: finalDateRagne[1]\n                    };\n                });\n            });\n\n            scope.$on('mouseUpMessage', function($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function() {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {\n                            begin: finalDateRange[0],\n                            end: finalDateRange[1]\n                        };\n                    });\n                }\n            });\n\n            scope.$on('parentScatterViewChangedEvent', function(event, params) {\n                angular$1.forEach(params.children, function(item) {\n                    if (item == attrs.id) {\n                        scope.currentView = params.view;\n                    }\n                });\n            });\n\n\n            scope.$on('bindFatherGraphEvent', function(event, data) {\n                angular$1.forEach(data.children, function(child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function(g, isInit) {\n                                // console.info(\"refersh running!\" + \" is  Init?\"+ isInit);\n                                scope.refersh(g, isInit);\n                            }\n                        });\n\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function(event) {\n                if (status) {\n                    timeOut(function() {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function(event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {\n                    'graphs': [scope.currentChart],\n                    children: basicInfo.childrenChart\n                };\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope, $stateParams, graphDataService, $compile, $q) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n    $scope.applicationName = $rootScope.applicationName;\n\n    $scope.alertMessage;\n\n    $scope.showY2Btns = false;\n\n    $scope.legendText = null;\n    $scope.legendText_device = null;\n    $scope.legendText_datetime = null;\n    $scope.legendText_column = null;\n    $scope.legendText_value = null;\n    $scope.legendColor = null;\n    $scope.autoupdate = false;\n    $scope.auto_device_name = \"\";\n    $scope.auto_schema = \"\";\n    $scope.auto_store = \"\";\n    $scope.auto_fields = [];\n    // default data-time intervals\n\n    $scope.defaultTimeIntervals = [{\n            name: \"10 seconds\",\n            interval: 10000\n        },\n        {\n            name: \"30 seconds\",\n            interval: 30000,\n            scales: [10000]\n        },\n        {\n            name: \"1 minutes\",\n            interval: 60000,\n            scales: [10000, 30000]\n        },\n        {\n            name: \"5 minutes\",\n            interval: 300000,\n            scales: [30000, 60000]\n        },\n        {\n            name: \"30 minutes\",\n            interval: 1800000,\n            scales: [60000, 300000]\n        }, {\n            name: \"1 hour\",\n            interval: 3600000,\n            scales: [60000, 300000, 1800000]\n        }, {\n            name: \"1 day\",\n            interval: 86400000,\n            scales: [300000, 1800000, 3600000]\n        }, {\n            name: \"1 week\",\n            interval: 604800017,\n            scales: [3600000, 86400000]\n        }, {\n            name: \"1 month\",\n            interval: 2629800000,\n            scales: [86400000, 604800017]\n        }, {\n            name: \"1 year\",\n            interval: 31557600000,\n            scales: [2629800000]\n        }\n    ];\n\n    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n\n    $scope.locked_interval = null;\n    // lock interval\n    $scope.lock = function(interval) {\n        if ($scope.locked_interval) {\n            if ($scope.locked_interval == interval) {\n                $scope.locked_interval = null; // unlocked\n                if (!$scope.dateTimeIntervals) {\n                    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n                }\n                // change default choosed interval\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            } else {\n                $scope.locked_interval = interval; // locked\n                // change color\n                // change dropdown list\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            }\n        } else {\n            $scope.locked_interval = interval;\n            // change color\n\n            // change dropdown list\n            // check the user default config first\n            if ($scope.dateTimeIntervals) {\n\n            } else {\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n            }\n\n\n            $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n            $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n        }\n        // change\n        $scope.changeInterval($scope.currentIntervalChoosed);\n    };\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id,\n        callback: function(data) {\n            if (data) {\n                widgetData = data;\n                if (widgetData.data.metadata.data.basic.ranges) {\n                    if (widgetData.data.metadata.data.basic.hasOwnProperty(\"ranges\")) {\n                        $scope.dateTimeIntervals = widgetData.data.metadata.data.basic.ranges;\n                        angular$1.forEach($scope.dateTimeIntervals, function(range) {\n                            range[\"interval\"] = range.value;\n                            if (range.checked == true) {\n                                $scope.currentIntervalChoosed = range;\n                            }\n                        });\n                    }\n                } else {\n                    $scope.currentIntervalChoosed = $scope.dateTimeIntervals[1];\n                }\n            }\n        }\n    });\n\n\n    $scope.changeInterval = function(interval) {\n\n        var range = $scope.currentChart[\"xAxisZoomRange\"];\n\n        if (range[0] instanceof Date) {\n            range[0] = range[0].getTime();\n        }\n\n        if (range[1] instanceof Date) {\n            range[1] = range[1].getTime();\n        }\n\n        if (interval && ((range[1] - interval.interval) >= range[0])) {\n            $scope.rangeConfig.dateWindow = [new Date(range[1] - interval.interval), range[1]];\n            $scope.currentChart.updateOptions($scope.rangeConfig);\n            $scope.currentIntervalChoosed = interval;\n        }\n    };\n\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {\n            device: []\n        };\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n        // get start and end from url\n        var begin_path = $stateParams.begin;\n        var end_path = $stateParams.end;\n        var init_flag = false;\n\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function() {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n        $scope.showOrHideDevice = function(device) {\n            angular$1.forEach($scope.childrenDevices, function(item, index) {\n                if (item.name === device.name) {\n                    var graph = $scope.currentChart;\n                    if (device.show == true) {\n                        graph.setVisibility(index, false);\n                        device.show = false;\n                    } else {\n                        graph.setVisibility(index, true);\n                        device.show = true;\n                    }\n\n                }\n            });\n        };\n\n        $scope.fixGraphWithGap_click = function() {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.checkY2Btns = function() {\n            return $scope.basicInfo.zoom === true && $scope.showY2Btns === true;\n        };\n\n        $scope.$on('deviceInfoEvent', function(event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.auto_schema = metadata.data.source.store;\n            $scope.auto_metadata = metadata;\n            $scope.auto_device_name = deviceData.device.name;\n\n            $scope.$watch('currentView', function(nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    $scope.$emit('graphScatterViewChangeEvent', {\n                        children: $scope.basicInfo.childrenChart,\n                        view: nObj\n                    });\n                    $scope.button_handlers = {}; // clean handlers\n                    $element.find(\"#buttons_area\").empty();\n                    if (nObj == -1) {\n                        $scope.autoupdate = true;\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                            angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === rangeLevel) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column.startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n                            $scope.auto_fields = fields;\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                                initChart(data, deviceData.device.name);\n                            }, function(error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        $scope.autoupdate = false;\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === rangeLevel) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if (column.startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                // show children view\n                                dataService.childrenExtensionInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, metadata.data.source.relation_group, rangeLevel, otherLevels, fields).then(function(data) {\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                        interactionHandler();\n                                    }else if($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.device && $scope.interactions.graphs.device.children){\n                                        // no relationship in fgp platform just take it from interactions Configuration  extension_type\n                                        if($scope.interactions.graphs.device.children.data){\n                                            var devices_key = $scope.interactions.graphs.device.children.data().then(\n                                                function(data){\n                                                    $q.all(dataService.devicesExtensionInitInfo($rootScope.host, $rootScope.applicationName,data,metadata.data.source.store, $scope.interactions.graphs.device.children.extension_type, rangeLevel, otherLevels, fields)).then(\n                                                        function(data){\n                                                            initChildrenChart(data);\n                                                            interactionHandler();\n                                                        },\n                                                        function(error){\n                                                            console.error(error);\n                                                        }\n                                                    );\n                                                },\n                                                function(error){\n                                                    return;\n                                                }\n                                            );\n                                        }else{\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                }, function(error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n\n            var interactionHandler = function(){\n                // interactions for scatter view\n                if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter) {\n                    // 1. color\n                    if ($scope.interactions.graphs.buttons.scatter.color) {\n                        // change color by \"field\"\n                        var buttons = $scope.interactions.graphs.buttons.scatter.color;\n\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                var colors = [];\n                                // set button status\n                                if (button[\"active\"]) {\n                                    // make them random colors\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        if ($scope.defaultColors[$index]) {\n                                            colors.push($scope.defaultColors[$index]);\n                                        } else {\n                                            colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                                        }\n                                    });\n                                    button[\"active\"] = false;\n                                } else {\n                                    // the custom func returns color.\n                                    var field = button.field;\n                                    var _func = button._func;\n                                    // devices\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        colors.push(_func(device[field]));\n                                    });\n                                    button[\"active\"] = true;\n                                }\n                                // update graph colors\n                                $scope.currentChart.updateOptions({\n                                    \"colors\": colors\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // 2. data filter\n                    if ($scope.interactions.graphs.buttons.scatter.dataFilter) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.dataFilter;\n\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                // devices\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        device.show = true;\n                                        $scope.currentChart.setVisibility($index, true);\n                                    } else {\n                                        device.show = false;\n                                        $scope.currentChart.setVisibility($index, false);\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // highlight   $scope.currentChart.setSelection(false, line);\n                    if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter && $scope.interactions.graphs.buttons.scatter.highlighting) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.highlighting;\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                var hideAllOthers = button.hideOther;\n                                // devices\n                                var timerInterval = 0;\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        $timeout(function(){\n                                            $scope.currentChart.setSelection(false, device[field]);\n                                        }, timerInterval);\n                                        timerInterval += 1000;\n                                    }else{\n                                        if(hideAllOthers && hideAllOthers == true){\n                                            device.show = false;\n                                            $scope.currentChart.setVisibility($index, false);\n                                        }\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n\n                }\n                // n. other.....\n            };\n\n\n\n            // first time of showing chart\n            $scope.$watch('currentChart', function(newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n\n                    // fields of range level\n                    var fields = [];\n                    var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0 && level.name === rangeLevel) {\n                            var lines = level.rows;\n                            if (lines) {\n                                angular$1.forEach(lines, function(line) {\n                                    //\n                                    if (line.value) {\n                                        var columns = (line.value).match(patt);\n                                        angular$1.forEach(columns, function(column) {\n                                            if ((column).startsWith('data.')) {\n                                                fields.push(column.replace('data.', ''));\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    $scope.auto_fields = fields;\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n                            //call scatter view init.\n                            $scope.currentView = 1;\n                        } else {\n                            $scope.currentView = -1;\n                            initChart(data, deviceData.device.name);\n                        }\n\n                    }, function(error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function(newValue, oldValue) {\n                if (newValue.begin != null && newValue.end != null) {\n                    var expect_points = Math.floor($element.parent().width());\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    if ($scope.locked_interval) {\n                        expectedInterval = $scope.locked_interval.interval;\n                    }\n                    var conf = $scope.intevals.device;\n\n                    if(conf == null || conf.length == 0){\n                        return false;\n                    }\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                        $scope.autoupdate = false;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n\n\n                        if ($scope.currentView == -1) {\n                            $scope.autoupdate = true;\n                            $scope.auto_store = conf[conf.length - 1].name;\n                        }\n\n\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                        $scope.autoupdate = false;\n                    }\n\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function(config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n\n                    // check the interval(data) no more than the number of expected points\n                    if (expectedInterval == lastOne) {\n\n                        // check\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.limits) {\n                            expect_points = $scope['interactions'].graphs.limits;\n                        }\n                        //\n                        if (((newValue.end - newValue.begin) / expectedInterval) > expect_points) {\n                            // reset range bar\n                            $scope.rangeConfig.dateWindow = [new Date(newValue.end - (expect_points - 1) * expectedInterval), new Date(newValue.end)];\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                            $scope.alertMessage = \"Limit the number of \\\"Zoom-Out\\\" points to \" + expect_points + \".\";\n                            $timeout(function() {\n                                $scope.alertMessage = null;\n                            }, 5000);\n                            return;\n                        }\n                    }\n\n                    // update range-bar\n                    if ($scope.rangeSelectorBar) {\n                        angular$1.forEach($scope.trees, function(tree) {\n                            if (tree.range == true) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === tree.store) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                                        // udpate chart\n                                        var showData = data;\n                                        showData = showData.filter(function(obj) {\n                                            return obj != null;\n                                        });\n\n                                        // update range bar\n                                        var basicInfo = $scope.basicInfo;\n                                        var allLines = [];\n                                        angular$1.forEach(showData, function(line) {\n                                            allLines.push([new Date(line.timestamp)]);\n                                        });\n                                        var series_range = {\n                                            'l0': {\n                                                axis: 'y1'\n                                            }\n                                        };\n\n                                        var rangeBarLabels = [];\n                                        for (var i = 0; i < fields.length; i++) {\n                                            rangeBarLabels.push(fields[i]);\n\n                                            var f = new Function(\"data\", \"with(data) { if(data.\" + fields[i] + \"!=null)return data.\" + fields[i] + \";return null;}\");\n                                            // add value\n                                            var counter = 0;\n                                            angular$1.forEach(allLines, function(realLine) {\n                                                try {\n                                                    var value = f(showData[counter]);\n                                                    realLine.push(value);\n                                                } catch (ex) {\n                                                    realLine.push(null);\n                                                }\n                                                counter++;\n                                            });\n                                        }\n                                        //\n\n                                        if ($scope.rangeConfig && $scope.rangeConfig.file && $scope.rangeConfig.file != null) {\n                                            var objNeed2Add = [];\n                                            angular$1.forEach($scope.rangeConfig.file, function(item) {\n                                                var flag = false;\n                                                var dataLength = -1;\n                                                angular$1.forEach(allLines, function(line) {\n                                                    dataLength = line.length;\n                                                    if (line.length > 0 && line[0].getTime() === item[0].getTime()) {\n                                                        flag = true;\n                                                    } else if (line.length === 0) {\n                                                        flag = true;\n                                                    } else {\n                                                        dataLength = line.length;\n                                                    }\n\n                                                });\n                                                if (!flag) {\n                                                    var tempObj = [];\n                                                    for (var i = 0; i < dataLength; i++) {\n                                                        tempObj[i] = item[i];\n                                                    }\n                                                    objNeed2Add.push(tempObj);\n                                                }\n                                            });\n                                        }\n                                        allLines = allLines.concat(objNeed2Add);\n                                        allLines.sort(function(a, b) {\n                                            return a[0] > b[0] ? 1 : -1;\n                                        });\n                                        if ($scope.showY2Btns) {\n                                            //noinspection JSDuplicatedDeclaration\n                                            if (!$scope.rangeConfig.axes.hasOwnProperty(\"y2\")) {\n                                                series_range = {\n                                                    'l0': {\n                                                        axis: 'y1'\n                                                    },\n                                                    'l0': {\n                                                        axis: 'y2'\n                                                    }\n                                                };\n                                                $scope.rangeSeries = series_range;\n                                                $scope.rangeConfig = {\n                                                    'file': allLines,\n                                                    'labels': ['x'].concat(rangeBarLabels),\n                                                    'series': series_range,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                };\n                                                if (basicInfo && basicInfo.range_show) {\n                                                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                                }\n                                            } else {\n                                                $scope.rangeSelectorBar.updateOptions({\n                                                    'file': allLines,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                });\n                                            }\n\n                                        } else {\n                                            series_range[\"span_y2\"] = {\n                                                axis: 'y2'\n                                            };\n                                            $scope.rangeSeries = series_range;\n                                            var newLines = [];\n                                            angular$1.copy(allLines, newLines);\n                                            angular$1.forEach(newLines, function(line) {\n                                                line.push(null);\n                                            });\n                                            $scope.rangeConfig = {\n                                                'file': newLines,\n                                                'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                                'series': series_range,\n                                                highlightSeriesOpts: {\n                                                    strokeWidth: 3,\n                                                    strokeBorderWidth: 1,\n                                                    highlightCircleSize: 5\n                                                }\n                                            };\n                                            if (basicInfo && basicInfo.range_show) {\n                                                $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                            }\n                                        }\n                                    },\n                                    function(data) {\n                                        console.info(data);\n                                    }\n                                );\n                            }\n                        });\n                    }\n\n\n                    $scope.loadingShow = true;\n                    // check separated points config\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: true\n                        });\n                    } else {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: false\n                        });\n                    }\n\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        $scope.legendText = null;\n                        var deviceInfo = [];\n                        var currentStore = \"\";\n                        $scope.childrenDevices = [];\n                        angular$1.forEach($scope.childTrees, function(device) {\n                            angular$1.forEach(device.trees, function(tree, index) {\n                                if (expectedInterval == tree.frequency) {\n                                    currentStore = tree.store;\n                                    deviceInfo.push({\n                                        name: device.name,\n                                        tree: tree.tree\n                                    });\n                                    device[\"show\"] = true;\n                                    $scope.childrenDevices.push(device);\n                                }\n                            });\n                        });\n                        var fields = [];\n                        var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                        angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                            if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                var lines = level.rows;\n                                if (lines) {\n                                    angular$1.forEach(lines, function(line) {\n                                        if (line.value) {\n                                            var columns = (line.value).match(patt);\n                                            angular$1.forEach(columns, function(column) {\n                                                if (column && (column).startsWith('data.')) {\n                                                    fields.push(column.replace('data.', ''));\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            }\n                        });\n\n                        $scope.auto_fields = fields;\n                        dataService.devicesStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                            var showData = [];\n                            angular$1.forEach(data, function(arr, key) {\n                                var deviceData = [].concat(arr);\n                                showData.push({\n                                    device: key,\n                                    data: deviceData\n                                });\n                                if(deviceData.length == 0){\n                                    var deleteIndex = -1;\n                                    // no data\n                                    angular$1.forEach($scope.childrenDevices, function(item, index){\n                                        if(item.name == key){\n                                            deleteIndex = index;\n                                        }\n                                    });\n                                    if(deleteIndex != -1){\n                                        $scope.childrenDevices.splice(deleteIndex, 1);\n                                    }\n                                }\n                            });\n                            // order childrenDevices by showData\n                            var devicesMatchData = [];\n                            angular$1.forEach(showData, function(item){\n                                angular$1.forEach($scope.childrenDevices, function(device){\n                                    if(item.device == device.name){\n                                        devicesMatchData.push(device);\n                                    }\n                                });\n                            });\n                            //reset childrenDevies\n                            $scope.childrenDevices = devicesMatchData;\n                            //get configuration\n                            updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n                        }, function(data) {\n                            console.info(data);\n                        });\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // cal tree\n                        angular$1.forEach($scope.trees, function(tree, index) {\n                            if (expectedInterval == tree.frequency) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, tree.frequency).then(function(data) {\n                                    // udpate chart\n                                    var showData = data;\n                                    showData = showData.filter(function(obj) {\n                                        return obj != null;\n                                    });\n                                    showData.sort(function(a, b) {\n                                        return a.timestamp > b.timestamp ? 1 : -1;\n                                    });\n                                    // get configuration\n                                    updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n                                    // rest visibility\n                                    angular$1.forEach(showData, function(item){\n                                        item[\"show\"] = true;\n                                    });\n\n                                    // tell some other widgets, the graph is changed.\n                                    $timeout(function() {\n                                        $rootScope.$broadcast('chartDataChangeEvent', {\n                                            'id': element_id,\n                                            'group': 'device',\n                                            'data': {\n                                                'collection': tree.store,\n                                                'group': 'device',\n                                                'data': showData\n                                            }\n                                        });\n                                    });\n\n                                }, function(data) {\n                                    console.info(data);\n                                });\n                            }\n                        });\n\n                        $scope.fixGraphWithGap();\n                    }\n                    // 2. series highlighting\n\n                    $scope.status = false;\n                }\n            });\n\n        });\n\n\n        var fetchData = function(values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                if (node.data != null && node.data.array) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                } else if (node.data != null) {\n                    Array.prototype.push.apply(values, node.data.slice(0, node.data.length));\n                }\n\n            }\n\n        };\n\n\n        $scope.trees = [];\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function(data, deviceName) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function(tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({\n                    name: tree.store,\n                    interval: tree.frequency\n                });\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            // fetchData(allData, rangeTree.tree);only get first and last\n            // fix the problem of never seen the current data.\n            rangeTree.last.timestamp = rangeTree.last.timestamp + (rangeTree.frequency - 1);\n            allData = allData.concat([rangeTree.first, rangeTree.last]);\n\n            allData = allData.filter(function(obj) {\n                return obj != null;\n            });\n\n            allData.sort(function(a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({\n                    timestamp: timestamp - currentInterval\n                });\n                Array.prototype.push.apply(newData, allData);\n                newData.push({\n                    timestamp: timestamp + currentInterval\n                });\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // put the data into range tree cache\n            if (rangeTree) {\n                //\n                graphDataService.put(deviceName + \"/\" + rangeTree.store + \"/\" + $scope.graphId, [rangeTree.first, {\n                    timestamp: moment().endOf('day').toDate().getTime()\n                }]);\n            }\n            // get configuration and make real data\n            updateChart(metadata, store, allData, rangeTree);\n        };\n\n        var initChildrenChart = function(deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            $scope.childrenDevices = [];\n\n            angular$1.forEach(deviceDatas, function(deviceData, _index) {\n                var device = {};\n                device[\"show\"] = true;\n                angular$1.merge(device, deviceData.device, deviceData.extension);\n                $scope.childrenDevices.push(device);\n                var trees = deviceData.trees;\n                device[\"trees\"] = trees;\n                $scope.childTrees.push(device);\n                var rangeTree = null;\n                angular$1.forEach(trees, function(tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function(interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({\n                            name: tree.store,\n                            interval: tree.frequency\n                        });\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [rangeTree.first, {\n                        timestamp: moment().endOf('day').toDate().getTime()\n                    }];\n                    allData = allData.filter(function(obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function(a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n            });\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n        var updateChildrenChart = function(metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function(device, key, _index) {\n                angular$1.forEach(device.data, function(item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function(label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n                });\n            });\n            // order\n            allXLabels.sort(function(a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function(label) {\n                allLines.push([label]);\n            });\n\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function(device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        labels.push(key);// put the name here and\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function(realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function(odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            var connectSeparatedPoints = false;\n            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n            }\n\n            //update chart\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'labelsKMB': true,\n                        'file': allLines,\n                        legend: 'never',\n                        labelsKMB: true,\n                        labelsSeparateLines: false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        // data formate\n                        labels: ['x'].concat(sampleData.labels),\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max],\n                                axisLabelWidth: 80\n                            },\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    $scope.showY2Btns = false;\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function(line) {\n                        line.push(null);\n                    });\n                    series[\"span_y2\"] = {\n                        'axis': 'y2'\n                    };\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'legend': 'never',\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labelsSeparateLines': false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max]\n                            },\n                            'y2': {\n                                axisLabelFormatter: function(d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                //\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n\n                // set the first one to range bar\n                // update range bar with the first channel data\n                if ($scope.basicInfo && $scope.basicInfo.range_show && $scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n\n                    Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                        zoom: true,\n                        selection: false,\n                        range: false\n                    });\n                    if (showY2axis) {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    } else {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels).concat(['span_y2']),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    }\n                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                    // reset the datetime for current chart\n\n                    if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= newLines[0][0] && $scope.chartDateWindow[1] <= newLines[newLines.length - 1][0])) {\n                        // keep the current range bar refresh once.\n                        $scope.chartDateTime = {\n                            begin: $scope.chartDateTime.begin,\n                            end: $scope.chartDateTime.end\n                        };\n                        $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    } else {\n\n                        $scope.currentChart[\"xAxisZoomRange\"] = [newLines[0][0], newLines[newLines.length - 1][0]];\n                        if (begin_path && end_path && !init_flag) {\n                            // $scope.chartDateTime = {\n                            // \"begin\": new Date(new Number(begin_path)),\n                            // \"end\": new Date(new Number(end_path))\n                            // };\n                            $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            init_flag = true;\n                        } else {\n                            if ($scope.currentIntervalChoosed && ((newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= newLines[0][0].getTime())) {\n                                $scope.rangeConfig.dateWindow = [new Date(newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), newLines[newLines.length - 1][0]];\n                            } else {\n                                $scope.chartDateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                                $scope.rangeConfig.dateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                            }\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChartOptions = $scope.rangeConfig;\n                    }\n                } else {\n                    //  keep the same time window and refersh\n                    $scope.chartDateTime = {\n                        begin: $scope.chartDateTime.begin,\n                        end: $scope.chartDateTime.end\n                    };\n                    $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    $scope.loadingShow = false;\n                }\n\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function(metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function(device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function(collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y1',\n                                };\n                            } else {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                                $scope.showY2Btns = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function(data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: value\n                                    });\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: null\n                                    });\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function(item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({\n                                device: device.device,\n                                data: tempData\n                            });\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function(nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function(line) {\n                angular$1.forEach(chartData, function(timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(null);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n                    var connectSeparatedPoints = false;\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                    }\n                    if (showY2axis) {\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                        };\n\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        $scope.showY2Btns = false;\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function(line) {\n                            line.push(null);\n                        });\n                        series[\"span_y2\"] = {\n                            axis: 'y2'\n                        };\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightCircleSize: 2,\n\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                if($scope.currentView == -1){\n                                    // device view is using default legend\n                                    return false;\n                                }\n                                // set current child device and will do show one\n                                $scope.currentHighLightChildDevice = seriesName;\n                                var maxWidth = e.target.offsetWidth;\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                // get device name columns\n                                var relationConfig = metadata.data.groups[2];\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        var colorIndex = -1;\n                                        //get index from childrenDevices\n                                        angular$1.forEach($scope.childrenDevices, function(device, _index){\n                                            if(device.name == seriesName){\n                                                colorIndex = _index;\n                                            }\n                                        });\n                                        $scope.legendColor = $scope.currentChart.user_attrs_.colors[colorIndex];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        $scope.legendText_device_name = \"\";\n                                        // if the nameSd exist\n                                        if($scope.childTrees && $scope.childTrees.length > 0){\n                                            angular$1.forEach($scope.childTrees, function(item){\n                                                //\n                                                if(item.name == seriesName){\n                                                    if(item[relationConfig.nameColumn]){\n                                                        $scope.legendText_device_name = item[relationConfig.nameColumn];\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        if($scope.legendText_device_name == \"\"){\n                                            //\n                                            $scope.legendText_device_name = seriesName;\n                                        }\n                                        if (moment.tz.guess()) {\n                                            $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                        } else {\n                                            $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                        }\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    if (maxWidth < (point_show.x + 200)) {\n                                        $scope.legendLeft = point_show.x - 200;\n                                    } else {\n                                        $scope.legendLeft = point_show.x;\n                                    }\n                                });\n\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function(metadata, store, rangeData, allData) {\n\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function(yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n                    if (allLines.length == 0) {\n                        $scope.currentChart.updateOptions({\n                            'file': [],\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n                            var connectSeparatedPoints = false;\n                            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                            }\n                            if (showY2axis) {\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            } else {\n                                var newLines = [];\n                                $scope.showY2Btns = false;\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n\n                                series[\"span-Y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            }\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        $scope.autoUpdateChart = updateDetailChart;\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function(metadata, store, allData, rangeTree) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {\n                                'l0': {\n                                    axis: 'y1'\n                                }\n                            };\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {\n                                        axis: 'y1'\n                                    },\n                                    'l0': {\n                                        axis: 'y2'\n                                    }\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.showY2Btns = false;\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                                // save\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n                        var connectSeparatedPoints = false;\n                        if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                            connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                        }\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {\n                                axis: 'y2'\n                            };\n                            $scope.showY2Btns = false;\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        axisLabelFormatter: function(d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n\n\n                        if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= allLines[0][0] && $scope.chartDateWindow[1] <= allLines[allLines.length - 1][0])) {\n                            // keep the current range bar refresh once.\n                            $scope.chartDateTime = {\n                                begin: $scope.chartDateTime.begin,\n                                end: $scope.chartDateTime.end\n                            };\n                            $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                        } else {\n\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            if (begin_path && end_path && !init_flag) {\n                                // $scope.chartDateTime = {\n                                // \"begin\": new Date(new Number(begin_path)),\n                                // \"end\": new Date(new Number(end_path))\n                                // };\n                                $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                init_flag = true;\n                            } else {\n                                if ($scope.currentIntervalChoosed && ((allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= allLines[0][0].getTime())) {\n                                    $scope.rangeConfig.dateWindow = [new Date(allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), allLines[allLines.length - 1][0]];\n                                } else {\n                                    $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                    $scope.rangeConfig.dateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                }\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                        }\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n        $scope.chartDateTime = {\n            begin: null,\n            end: null\n        };\n\n\n        $scope.drillDown = function(){\n            //get redirect configuration from interactions\n            if($scope.currentView == 1 && $scope.currentHighLightChildDevice && $scope.drill && $scope.drill.graphs && $scope.drill.graphs.drillDown && $scope.drill.graphs.drillDown.url){\n                //\n                var url = $scope.drill.graphs.drillDown.url;\n                url = url.replace(\"{0}\", $scope.currentHighLightChildDevice);\n                $window.open(url);\n            }\n        };\n        // function for show one\n        $scope.showOne = function(deviceName) {\n\n            if ($rootScope['standalone'] && $rootScope['standalone'] == true) {\n                return false;\n            }\n\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/admin/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/admin/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n\n        var btntimer = null;\n\n\n        $scope.btnZoomInVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomInVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVULeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVDLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVURight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVDRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        // functions for buttons\n        $scope.btnpanleft = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[0] - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0] - pan_delta;\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[1] - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1] - pan_delta;\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnpanright = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = $scope.chartDateWindow[0].getTime() + pan_delta;\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            } else {\n                if (($scope.chartDateWindow[0] + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = ($scope.chartDateWindow[0] + pan_delta);\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1].getTime() + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            } else {\n                if (($scope.chartDateWindow[1] + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1] + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        $scope.btnzoomin = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            startDate = rangeStart + (delta * 2);\n            endDate = rangeEnd - (delta * 2);\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            //\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnzoomout = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            if ((rangeStart - (delta * 2)) > panRange[0]) {\n                startDate = rangeStart - (delta * 2);\n            } else {\n                startDate = panRange[0];\n            }\n\n            if ((rangeEnd + (delta * 2)) < panRange[1]) {\n                endDate = rangeEnd + (delta * 2);\n            } else {\n                endDate = panRange[1];\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        var timer = null;\n        $scope.refersh = function(g, init) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function() {\n                if (init || g.xAxisRange()[0] != $scope.chartDateTime.begin || g.xAxisRange()[1] != $scope.chartDateTime.end) {\n                    $scope.chartDateTime = {\n                        begin: g.xAxisRange()[0],\n                        end: g.xAxisRange()[1]\n                    };\n                    $scope.chartDateWindow = g.xAxisRange();\n                }\n            }, 600);\n        };\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph\n    .$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location', '$stateParams', '$compile', '$q'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap', 'ui.router', 'angular-cache']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function() {\n        return function(input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .factory('$graphstorage', ['$window', function($window) {\n        return {\n            setTree: function(key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getTree: function(key) {\n                return JSON.parse($window.localStorage[key]) || false;\n            },\n            addTree: function(key, value) {\n                if ($window.localStorage[key]) {\n                    var trees = JSON.parse($window.localStorage[key]);\n                    trees.push(value);\n                    this.setTree(key, trees);\n                } else {\n                    this.setTree(key, [value]);\n                }\n            },\n            clear: function() {\n                $window.localStorage.clear();\n            }\n        }\n    }])\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function() {\n        return function(scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).config(function(CacheFactoryProvider) {\n        angular$1.extend(CacheFactoryProvider.defaults, {\n            maxAge: 30 * 60 * 1000, // half an hour\n            deleteOnExpire: 'aggressive',\n        });\n    }).service('graphDataService', function(CacheFactory) {\n        var graphCache = null;\n        if (!CacheFactory.get('graphCache')) {\n            graphCache = CacheFactory('graphCache',{\n                maxAge: 30 * 60 * 1000, // half an hour\n                deleteOnExpire: 'aggressive'\n            });\n        }\n        return {\n            get: function(name) {\n                return graphCache.get('/graph/'+name);\n            },\n            put: function(name, data) {\n                return graphCache.put('/graph/'+name, data);\n            }\n        };\n    })\n    .filter('tableformatter', ['$filter', function($filter) {\n        return function(input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}