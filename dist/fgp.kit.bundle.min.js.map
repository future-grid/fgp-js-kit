{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","$on","evt","msg","push","forEach","item","id","items","element","find","children","item_new","findChild4Repeat","metadata","key","callback","data","from","parentId","parentHtmlObj","arrayItems","i","parent","currentItem","html_render","append","findChild","deviceInfo","then","$broadcast","device","graph","graphs","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","_$http","_$q","indexCache","deviceStores","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","jsonpCallback","contentType","dataType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","jsonp","params","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","fillChildrenTree","buckets","tree","showData","value","array","size","flag","info","fillTree","calTree","start","end","filter","elem","devicesStoreData","store","bucketsData","devicesNullBucket","index","bucketKeys","nullBucket","bucket","deviceBucketKeys","JSON","stringify","deviceData","currentBucketShowData","deviceStoreData","defaultColors","this$1","colors","co","lor","Math","floor","random","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","attr","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","_dataService","dom_loading","dom_empty_data","link","status","timeOut","getData","numSeries","numRows","labels","initDate","Date","j","getTime","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","zoomTimer","scroll","cancel","normal","detail","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","mousedown","mousemove","mouseup","drawGapEdgePoints","pointSize","labelsKMB","concat","highlightCircleSize","strokeWidth","highlightSeriesOpts","strokeBorderWidth","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","on","finalDateRagne","chartDateTime","begin","finalDateRange","child","synchronize","selection","childrenChart","param","$window","elementId","emptyDataShow","loadingShow","intevals","height","fixInterval","noneFixed","fixGraphWithGap","currentInterval","currentIntervalName","interval","fixed","tempDate","obj","labels_","NaN","file","copy","file_","fixGraphWithGap_click","basic","parent_container","data_from","$watch","nObj","oObj","groups","collections","level","rows","initChart","relation","relation_group","initChildrenChart","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","config","currentStore","childTrees","trees","frequency","arr","Array","apply","slice","updateChildrenDetailChart","rangeChildrenData","rangeConfig","rangeSeries","group","collection","ordinalRangeData","timestamp","sort","a","b","updateDetailChart","rangeData","fetchData","values","node","intevalforshow","rangeTree","allData","newData","thePoint","updateChart","deviceDatas","devicesInfo","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allLines","allXLabels","label","yRange","showY2axis","counter","toString","substr","originalData","yaxis","f","Function","realLine","odata","ex","childrenRangeConfig","y2label","newLines","line","axisLabelFormatter","d","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","deviceConfig","yRanges","row","yrange","rangeSeriesNumber","rangeBarLabels","series_range","l0","open","lastIndexOf","timer","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","legend","pieData","update","fgpDockerButton","show_dom","buttons","action","button","method","language","func","script","successCallback","errorCallback","fgpWidgetRepeatContainer","$stateParams","labelstyle","page","datasource","split","fgpImage","fgpIcon","icon","content","desc","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","columns","column","formatter","record","cleanData","service","directive","input"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,$,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\n$ = 'default' in $ ? $['default'] : $;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n\n\n    var graphBindingArray = [];\n\n    $scope.$on('bindChildChartEvent', function (evt, msg) {\n        graphBindingArray.push(msg);\n    });\n\n    $scope.$on('bindChildRepeatEvent', function (evt, msg) {\n        angular$1.forEach($scope.configuration, function (item) {\n            if (item.id == msg.id) {\n                var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                angular$1.forEach(items, function (item_new) {\n                    $scope.showdata[item_new.id] = item;\n                    findChild4Repeat(item.id, angular$1.element(item_new), $scope.configuration);\n                });\n            }\n        });\n    });\n\n\n    $scope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n        angular$1.forEach($scope.showdata, function (metadata, key) {\n            if (key == msg.id) {\n                msg.callback({data: metadata, from: 'show'});\n                return;\n            }\n        });\n    });\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    angular$1.forEach($scope.configuration, function (item) {\n        if ('workingArea' === item.parent) {\n            var currentItem = angular$1.element(item.html_render);\n            $scope.showdata[item.id] = item;\n            $element.append($compile(currentItem)($scope));\n            findChild(item.id, currentItem, $scope.configuration);\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n        $interval(function () {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    $scope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n        }, 30000);\n    }\n\n\n    // all item created;\n    $timeout(function () {\n        angular$1.forEach(graphBindingArray, function (graph) {\n            $scope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n        });\n    });\n};\n\n\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/parameter/jsonp?name=' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices/parameter/jsonp?key=' + deviceKey;\n    }\n\n    $.ajaxSettings.async = false;\n    $.ajax({\n        type: 'GET',\n        url: url,\n        jsonpCallback: 'jsonCallback',\n        contentType: \"application/json\",\n        dataType: 'jsonp',\n        success: function (data) {\n            var url = host + \"/api/\";\n            if (applicationName) {\n                url += \"app/\" + applicationName + \"/devices/extension-types/jsonp?device_type=\";\n            } else {\n                url += \"devices/extension-types/jsonp?device_type=\";\n            }\n            $.ajaxSettings.async = false;\n            $.ajax({\n                type: 'GET',\n                url: url + data.type,\n                jsonpCallback: 'jsonCallback',\n                contentType: \"application/json\",\n                dataType: 'jsonp',\n                success: function (types) {\n                    angular$1.forEach(types, function (type) {\n                        Object.defineProperty(data, type.name, {\n                            get: function () {\n                                var result = null;\n                                var url = host + \"/api/\";\n                                if (applicationName) {\n                                    url += \"app/\" + applicationName + \"/devices/extensions/jsonp?device_name=\";\n                                } else {\n                                    url += \"devices/extensions/jsonp?device_name=\";\n                                }\n                                $.ajaxSettings.async = false;\n                                $.ajax({\n                                    type: 'GET',\n                                    url: url + this.name + '&extension_type=' + type.name,\n                                    jsonpCallback: 'jsonCallback',\n                                    contentType: \"application/json\",\n                                    dataType: 'jsonp',\n                                    success: function (field) {\n                                        result = field;\n                                    },\n                                    error: function (e) {\n                                        deferred.reject(e);\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                    });\n                },\n                error: function (e) {\n                    console.log(e.message);\n                }\n            });\n\n            deferred.resolve(data);\n        },\n        error: function (e) {\n            deferred.reject(e);\n        }\n    });\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels) {\n    var deferred = this._$q.defer();\n    this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {'otherLevels': otherLevels, 'callback': 'JSON_CALLBACK'}, cache: this.deviceStores\n    }).then(\n        function (response) {\n            deferred.resolve(response.data);\n        },\n        function (response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels) {\n    var deferred = this._$q.defer();\n    this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            'callback': 'JSON_CALLBACK'\n        },\n        cache: this.deviceStores\n    }).then(\n        function (response) {\n            deferred.resolve(response.data);\n        },\n        function (response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function (value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value.array;\n                tree['size'] = value.size;\n\n                var flag = false;\n                angular$1.forEach(showData, function (data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.size;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function (value, key) {\n            if (key == tree.id) {\n                tree.data = value.array;\n                tree['size'] = value.size;\n\n                var flag = false;\n                angular$1.forEach(showData, function (data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.size;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end)\n            ||\n            ((start > tree.start) && start <= tree.end)\n            ||\n            ((tree.start >= start) && tree.start < end)\n            ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function (elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (host, application, deviceInfo, storeSchema, store, start, end) {\n\n    var bucketsData = [];\n    var devicesNullBucket = [];\n    var calTree = this.calTree;\n    var fillChildrenTree = this.fillChildrenTree;\n    angular$1.forEach(deviceInfo, function (device, index) {\n        var bucketKeys = [];\n        calTree(bucketKeys, device.tree, start, end);\n        var nullBucket = [];\n        // get null buckets\n        angular$1.forEach(bucketKeys, function (bucket) {\n            if (bucket.data == null) {\n                nullBucket.push(bucket.id);\n            }\n        });\n        if (nullBucket.length != 0) {\n            devicesNullBucket.push({device: device.name, nullBucket: nullBucket});\n        }\n        bucketsData.push({device: device.name, data: bucketKeys});\n    });\n\n    if (devicesNullBucket.length == 0) {\n        // get data from rest service\n        var deferred = this._$q.defer();\n        deferred.resolve(bucketsData);\n        return deferred.promise;\n    } else {\n        // get data from rest service\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/devices/store/data/jsonp/' + storeSchema + '/' + store, {\n            params: {\n                deviceBucketKeys: JSON.stringify(devicesNullBucket),\n                callback: 'JSON_CALLBACK'\n            }\n        }).then(\n            function (response) {\n                // response.data\n                angular$1.forEach(response.data, function (deviceData) {\n\n                    var currentBucketShowData = null;\n                    angular$1.forEach(bucketsData, function (showData) {\n                        if (showData.device == deviceData.device) {\n                            currentBucketShowData = showData.data; //  bucketKeys\n                            angular$1.forEach(deviceInfo, function (device, index) {\n                                if (deviceData.device == device.name) {\n                                    fillChildrenTree(deviceData.data, device.tree, currentBucketShowData);\n                                }\n                            });\n                        }\n                    });\n\n                });\n                // fill bucketKeys\n                deferred.resolve(bucketsData);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (host, application, deviceKey, storeSchema, store, tree, start, end) {\n    var fillTree = this.fillTree;\n    var calTree = this.calTree;\n    var bucketKeys = [];\n    calTree(bucketKeys, tree, start, end);\n    var nullBucket = [];\n    // get null buckets\n    angular$1.forEach(bucketKeys, function (bucket) {\n        if (bucket.data == null) {\n            nullBucket.push(bucket.id);\n        }\n    });\n\n    if (nullBucket.length == 0) {\n        // send rest request\n        var deferred = this._$q.defer();\n        deferred.resolve(bucketKeys);\n        return deferred.promise;\n    } else {\n        // send rest request\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/store/data/jsonp/' + deviceKey + '/' + storeSchema + '/' + store, {\n            params: {\n                bucketKeys: nullBucket,\n                callback: 'JSON_CALLBACK'\n            }\n        }).then(\n            function (response) {\n                fillTree(response.data, tree, bucketKeys);\n                // fill bucketKeys\n                deferred.resolve(bucketKeys);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                    return (lor +=\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                    && (lor.length == 6) ? lor : co(lor);\n                })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        return '<div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips\" href=\"javascript:;\" style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><div class=\"relationBtn\">R</div><span>Scatter View</span></a><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\">fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? \\'#009900;\\' : \\'\\'}}\">{{item.name}}</span></label></div></div></div><div class=\"line-chart-graph\" style=\"width: 100%;height: 100%;\"></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;\"><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;\"></div></div></div></div></div>';\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    scope.status = true;\n    var timeOut = this.$timeout;\n    this.$timeout(function () {\n        var getData = function (numSeries, numRows, name) {\n            var result = {labels: null, data: null};\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n                initDate = new Date(initDate.getTime() + 900000);\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function (range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n        var zoomTimer = null;\n        var scroll = function (e, g, context) {\n\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            if (zoomTimer) {\n                timeOut.cancel(zoomTimer);\n            }\n            var normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n\n            Dygraph.cancelEvent(e);\n            timeOut(function () {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function (e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function (e, g, context) {\n            if (context.isPanning) {\n                if (event.offsetX <= (g.plotter_.area.x)) {\n                    movePan(event, g, context, 'r');\n                } else if (event.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(event, g, context, 'l');\n                } else {\n                    movePan(event, g, context, 'h');\n                }\n                timeOut(function () {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function (e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseup': mouseupHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            labelsKMB: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            highlightCircleSize: 2,\n            strokeWidth: 1,\n            highlightSeriesOpts: {\n                strokeWidth: 2,\n                strokeBorderWidth: 1,\n                highlightCircleSize: 2\n            },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth : 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function (y) {\n                        return moment(y).format('LLLL'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function (e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function (g, isInit) {\n                timeOut(function () {\n                    if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                        scope.refersh(g);\n                    }\n                });\n            },\n            'interactionModel': interactionModel\n        };\n\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                        xAxisHeight: 0,\n                        axes: {\n                            x: {\n                                drawAxis: false\n                            }\n                        },\n                        showRangeSelector: true,\n                        rangeSelectorHeight: 30\n                    }\n                );\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function (event) {\n                status = false;\n                timeOut(function () {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {begin: finalDateRagne[0], end: finalDateRagne[1]};\n                });\n            });\n\n            scope.$on('mouseUpMessage', function ($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function () {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {begin: finalDateRange[0], end: finalDateRange[1]};\n                    });\n                }\n            });\n\n            scope.$on('bindFatherGraphEvent', function (event, data) {\n                angular$1.forEach(data.children, function (child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function (g, isInit) {\n                                timeOut(function () {\n                                    scope.refersh(g);\n                                });\n                            }\n                        });\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function (event) {\n                if (status) {\n                    timeOut(function () {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function (event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {'graphs': [scope.currentChart], children: basicInfo.childrenChart};\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {device: []};\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function () {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function (item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({file: fixed});\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({file: noneFixed});\n            }\n\n        };\n        $scope.fixGraphWithGap_click = function () {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function (item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({file: fixed});\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({file: noneFixed});\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n\n\n            $scope.$watch('currentView', function (nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    if (nObj == -1) {\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function (level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                                initChart(data);\n                            }, function (error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular$1.forEach(metadata.data.groups[2].collections, function (level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                // show children view\n                                dataService.childrenDeviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, rangeLevel, otherLevels).then(function (data) {\n                                    // get all device trees\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                    } else {\n                                        return;\n                                    }\n\n                                }, function (error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n\n\n            // first time of showing chart\n            $scope.$watch('currentChart', function (newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function (level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                        initChart(data);\n                    }, function (error) {\n                        console.error(error);\n                    });\n                }\n            });\n\n\n            $scope.$watch(\"chartDateTime\", function (newValue, oldValue) {\n                if (newValue.begin != oldValue.begin || newValue.end != oldValue.end) {\n                    var expect_points = Math.floor($element.parent().width() / 2);\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    var conf = $scope.intevals.device;\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                    }\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function (config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n                    $scope.loadingShow = true;\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        if (expectedInterval == conf[0].interval) {\n                            // set valueRange;\n                            // re cal max and min\n                            // $scope.childrenRangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                            $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n                            // if ($scope.rangeSelectorBar) {\n                            // $scope.rangeSelectorBar.updateOptions({series: $scope.childRangeSeries});\n                            // }\n                            $scope.loadingShow = false;\n                        } else {\n                            var deviceInfo = [];\n                            var currentStore = \"\";\n                            // has problem....\n                            angular$1.forEach($scope.childTrees, function (device) {\n                                angular$1.forEach(device.trees, function (tree, index) {\n                                    if (expectedInterval == tree.frequency && index != 0) {\n                                        currentStore = tree.store;\n                                        deviceInfo.push({name: device.name, tree: tree.tree});\n                                    }\n                                });\n                            });\n\n                            dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, newValue.begin, newValue.end).then(function (data) {\n                                var showData = [];\n                                angular$1.forEach(data, function (arr) {\n                                    var deviceData = [];\n                                    angular$1.forEach(arr.data, function (bucket) {\n                                        if (bucket.data != null) {\n                                            Array.prototype.push.apply(deviceData, bucket.data.slice(0, bucket.size));\n                                        }\n                                    });\n                                    showData.push({device: arr.device, data: deviceData});\n                                });\n                                //get configuration\n                                updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n\n                            }, function (data) {\n                                console.info(data);\n                            });\n                        }\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // if expected interval is the biggest, show range data\n                        if (expectedInterval == conf[0].interval) {\n                            if (!($scope.chartDateWindow[0] instanceof Date)) {\n                                $scope.chartDateWindow[0] = new Date($scope.chartDateWindow[0]);\n                            }\n\n                            if (!($scope.chartDateWindow[1] instanceof Date)) {\n                                $scope.chartDateWindow[1] = new Date($scope.chartDateWindow[1]);\n                            }\n                            $scope.rangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                            // set valueRange\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            if ($scope.rangeSelectorBar && $scope.rangeSeries) {\n                                $scope.rangeSelectorBar.updateOptions({series: $scope.rangeSeries});\n                            }\n                            // tell some other widgets, the graph is changed.\n                            $timeout(function () {\n                                $rootScope.$broadcast('chartDataChangeEvent', {\n                                    'id': element_id,\n                                    'group': 'device',\n                                    'data': {\n                                        'collection': conf[0].name,\n                                        'group': 'device',\n                                        'data': $scope.ordinalRangeData.filter(function (obj) {\n                                            return obj.timestamp >= $scope.rangeConfig[\"dateWindow\"][0].getTime() && obj.timestamp <= $scope.rangeConfig[\"dateWindow\"][1].getTime();\n                                        })\n                                    }\n                                });\n                            });\n\n                            $scope.loadingShow = false;\n                        } else {\n                            // cal tree\n                            angular$1.forEach($scope.trees, function (tree, index) {\n                                if (expectedInterval == tree.frequency && index != 0) {\n                                    // send request\n                                    dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, newValue.begin, newValue.end).then(function (data) {\n                                        // udpate chart\n                                        var showData = [];\n                                        angular$1.forEach(data, function (arr) {\n                                            Array.prototype.push.apply(showData, arr.data.slice(0, arr.size));\n                                        });\n                                        showData = showData.filter(function (obj) {\n                                            return obj != null;\n                                        });\n                                        showData.sort(function (a, b) {\n                                            return a.timestamp > b.timestamp ? 1 : -1;\n                                        });\n                                        //get configuration\n                                        updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                        // tell some other widgets, the graph is changed.\n                                        $timeout(function () {\n                                            $rootScope.$broadcast('chartDataChangeEvent', {\n                                                'id': element_id,\n                                                'group': 'device',\n                                                'data': {\n                                                    'collection': tree.store,\n                                                    'group': 'device',\n                                                    'data': showData\n                                                }\n                                            });\n                                        });\n\n                                    }, function (data) {\n                                        console.info(data);\n                                    });\n                                }\n                            });\n                        }\n                        $scope.fixGraphWithGap();\n                    }\n                    $scope.status = false;\n                }\n            });\n\n\n        });\n\n\n        var fetchData = function (values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n            }\n\n        };\n\n\n        $scope.trees = [];\n\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function (data) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function (tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            fetchData(allData, rangeTree.tree);\n            allData = allData.filter(function (obj) {\n                return obj != null;\n            });\n            allData.sort(function (a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({timestamp: timestamp - currentInterval});\n                Array.prototype.push.apply(newData, allData);\n                newData.push({timestamp: timestamp + currentInterval});\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // get configuration and make real data\n            updateChart(metadata, store, allData);\n        };\n\n        var initChildrenChart = function (deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            angular$1.forEach(deviceDatas, function (deviceData) {\n                var device = deviceData.device;\n                var trees = deviceData.trees;\n                $scope.childTrees.push({name: device.name, trees: trees});\n                var rangeTree = null;\n                angular$1.forEach(trees, function (tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function (interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [];\n                    fetchData(allData, rangeTree.tree);\n                    allData = allData.filter(function (obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function (a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n\n            });\n\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n\n        var updateChildrenChart = function (metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function (device, key) {\n                angular$1.forEach(device.data, function (item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function (label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n\n\n                });\n            });\n            // order\n            allXLabels.sort(function (a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function (label) {\n                allLines.push([label]);\n            });\n\n\n            var yRange = {min: null, max: null};\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function (device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function (collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {'axis': 'y1'};\n                        } else {\n                            series[collection.rows[0].label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n                        labels.push(key);\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function (realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function (odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            //update chart\n\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'labelsKMB': true,\n                        'file': allLines,\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80},\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function (line) {\n                        line.push(NaN);\n                    });\n                    series[\"span_y2\"] = {'axis': 'y2'};\n                    $scope.childrenRangeConfig = {\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {valueRange: [yRange.min, yRange.max]},\n                            'y2': {\n                                axisLabelFormatter: function (d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n                $scope.loadingShow = false;\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function (metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n            var yRange = {min: null, max: null};\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function (device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function (collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {'axis': 'y1'};\n                            } else {\n                                series[collection.rows[0].label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \")return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function (data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({timestamp: dateTime, value: value});\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({timestamp: dateTime, value: null});\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function (item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({device: device.device, data: tempData});\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function (nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function (line) {\n                angular$1.forEach(chartData, function (timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(NaN);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n\n                    if (showY2axis) {\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80}\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function (line) {\n                            line.push(NaN);\n                        });\n                        series[\"span_y2\"] = {axis: 'y2'};\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': newLines,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80},\n                                \"y2\": {\n                                    axisLabelFormatter: function (d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n\n\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function (metadata, store, rangeData, allData) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{min: null, max: null}, {min: null, max: null}];\n            angular$1.forEach(collections, function (collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function (line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function (row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {'axis': 'y1'};\n                        } else {\n                            series[row.label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \")return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function (realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function (yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n\n                    if (allLines.length == 0) {\n                        $scope.currentChart.updateOptions({\n                            'file': []\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n\n                            if (showY2axis) {\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            } else {\n\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n\n                                series[\"span-Y2\"] = {axis: 'y2'};\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                        'y2': {\n                                            axisLabelFormatter: function (d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n\n                            }\n\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function (metadata, store, allData) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{min: null, max: null}, {min: null, max: null}];\n            angular$1.forEach(collections, function (collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function (line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function (row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {'axis': 'y1'};\n                        } else {\n                            series[row.label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function (realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {'l0': {axis: 'y1'}};\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {axis: 'y1'},\n                                    'l0': {axis: 'y2'}\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {axis: 'y2'};\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range\n                                });\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function (yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {axis: 'y2'};\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function (line) {\n                                line.push(NaN);\n                            });\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        axisLabelFormatter: function (d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                        $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n\n        $scope.chartDateTime = {begin: null, end: null};\n\n        // function for show one\n        $scope.showOne = function (deviceName) {\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n        var timer = null;\n        $scope.refersh = function (g) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function () {\n                $scope.chartDateTime = {begin: g.xAxisRange()[0], end: g.xAxisRange()[1]};\n                $scope.chartDateWindow = g.xAxisRange();\n            }, 600);\n        };\n\n\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph.$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var deviceKey = attrs.deviceKey;\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-success btn-xs\" ' +\n        ' ng-click=\"action(button,\\'' + deviceKey + '\\')\" ng-repeat=\"button in buttons\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n            }\n        }\n    });\n    // how many buttons?\n    $scope.buttons = [];\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    // submit \"action\" to rest api\n    $scope.action = function (button, deviceKey) {\n        // send request through $http\n        $http({\n            method: 'POST',\n            url: '/api/docker/hosts/action',\n            data: {\n                language: button.language,\n                func: button.func,\n                script: button.script,\n                deviceName: '',\n                key: deviceKey\n            }\n        }).then(function successCallback(response) {\n            console.info(response.data);\n        }, function errorCallback(response) {\n            console.error(response.data);\n        });\n\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}} : {{item.name}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\">' +\n        '<div style=\"float:left;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item[label]}}</span>' +\n        '</div>'+\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\",\"primary\",\"success\",\"info\",\"warning\",\"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.labels =[];\n\n    var page = $stateParams.type;\n    var applicationName = $stateParams.applicationName;\n    var device = $stateParams.device;\n\n\n    if (metadata.data) {\n        $scope.labels = metadata.data.datasource.labels.split(\" \");\n        // run script\n        $http({\n            method: 'GET',\n            url: '/api/docker/platformnodes/' + page + '/' + device\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n        // I'm ready. please give all my children to me~\n        $timeout(function () {\n            // call stage\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n\n\n    }\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap']).service('dataService', dataAccessApi.buildFactory).directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory).filter('tableformatter', ['$filter', function ($filter) {\n    return function (input, obj, field, formatter) {\n        if (formatter) {\n            if (obj[field]) {\n                if (\"date\" == formatter) {\n                    return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                } else {\n                    return input;\n                }\n            }\n        } else {\n            return input;\n        }\n    };\n}]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"]}