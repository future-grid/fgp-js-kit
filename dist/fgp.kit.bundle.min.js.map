{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","standalone","interactions","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","findChild4Repeat","parentId","parentHtmlObj","arrayItems","newId","newScope","i","parent","currentItem","element","html_render","id","attr","repeat","find","append","findChild","$watch","newVal","oldVal","empty","$destroy","$new","$on","evt","msg","push","forEach","item","items","children","item_new","currentElement","groupItems","dulpItem","param","config","callback","metadata","data","datasource","style","key","from","sendDeviceData","graph","$broadcast","graphs","deviceInfo","then","device","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","graphDataService","_$http","_$q","indexCache","deviceStores","_$interval","_$graphDataService","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","contentType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","fields","params","concat","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","isSame","childrenExtensionInitInfo","extensionType","fillChildrenTree","buckets","tree","showData","value","flag","info","fillTree","size","calTree","start","end","filter","elem","devicesStoreData","store","interval","start_point","Date","getTime","devices","index","$graphDataService","method","JSON","stringify","deviceGraphData","newComeResult","end_point","deviceStoreData","needLoad","timestamp","sort","a","b","put","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","autoUpdateGraph","schema","count","fetcher","last","trees","frequency","timeKey","graphData","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","$stateParams","_dataService","dom_loading","dom_legend","dom_empty_data","dom_alert_info","dom_datetime_interval","dom_series_list","dom_real_time_grap","html","link","status","timeOut","completionPercent","graphId","getData","numSeries","numRows","labels","initDate","j","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","canScroll","timer","mouseOverHandler","cancel","mouseEnterHandler","mouseOutHandler","scroll","normal","WheelEvent","detail","deltaY","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","wheel","mousedown","mousemove","mouseenter","mouseup","mouseout","drawGapEdgePoints","pointSize","legend","labelsKMB","labelsSeparateLines","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","timer_auto","process_bar_timer","on","tempConifg","realTimeGraph","currentChartOptions","file","auto_device_name","auto_schema","auto_store","auto_fields","graph_data","worker","deviceConfig","auto_metadata","groups","collections","allLines","yRanges","collection","line","showY2axis","rows","row","label","yaxis","f","Function","counter","realLine","ex","yrange","newLines","copy","perInterval","showRealTimeGraph","modal","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","finalDateRagne","chartDateTime","begin","finalDateRange","view","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","alertMessage","showY2Btns","legendText","legendText_device","legendText_datetime","legendText_column","legendText_value","legendColor","autoupdate","defaultTimeIntervals","scales","dateTimeIntervals","locked_interval","lock","currentIntervalName","currentIntervalChoosed","_item","changeInterval","basic","checked","rangeConfig","loadingShow","intevals","height","begin_path","end_path","init_flag","fixInterval","noneFixed","fixGraphWithGap","currentInterval","fixed","tempDate","obj","labels_","file_","showOrHideDevice","childrenDevices","setVisibility","fixGraphWithGap_click","parent_container","data_from","checkY2Btns","deviceData","nObj","oObj","button_handlers","level","patt","RegExp","lines","columns","match","column","startsWith","initChart","relation","relation_group","initChildrenChart","buttons","scatter","button","buttons_html","_func","toString","slice","$index","substr","dataFilter","highlighting","String","setSelection","Array","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","limits","series_range","l0","rangeBarLabels","objNeed2Add","dataLength","tempObj","rangeSeries","points","connected","connectSeparatedPoints","currentStore","childTrees","arr","updateChildrenDetailChart","rangeChildrenData","updateDetailChart","rangeData","group","fetchData","values","node","array","apply","ordinalRangeData","intevalforshow","rangeTree","allData","first","newData","thePoint","endOf","toDate","updateChart","deviceDatas","devicesInfo","_index","merge","extension","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allXLabels","yRange","originalData","odata","childrenRangeConfig","highlightCircleSize","strokeWidth","strokeBorderWidth","highlightSeriesOpts","y2label","highlightCallback","pts","seriesName","maxWidth","offsetWidth","sn","point_show","user_attrs_","tz","guess","xval","yval","point","canvasy","canvasx","legendbox","$apply","legendTop","legendLeft","unhighlightCallback","axisLabelFormatter","d","Number","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","autoUpdateChart","rangeSeriesNumber","open","lastIndexOf","btntimer","btnZoomInVLeft","btnZoomOutVLeft","btnZoomInVRight","btnZoomOutVRight","btnPanVULeft","btnPanVDLeft","btnPanVURight","btnPanVDRight","btnpanleft","panRange","pan_delta","startDate","endDate","btnpanright","btnzoomin","rangeStart","rangeEnd","btnzoomout","init","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","shown","split","healthinfo","action","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$websocket","labelstyle","listStyle","deviceType","dataStream","port","onMessage","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","splice","itemIndex","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","formatter","record","cleanData","service","input","substring","setTree","localStorage","getTree","addTree","clear","directive","$last","CacheFactoryProvider","extend","defaults","maxAge","deleteOnExpire","CacheFactory","graphCache"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,$,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\n$ = 'default' in $ ? $['default'] : $;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\",\n        standalone: \"=\",\n        interactions: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n    $rootScope['standalone'] = $scope.standalone;\n\n\n    var graphBindingArray = [];\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                newScope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    newScope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n            else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    var newScope = null;\n    $scope.$watch('deviceName', function (newVal, oldVal) {\n        if(newVal){\n            $element.empty();\n            if(newScope){\n                newScope.$destroy();\n            }\n            newScope = $rootScope.$new(true);\n            newScope[\"showdata\"] = {};\n\n            newScope.$on('bindChildChartEvent', function (evt, msg) {\n                graphBindingArray.push(msg);\n            });\n\n            newScope[\"interactions\"] = $scope.interactions;\n\n            newScope.$on('bindChildRepeatEvent', function (evt, msg) {\n                angular$1.forEach($scope.configuration, function (item) {\n                    if (item.id == msg.id) {\n                        var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                        angular$1.forEach(items, function (item_new) {\n                            newScope.showdata[item_new.id] = item;\n                            var currentElement = angular$1.element(item_new);\n                            if (currentElement.attr(\"dulp\")) {\n                                var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                                angular$1.forEach(groupItems, function (dulpItem) {\n                                    findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id,newScope);\n                                });\n                            }else{\n                                findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id,newScope);\n                            }\n                        });\n                    }\n                });\n            });\n\n            newScope.$on('listStyleEvent', function (evt, param) {\n                var config = newScope.showdata[param.id.replace(\"edit\", \"\")];\n                param.callback(config.metadata.data.datasource.style);\n            });\n\n\n            newScope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n                angular$1.forEach(newScope.showdata, function (metadata, key) {\n                    if (key == msg.id) {\n                        msg.callback({data: metadata, from: 'show'});\n                        return;\n                    }\n                });\n            });\n\n            // refersh\n            angular$1.forEach($scope.configuration, function (item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    newScope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)(newScope));\n                    findChild(item.id, currentItem, $scope.configuration,newScope);\n                }\n            });\n            /**\n             * get device information\n             */\n            if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n                // first time\n                sendDeviceData(newScope);\n            }\n            // all item created;\n            $timeout(function () {\n                angular$1.forEach(graphBindingArray, function (graph) {\n                    newScope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n                });\n            });\n        }\n    });\n\n\n    var sendDeviceData = function (newScope) {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    newScope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n    };\n};\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n    this._$interval = $interval;\n    this._$graphDataService = graphDataService;\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/rest/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices?key=' + deviceKey;\n    }\n\n    $.ajaxSettings.async = false;\n    $.ajax({\n        type: 'GET',\n        url: url,\n        contentType: \"application/json\",\n        success: function(data) {\n            var url = host + \"/rest/api/\";\n            if (applicationName) {\n                url += \"app/\" + applicationName + \"/devices/extension-types?device_type=\";\n            } else {\n                url += \"devices/extension-types?device_type=\";\n            }\n            $.ajaxSettings.async = false;\n            $.ajax({\n                type: 'GET',\n                url: url + data.type,\n                contentType: \"application/json\",\n                success: function(types) {\n                    angular$1.forEach(types, function(type) {\n                        Object.defineProperty(data, type.name, {\n                            get: function() {\n                                var result = null;\n                                var url = host + \"/rest/api/\";\n                                if (applicationName) {\n                                    url += \"app/\" + applicationName + \"/devices/extensions?device_name=\";\n                                } else {\n                                    url += \"devices/extensions?device_name=\";\n                                }\n                                $.ajaxSettings.async = false;\n                                $.ajax({\n                                    type: 'GET',\n                                    url: url + this.name + '&extension_type=' + type.name,\n                                    contentType: \"application/json\",\n                                    success: function(field) {\n                                        result = field;\n                                    },\n                                    error: function(e) {\n                                        deferred.reject(e);\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                    });\n                },\n                error: function(e) {\n                    console.log(e.message);\n                }\n            });\n\n            deferred.resolve(data);\n        },\n        error: function(e) {\n            deferred.reject(e);\n        }\n    });\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            'otherLevels': otherLevels,\n            'fields': [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenExtensionInitInfo = function childrenExtensionInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, extensionType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value;\n                tree['size'] = value.length;\n\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.length;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id) {\n                tree.data = value;\n                tree['size'] = value.size;\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        data['size'] = tree.size;\n                        flag = true;\n                    }\n                });\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end) ||\n            ((start > tree.start) && start <= tree.end) ||\n            ((tree.start >= start) && tree.start < end) ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function(elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (id, host, application, deviceInfo, storeSchema, store, start, end, fields, interval) {\n    var start_point = new Date().getTime();\n    if (!deviceInfo || deviceInfo.length == 0) {\n        return false;\n    }\n\n    var devices = \"[\";\n\n    deviceInfo.forEach(function(device, index) {\n        if (index < deviceInfo.length - 1) {\n            devices += \"\\\"\" + device.name + \"\\\",\";\n        } else {\n            devices += \"\\\"\" + device.name + \"\\\"]\";\n        }\n    });\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end // TODO: change it to post\n    this._$http({\n        method: 'POST',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store,\n        data: {\n            \"devices\": devices,\n            \"fields\": JSON.stringify(fields),\n            \"start\": start,\n            \"end\": end\n        }\n    }).then(\n        function(response) {\n            var result = {};\n            var data = response.data;\n            for (key in data) {\n                var deviceGraphData = $graphDataService.get(key + \"/\" + store + \"/\" + id) ? $graphDataService.get(key + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = data[key].data;\n                // TODO: make all the lines in same x-axis timeseries\n                result[key] = newComeResult;\n            }\n            var end_point = new Date().getTime();\n            console.info((end_point - start_point) / 1000 + \"s\");\n            deferred.resolve(result);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (id, host, application, deviceKey, storeSchema, store, tree, start, end, fields, interval) {\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    var needLoad = true;\n    // if ($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id)) {\n    // //check data\n    // var data = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id);\n    // if (data) {\n    //     //\n    //     var temp_start = null;\n    //     var temp_end = null;\n    //     data.forEach(function(_item){\n    //         if(_item.timestamp >= end && temp_end == null){\n    //             temp_end = _item.timestamp;\n    //         }\n    //         if(_item.timestamp <= start){\n    //             temp_start =  _item.timestamp;\n    //         }\n    //\n    //     });\n    //     var checkLoad = false;\n    //     while (temp_start < temp_end) {\n    //         var _flag = false;\n    //         data.forEach(function(item) {\n    //             if (item.timestamp == temp_start) {\n    //                 _flag = true;\n    //             }\n    //         });\n    //         if (!_flag) {\n    //             // doesn`t exist\n    //             checkLoad = true;\n    //             break;\n    //         }\n    //         temp_start += interval;\n    //         console.info(temp_start);\n    //     }\n    //     if (!checkLoad) {\n    //         needLoad = false;\n    //     }\n    // }\n    // // }\n\n    if (!needLoad) {\n        // return data\n        deferred.resolve($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id));\n    } else {\n        // send request to back-end\n        this._$http({\n            method: 'GET',\n            url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=[\"' + deviceKey + '\"]&fields=' + JSON.stringify(fields) + '&start=' + start + '&end=' + end\n        }).then(\n            function(response) {\n                // only return 1 device data\n                var deviceGraphData = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) ? $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = response.data[deviceKey].data;\n                newComeResult.forEach(function(item) {\n                    var flag = false;\n                    for (var i = 0; i < deviceGraphData.length; i++) {\n                        if (deviceGraphData[i].timestamp == item.timestamp) {\n                            deviceGraphData[i] = item;\n                            flag = true;\n                        }\n                    }\n                    if (!flag) {\n                        // add\n                        deviceGraphData.push(item);\n                    }\n                });\n                // order by timestamp\n                deviceGraphData.sort(function(a, b) {\n                    if (a.timestamp > b.timestamp) {\n                        return 1;\n                    } else if (a.timestamp < b.timestamp) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                $graphDataService.put(deviceKey + \"/\" + store + \"/\" + id, deviceGraphData);\n                deferred.resolve(deviceGraphData);\n            },\n            function(response) {\n                deferred.reject(response.data);\n            }\n        );\n    }\n\n    return deferred.promise;\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) &&\n                    (lor.length == 6) ? lor : co(lor);\n            })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/rest/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function(response) {\n            console.info(response);\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.prototype.autoUpdateGraph = function autoUpdateGraph (application, device, schema, store, fields, count, callback) {\n    var _$interval = this._$interval;\n    var _$http = this._$http;\n    var fetcher = null;\n    this._$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n        .success(function(response) {\n            var last = -1;\n            var interval = -1;\n            if (response.trees && response.trees.length === 1) {\n                interval = response.trees[0].frequency;\n                last = response.trees[0].last.timeKey;\n            }\n            if (interval != -1) {\n                var start = last - (count * interval);\n                var end = last;\n                // first time\n                _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                    params: {\n                        \"devices\": JSON.stringify([device]),\n                        \"fields\": JSON.stringify(fields),\n                        \"start\": start,\n                        \"end\": end\n                    }\n                }).success(function(graphData) {\n\n                    // start task\n                    fetcher = _$interval(function() {\n                        _$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n                            .success(function(response) {\n                                if (response.trees && response.trees.length === 1) {\n                                    last = response.trees[0].last.timeKey;\n                                    start = last - (count * interval);\n                                    end = last;\n                                    _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                                        params: {\n                                            \"devices\": JSON.stringify([device]),\n                                            \"fields\": JSON.stringify(fields),\n                                            \"start\": start,\n                                            \"end\": end\n                                        }\n                                    }).success(function(graphData) {\n                                        // put the data back\n                                        callback(graphData[device], null, interval);\n                                    });\n                                }\n                            });\n                    }, interval);\n\n                    // put the data back\n                    callback(graphData[device], fetcher, interval);\n                });\n            }\n        });\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory, $interval, graphDataService) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory', '$interval', 'graphDataService'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\"\n    };\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:2px;margin-bottom:2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile) {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\"\n    };\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n    this._$interval = $interval;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_legend = '<li>{{legendText_device}}</li><li>{{legendText_datetime}}</li><li><label style=\"color: {{legendColor}}\">{{legendText_column}}</label>:{{legendText_value}}</li>';\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        var dom_alert_info = '<span class=\"label label-warning\" ng-show=\"alertMessage\" style=\"color: #000;\">{{alertMessage}}</span>';\n\n        var dom_datetime_interval = '<div ng-show=\"rangeSelectorBar\" class=\"dropdown\"> <button class=\"btn btn-info dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">{{currentIntervalChoosed.name}}<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"interval in dateTimeIntervals\"><a href=\"javascript:;\" ng-click=\"changeInterval(interval)\">{{interval.name}}</a></li></ul> </div>';\n\n\n        var dom_series_list = '<div ng-show=\"currentView === 1\" class=\"dropdown\"> <button class=\"btn btn-warning dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">Devices<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;height:auto;max-height:300px;overflow-x:hidden;\"><li ng-repeat=\"device in childrenDevices\"><input type=\"checkbox\" ng-click=\"showOrHideDevice(device)\" ng-checked=\"device.show\"/>{{device.name}}</li></ul> </div>';\n\n\n        var dom_real_time_grap = '<div class=\"modal fade \" id=\"real_time_graph_' + attrs.id + '\" role=\"dialog\">' +\n            '<div class=\"modal-dialog modal-lg\">' +\n            '<div class=\"modal-content\">' +\n            '<div class=\"col-md-12\"  style=\"padding-top:3px;height: 1px;background-color: #0e90d2;\" ng-style=\"{ \\'width\\': completionPercent + \\'%\\' }\"></div>' +\n            '<div class=\"modal-body\" style=\"width: 100%;height: 300px;\">' +\n            '<div class=\"real-time-graph\" style=\"width: 100%;height: 100%\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n\n        var html = '<div id=\"legendbox' + attrs.id + '\" ng-show=\"legendText\" ng-style=\"{top:legendTop,left:legendLeft}\" style=\"border-radius:10px;background-color:#ffffff;position: absolute;border: 1px solid {{legendColor}};-moz-box-shadow: 5px 5px 5px #888888;box-shadow: 5px 5px 5px #888888;z-index: 99999999;margin-right: 5px;\"><ul style=\"list-style: none;list-style-position: inside;text-align: right;\">' + dom_legend + '</ul></div><div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips btn btn-xs btn-info badge\" href=\"javascript:;\" ng-hide=\"interactions.graphs.btns.scatter == \\'hide\\'\"  style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><i class=\"glyphicon glyphicon-transfer\"></i><span>Scatter View</span></a><div id=\"buttons_area\" style=\"\"></div><a ng-show=\"autoupdate\" class=\"tooltips btn btn-xs btn-info badge\" style=\"float: right;margin-right: 10px;\" ng-click=\"showRealTimeGraph()\" data-toggle=\"modal\"><span>Auto Update</span><i class=\"glyphicon glyphicon-random\"></i></a><div style=\"float: right; margin-right: 10px;\">' + dom_series_list + '</div><div style=\"float: right; margin-right: 10px;\">' + dom_datetime_interval + '</div><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\"/>fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? (locked_interval.name == item.name ? \\'#e57432;\\':\\'#009900;\\') : (locked_interval.name == item.name ? \\'#e57432;\\':\\'\\') }}\" ng-click=\"lock(item)\">{{item.name}}</span></label></div><div style=\"float: right; margin-right: 10px;\">' + dom_alert_info + '</div></div></div><div style=\"position: relative;width: 100%;height:100%;\"><div style=\"position: absolute;left:25px;z-index: 999;\" ng-show=\"basicInfo.zoom\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVULeft()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDLeft()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVLeft()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVLeft()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div><div class=\"line-chart-graph\" style=\"width: 100%;height:100%;\"></div><div style=\"position: absolute;right:-15px;top:0px;z-index: 999;\" ng-show=\"checkY2Btns()\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVURight()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDRight()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVRight()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVRight()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" style=\"text-align: left;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;position: relative\"><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;left: 20px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanleft()\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanright()\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;width: 100%;position: absolute;\"></div><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;right: -5px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomin()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomout()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div></div></div>' + dom_real_time_grap;\n\n        return html;\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    var dataService = this._dataService;\n    var _$interval = this._$interval;\n    scope.status = true;\n    var timeOut = this.$timeout;\n    scope.completionPercent = 0;\n    scope.graphId = attrs.id;\n    this.$timeout(function() {\n        var getData = function(numSeries, numRows, name) {\n            var result = {\n                labels: null,\n                data: null\n            };\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n                initDate = new Date(initDate.getTime() + 900000);\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)\n                        ];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function(range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n\n        var canScroll = false;\n\n        var timer = null;\n        var mouseOverHandler = function(e, g, context) {\n            //\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n\n        var mouseEnterHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n        var mouseOutHandler = function(e, g, context) {\n            // set flag to false\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            canScroll = false;\n        };\n\n        var scroll = function(e, g, context) {\n\n            if ((scope.basicInfo && !scope.basicInfo.zoom) || !canScroll) {\n                return;\n            }\n\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function() {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function(e, g, context) {\n            if (context.isPanning) {\n                if (e.offsetX <= (g.plotter_.area.x)) {\n                    movePan(e, g, context, 'r');\n                } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(e, g, context, 'l');\n                } else {\n                    movePan(e, g, context, 'h');\n                }\n                timeOut(function() {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function(e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n\n            canScroll = true;\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'wheel': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseenter': mouseEnterHandler,\n            'mouseup': mouseupHandler,\n            // 'mouseover': mouseOverHandler,\n            'mouseout': mouseOutHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            legend: 'follow',\n            labelsKMB: true,\n            labelsSeparateLines: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            // highlightSeriesOpts: {\n            // strokeWidth: 2,\n            // strokeBorderWidth: 1,\n            // highlightCircleSize: 2\n            // },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function(y) {\n                        return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function(e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function(g, isInit) {\n                if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                    scope.refersh(g, isInit);\n                }\n            },\n            'interactionModel': interactionModel\n        };\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n        var timer_auto = null;\n        var process_bar_timer = null;\n        element.find(\"#real_time_graph_\" + attrs.id).on(\"hidden.bs.modal\", function() {\n            // put your default event here\n            _$interval.cancel(timer_auto);\n            _$interval.cancel(process_bar_timer);\n        });\n\n\n        //real-time-graph\n        element.find(\"#real_time_graph_\" + attrs.id).on('shown.bs.modal', function() {\n\n            var tempConifg = {\n                drawGapEdgePoints: true,\n                'pointSize': 3,\n                labelsKMB: true,\n                labelsSeparateLines: false,\n                drawPoints: false,\n                drawAxesAtZero: false,\n                labelsDivStyles: {\n                    'text-align': 'right',\n                    'position': 'relative',\n                    'display': 'inline-block'\n                },\n                // x label y label\n                ylabel: 'Value',\n                xlabel: 'Date',\n                colors: scope.defaultColors,\n                // multiple Y axis\n                series: {\n                    'Device0': {\n                        axis: 'y2'\n                    },\n                    'Device4': {\n                        axis: 'y2'\n                    }\n                },\n                // showRangeSelector: true,\n                axes: {\n                    y: {\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    y2: {\n                        // set axis-related properties here\n                        'labelsKMB': true,\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    x: {\n                        // datetime format\n                        valueFormatter: function(y) {\n                            return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                        }\n                    }\n                },\n                interactionModel: {}\n            };\n\n            scope.realTimeGraph = new Dygraph(element.find(\"div[class='real-time-graph']\")[0], sampleData.data, tempConifg);\n            scope.realTimeGraph.updateOptions(scope.currentChartOptions);\n            scope.realTimeGraph.updateOptions({\n                \"file\": []\n            });\n\n            timer_auto = dataService.autoUpdateGraph(scope.applicationName, scope.auto_device_name, scope.auto_schema, scope.auto_store, scope.auto_fields, element.find(\"div[class='real-time-graph']\").width() / 4, function(graph_data, worker, interval) {\n                // update graph\n                var deviceConfig = scope.auto_metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{\n                    min: null,\n                    max: null\n                }, {\n                    min: null,\n                    max: null\n                }];\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == scope.auto_store) {\n                        angular$1.forEach(graph_data.data, function(line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        var showY2axis = false;\n                        angular$1.forEach(collection.rows, function(row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[row.label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular$1.forEach(allLines, function(realLine) {\n                                try {\n                                    var value = f(graph_data.data[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.min) * 0.10;\n                            } else {\n                                yrange.min = yrange.min - (yrange.max - yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max - yrange.min) * 0.10;\n                            }\n                        });\n\n                        var newLines = [];\n                        if (!showY2axis) {\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: newLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        } else {\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: allLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                if (worker) {\n                    timer_auto = worker;\n                }\n\n\n                //\n                var perInterval = interval / 100;\n                var counter = 0;\n\n                if (process_bar_timer) {\n                    _$interval.cancel(process_bar_timer);\n                    counter = 0;\n                }\n\n                process_bar_timer = _$interval(function() {\n                    scope.completionPercent = counter;\n                    counter++;\n                }, perInterval, 100);\n\n\n            });\n        });\n\n\n        scope.currentChartOptions = {};\n\n        scope.showRealTimeGraph = function() {\n            element.find(\"#real_time_graph_\" + attrs.id).modal();\n        };\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                    xAxisHeight: 0,\n                    axes: {\n                        x: {\n                            drawAxis: false\n                        }\n                    },\n                    showRangeSelector: true,\n                    rangeSelectorHeight: 30\n                });\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function(event) {\n                status = false;\n                timeOut(function() {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {\n                        begin: finalDateRagne[0],\n                        end: finalDateRagne[1]\n                    };\n                });\n            });\n\n            scope.$on('mouseUpMessage', function($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function() {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {\n                            begin: finalDateRange[0],\n                            end: finalDateRange[1]\n                        };\n                    });\n                }\n            });\n\n            scope.$on('parentScatterViewChangedEvent', function(event, params) {\n                angular$1.forEach(params.children, function(item) {\n                    if (item == attrs.id) {\n                        scope.currentView = params.view;\n                    }\n                });\n            });\n\n\n            scope.$on('bindFatherGraphEvent', function(event, data) {\n                angular$1.forEach(data.children, function(child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function(g, isInit) {\n                                // console.info(\"refersh running!\" + \" is  Init?\"+ isInit);\n                                scope.refersh(g, isInit);\n                            }\n                        });\n\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function(event) {\n                if (status) {\n                    timeOut(function() {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function(event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {\n                    'graphs': [scope.currentChart],\n                    children: basicInfo.childrenChart\n                };\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope, $stateParams, graphDataService, $compile) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n    $scope.applicationName = $rootScope.applicationName;\n\n    $scope.alertMessage;\n\n    $scope.showY2Btns = false;\n\n    $scope.legendText = null;\n    $scope.legendText_device = null;\n    $scope.legendText_datetime = null;\n    $scope.legendText_column = null;\n    $scope.legendText_value = null;\n    $scope.legendColor = null;\n    $scope.autoupdate = false;\n    $scope.auto_device_name = \"\";\n    $scope.auto_schema = \"\";\n    $scope.auto_store = \"\";\n    $scope.auto_fields = [];\n    // default data-time intervals\n\n    $scope.defaultTimeIntervals = [{\n            name: \"10 seconds\",\n            interval: 10000\n        },\n        {\n            name: \"30 seconds\",\n            interval: 30000,\n            scales: [10000]\n        },\n        {\n            name: \"1 minutes\",\n            interval: 60000,\n            scales: [10000, 30000]\n        },\n        {\n            name: \"5 minutes\",\n            interval: 300000,\n            scales: [30000, 60000]\n        },\n        {\n            name: \"30 minutes\",\n            interval: 1800000,\n            scales: [60000, 300000]\n        }, {\n            name: \"1 hour\",\n            interval: 3600000,\n            scales: [60000, 300000, 1800000]\n        }, {\n            name: \"1 day\",\n            interval: 86400000,\n            scales: [300000, 1800000, 3600000]\n        }, {\n            name: \"1 week\",\n            interval: 604800017,\n            scales: [3600000, 86400000]\n        }, {\n            name: \"1 month\",\n            interval: 2629800000,\n            scales: [86400000, 604800017]\n        }, {\n            name: \"1 year\",\n            interval: 31557600000,\n            scales: [2629800000]\n        }\n    ];\n\n    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n\n    $scope.locked_interval = null;\n    // lock interval\n    $scope.lock = function(interval) {\n        if ($scope.locked_interval) {\n            if ($scope.locked_interval == interval) {\n                $scope.locked_interval = null; // unlocked\n                if (!$scope.dateTimeIntervals) {\n                    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n                }\n                // change default choosed interval\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            } else {\n                $scope.locked_interval = interval; // locked\n                // change color\n                // change dropdown list\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            }\n        } else {\n            $scope.locked_interval = interval;\n            // change color\n\n            // change dropdown list\n            // check the user default config first\n            if ($scope.dateTimeIntervals) {\n\n            } else {\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n            }\n\n\n            $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n            $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n        }\n        // change\n        $scope.changeInterval($scope.currentIntervalChoosed);\n    };\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id,\n        callback: function(data) {\n            if (data) {\n                widgetData = data;\n                if (widgetData.data.metadata.data.basic.ranges) {\n                    if (widgetData.data.metadata.data.basic.hasOwnProperty(\"ranges\")) {\n                        $scope.dateTimeIntervals = widgetData.data.metadata.data.basic.ranges;\n                        angular$1.forEach($scope.dateTimeIntervals, function(range) {\n                            range[\"interval\"] = range.value;\n                            if (range.checked == true) {\n                                $scope.currentIntervalChoosed = range;\n                            }\n                        });\n                    }\n                } else {\n                    $scope.currentIntervalChoosed = $scope.dateTimeIntervals[1];\n                }\n            }\n        }\n    });\n\n\n    $scope.changeInterval = function(interval) {\n\n        var range = $scope.currentChart[\"xAxisZoomRange\"];\n\n        if (range[0] instanceof Date) {\n            range[0] = range[0].getTime();\n        }\n\n        if (range[1] instanceof Date) {\n            range[1] = range[1].getTime();\n        }\n\n        if (interval && ((range[1] - interval.interval) >= range[0])) {\n            $scope.rangeConfig.dateWindow = [new Date(range[1] - interval.interval), range[1]];\n            $scope.currentChart.updateOptions($scope.rangeConfig);\n            $scope.currentIntervalChoosed = interval;\n        }\n    };\n\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {\n            device: []\n        };\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n        // get start and end from url\n        var begin_path = $stateParams.begin;\n        var end_path = $stateParams.end;\n        var init_flag = false;\n\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function() {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n        $scope.showOrHideDevice = function(device) {\n            angular$1.forEach($scope.childrenDevices, function(item, index) {\n                if (item.name === device.name) {\n                    var graph = $scope.currentChart;\n\n                    if (device.show == true) {\n                        graph.setVisibility(index, false);\n                        device.show = false;\n                    } else {\n                        graph.setVisibility(index, true);\n                        device.show = true;\n                    }\n\n                }\n            });\n        };\n\n        $scope.fixGraphWithGap_click = function() {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.checkY2Btns = function() {\n            return $scope.basicInfo.zoom === true && $scope.showY2Btns === true;\n        };\n\n        $scope.$on('deviceInfoEvent', function(event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.auto_schema = metadata.data.source.store;\n            $scope.auto_metadata = metadata;\n            $scope.auto_device_name = deviceData.device.name;\n\n            $scope.$watch('currentView', function(nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    $scope.$emit('graphScatterViewChangeEvent', {\n                        children: $scope.basicInfo.childrenChart,\n                        view: nObj\n                    });\n                    $scope.button_handlers = {}; // clean handlers\n                    angular$1.element(\"#buttons_area\").empty();\n                    if (nObj == -1) {\n                        $scope.autoupdate = true;\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                            angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === rangeLevel) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column.startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n                            $scope.auto_fields = fields;\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                                initChart(data, deviceData.device.name);\n                            }, function(error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        $scope.autoupdate = false;\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === rangeLevel) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if (column.startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                // show children view\n                                dataService.childrenExtensionInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, metadata.data.source.relation_group, rangeLevel, otherLevels, fields).then(function(data) {\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                        // interactions for scatter view\n                                        if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter) {\n                                            // 1. color\n                                            if ($scope.interactions.graphs.buttons.scatter.color) {\n                                                // change color by \"field\"\n                                                var buttons = $scope.interactions.graphs.buttons.scatter.color;\n\n                                                angular$1.forEach(buttons, function(button) {\n                                                    var buttons_html = '';\n                                                    // create an event handler\n                                                    var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                                                    $scope.button_handlers[_func] = function() {\n                                                        var colors = [];\n                                                        // set button status\n                                                        if (button[\"active\"]) {\n                                                            // make them random colors\n                                                            angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                                                if ($scope.defaultColors[$index]) {\n                                                                    colors.push($scope.defaultColors[$index]);\n                                                                } else {\n                                                                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                                                                }\n                                                            });\n                                                            button[\"active\"] = false;\n                                                        } else {\n                                                            // the custom func returns color.\n                                                            var field = button.field;\n                                                            var _func = button._func;\n                                                            // devices\n                                                            angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                                                colors.push(_func(device[field]));\n                                                            });\n                                                            button[\"active\"] = true;\n                                                        }\n                                                        // update graph colors\n                                                        $scope.currentChart.updateOptions({\n                                                            \"colors\": colors\n                                                        });\n                                                    };\n                                                    // create click event handler for this button and put it into $scope\n                                                    buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                                                    // compile the html and add it into toolbar\n                                                    angular$1.element(\"#buttons_area\").append($compile(buttons_html)($scope));\n                                                });\n                                            }\n                                            // 2. data filter\n                                            if ($scope.interactions.graphs.buttons.scatter.dataFilter) {\n                                                var buttons = $scope.interactions.graphs.buttons.scatter.dataFilter;\n\n                                                angular$1.forEach(buttons, function(button) {\n                                                    var buttons_html = '';\n                                                    // create an event handler\n                                                    var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                                                    $scope.button_handlers[_func] = function() {\n                                                        // set button status\n\n                                                        // the custom func returns color.\n                                                        var field = button.field;\n                                                        var _func = button._func;\n                                                        // devices\n                                                        angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                                            if (_func(device[field])) {\n                                                                device.show = true;\n                                                                $scope.currentChart.setVisibility($index, true);\n                                                            } else {\n                                                                device.show = false;\n                                                                $scope.currentChart.setVisibility($index, false);\n                                                            }\n                                                        });\n                                                    };\n                                                    // create click event handler for this button and put it into $scope\n                                                    buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                                                    // compile the html and add it into toolbar\n                                                    angular$1.element(\"#buttons_area\").append($compile(buttons_html)($scope));\n                                                });\n                                            }\n                                            // 2. series highlighting\n                                            if ($scope.interactions.graphs.buttons.scatter.highlighting) {\n                                                // array\n                                                var series = $scope.interactions.graphs.buttons.scatter.highlighting;\n                                                if(typeof(series) === 'string' || series instanceof String){\n                                                    $timeout(function(){\n                                                        $scope.currentChart.setSelection(false, series);\n                                                    });\n\n                                                }else if(typeof(series) === 'array' || series instanceof Array){\n                                                    angular$1.forEach(series, function(line){\n                                                        $timeout(function(){\n                                                            $scope.currentChart.setSelection(false, line);\n                                                        });\n                                                    });\n                                                }\n                                            }\n                                        }\n                                        // n. other.....\n                                    } else {\n                                        return;\n                                    }\n                                }, function(error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n            // first time of showing chart\n            $scope.$watch('currentChart', function(newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n\n                    // fields of range level\n                    var fields = [];\n                    var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0 && level.name === rangeLevel) {\n                            var lines = level.rows;\n                            if (lines) {\n                                angular$1.forEach(lines, function(line) {\n                                    //\n                                    if (line.value) {\n                                        var columns = (line.value).match(patt);\n                                        angular$1.forEach(columns, function(column) {\n                                            if ((column).startsWith('data.')) {\n                                                fields.push(column.replace('data.', ''));\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    $scope.auto_fields = fields;\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n                            //call scatter view init.\n                            $scope.currentView = 1;\n                        } else {\n                            $scope.currentView = -1;\n                            initChart(data, deviceData.device.name);\n                        }\n\n                    }, function(error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function(newValue, oldValue) {\n                if (newValue.begin != null && newValue.end != null) {\n                    var expect_points = Math.floor($element.parent().width());\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    if ($scope.locked_interval) {\n                        expectedInterval = $scope.locked_interval.interval;\n                    }\n                    var conf = $scope.intevals.device;\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                        $scope.autoupdate = false;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n\n\n                        if ($scope.currentView == -1) {\n                            $scope.autoupdate = true;\n                            $scope.auto_store = conf[conf.length - 1].name;\n                        }\n\n\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                        $scope.autoupdate = false;\n                    }\n\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function(config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n\n                    // check the interval(data) no more than the number of expected points\n                    if (expectedInterval == lastOne) {\n\n                        // check\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.limits) {\n                            expect_points = $scope['interactions'].graphs.limits;\n                        }\n                        //\n                        if (((newValue.end - newValue.begin) / expectedInterval) > expect_points) {\n                            // reset range bar\n                            $scope.rangeConfig.dateWindow = [new Date(newValue.end - (expect_points - 1) * expectedInterval), new Date(newValue.end)];\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                            $scope.alertMessage = \"Limit the number of \\\"Zoom-Out\\\" points to \" + expect_points + \".\";\n                            $timeout(function() {\n                                $scope.alertMessage = null;\n                            }, 5000);\n                            return;\n                        }\n                    }\n\n                    // update range-bar\n                    if ($scope.rangeSelectorBar) {\n                        angular$1.forEach($scope.trees, function(tree) {\n                            if (tree.range == true) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === tree.store) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                                        // udpate chart\n                                        var showData = data;\n                                        showData = showData.filter(function(obj) {\n                                            return obj != null;\n                                        });\n\n                                        // update range bar\n                                        var basicInfo = $scope.basicInfo;\n                                        var allLines = [];\n                                        angular$1.forEach(showData, function(line) {\n                                            allLines.push([new Date(line.timestamp)]);\n                                        });\n                                        var series_range = {\n                                            'l0': {\n                                                axis: 'y1'\n                                            }\n                                        };\n\n                                        var rangeBarLabels = [];\n                                        for (var i = 0; i < fields.length; i++) {\n                                            rangeBarLabels.push(fields[i]);\n\n                                            var f = new Function(\"data\", \"with(data) { if(data.\" + fields[i] + \"!=null)return data.\" + fields[i] + \";return null;}\");\n                                            // add value\n                                            var counter = 0;\n                                            angular$1.forEach(allLines, function(realLine) {\n                                                try {\n                                                    var value = f(showData[counter]);\n                                                    realLine.push(value);\n                                                } catch (ex) {\n                                                    realLine.push(null);\n                                                }\n                                                counter++;\n                                            });\n                                        }\n                                        //\n\n                                        if ($scope.rangeConfig && $scope.rangeConfig.file && $scope.rangeConfig.file != null) {\n                                            var objNeed2Add = [];\n                                            angular$1.forEach($scope.rangeConfig.file, function(item) {\n                                                var flag = false;\n                                                var dataLength = -1;\n                                                angular$1.forEach(allLines, function(line) {\n                                                    dataLength = line.length;\n                                                    if (line.length > 0 && line[0].getTime() === item[0].getTime()) {\n                                                        flag = true;\n                                                    } else if (line.length === 0) {\n                                                        flag = true;\n                                                    } else {\n                                                        dataLength = line.length;\n                                                    }\n\n                                                });\n                                                if (!flag) {\n                                                    var tempObj = [];\n                                                    for (var i = 0; i < dataLength; i++) {\n                                                        tempObj[i] = item[i];\n                                                    }\n                                                    objNeed2Add.push(tempObj);\n                                                }\n                                            });\n                                        }\n                                        allLines = allLines.concat(objNeed2Add);\n                                        allLines.sort(function(a, b) {\n                                            return a[0] > b[0] ? 1 : -1;\n                                        });\n                                        if ($scope.showY2Btns) {\n                                            //noinspection JSDuplicatedDeclaration\n                                            if (!$scope.rangeConfig.axes.hasOwnProperty(\"y2\")) {\n                                                series_range = {\n                                                    'l0': {\n                                                        axis: 'y1'\n                                                    },\n                                                    'l0': {\n                                                        axis: 'y2'\n                                                    }\n                                                };\n                                                $scope.rangeSeries = series_range;\n                                                $scope.rangeConfig = {\n                                                    'file': allLines,\n                                                    'labels': ['x'].concat(rangeBarLabels),\n                                                    'series': series_range\n                                                };\n                                                if (basicInfo && basicInfo.range_show) {\n                                                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                                }\n                                            } else {\n                                                $scope.rangeSelectorBar.updateOptions({\n                                                    'file': allLines\n                                                });\n                                            }\n\n                                        } else {\n                                            series_range[\"span_y2\"] = {\n                                                axis: 'y2'\n                                            };\n                                            $scope.rangeSeries = series_range;\n                                            var newLines = [];\n                                            angular$1.copy(allLines, newLines);\n                                            angular$1.forEach(newLines, function(line) {\n                                                line.push(null);\n                                            });\n                                            $scope.rangeConfig = {\n                                                'file': newLines,\n                                                'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                                'series': series_range\n                                            };\n                                            if (basicInfo && basicInfo.range_show) {\n                                                $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                            }\n                                        }\n                                    },\n                                    function(data) {\n                                        console.info(data);\n                                    }\n                                );\n                            }\n                        });\n                    }\n\n\n                    $scope.loadingShow = true;\n                    // check separated points config\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: true\n                        });\n                    } else {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: false\n                        });\n                    }\n\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        $scope.legendText = null;\n                        var deviceInfo = [];\n                        var currentStore = \"\";\n                        $scope.childrenDevices = [];\n                        angular$1.forEach($scope.childTrees, function(device) {\n                            angular$1.forEach(device.trees, function(tree, index) {\n                                if (expectedInterval == tree.frequency) {\n                                    currentStore = tree.store;\n                                    deviceInfo.push({\n                                        name: device.name,\n                                        tree: tree.tree\n                                    });\n                                    device[\"show\"] = true;\n                                    $scope.childrenDevices.push(device);\n                                }\n                            });\n                        });\n                        var fields = [];\n                        var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                        angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                            if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                var lines = level.rows;\n                                if (lines) {\n                                    angular$1.forEach(lines, function(line) {\n                                        if (line.value) {\n                                            var columns = (line.value).match(patt);\n                                            angular$1.forEach(columns, function(column) {\n                                                if (column && (column).startsWith('data.')) {\n                                                    fields.push(column.replace('data.', ''));\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            }\n                        });\n\n                        $scope.auto_fields = fields;\n                        dataService.devicesStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                            var showData = [];\n                            angular$1.forEach(data, function(arr, key) {\n                                var deviceData = [].concat(arr);\n                                showData.push({\n                                    device: key,\n                                    data: deviceData\n                                });\n                            });\n                            //get configuration\n                            updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n                        }, function(data) {\n                            console.info(data);\n                        });\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // cal tree\n                        angular$1.forEach($scope.trees, function(tree, index) {\n                            if (expectedInterval == tree.frequency) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, tree.frequency).then(function(data) {\n                                    // udpate chart\n                                    var showData = data;\n                                    showData = showData.filter(function(obj) {\n                                        return obj != null;\n                                    });\n                                    showData.sort(function(a, b) {\n                                        return a.timestamp > b.timestamp ? 1 : -1;\n                                    });\n                                    //get configuration\n                                    updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                    // tell some other widgets, the graph is changed.\n                                    $timeout(function() {\n                                        $rootScope.$broadcast('chartDataChangeEvent', {\n                                            'id': element_id,\n                                            'group': 'device',\n                                            'data': {\n                                                'collection': tree.store,\n                                                'group': 'device',\n                                                'data': showData\n                                            }\n                                        });\n                                    });\n\n                                }, function(data) {\n                                    console.info(data);\n                                });\n                            }\n                        });\n\n                        $scope.fixGraphWithGap();\n                    }\n                    $scope.status = false;\n                }\n            });\n\n        });\n\n\n        var fetchData = function(values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                if (node.data != null && node.data.array) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                } else if (node.data != null) {\n                    Array.prototype.push.apply(values, node.data.slice(0, node.data.length));\n                }\n\n            }\n\n        };\n\n\n        $scope.trees = [];\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function(data, deviceName) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function(tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({\n                    name: tree.store,\n                    interval: tree.frequency\n                });\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            // fetchData(allData, rangeTree.tree);only get first and last\n            // fix the problem of never seen the current data.\n            rangeTree.last.timestamp = rangeTree.last.timestamp + (rangeTree.frequency - 1);\n            allData = allData.concat([rangeTree.first, rangeTree.last]);\n\n            allData = allData.filter(function(obj) {\n                return obj != null;\n            });\n\n            allData.sort(function(a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({\n                    timestamp: timestamp - currentInterval\n                });\n                Array.prototype.push.apply(newData, allData);\n                newData.push({\n                    timestamp: timestamp + currentInterval\n                });\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // put the data into range tree cache\n            if (rangeTree) {\n                //\n                graphDataService.put(deviceName + \"/\" + rangeTree.store + \"/\" + $scope.graphId, [rangeTree.first, {\n                    timestamp: moment().endOf('day').toDate().getTime()\n                }]);\n            }\n            // get configuration and make real data\n            updateChart(metadata, store, allData, rangeTree);\n        };\n\n        var initChildrenChart = function(deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            $scope.childrenDevices = [];\n\n            angular$1.forEach(deviceDatas, function(deviceData, _index) {\n                var device = {};\n                device[\"show\"] = true;\n                angular$1.merge(device, deviceData.device, deviceData.extension);\n                $scope.childrenDevices.push(device);\n                var trees = deviceData.trees;\n                device[\"trees\"] = trees;\n                $scope.childTrees.push(device);\n                var rangeTree = null;\n                angular$1.forEach(trees, function(tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function(interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({\n                            name: tree.store,\n                            interval: tree.frequency\n                        });\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [rangeTree.first, {\n                        timestamp: moment().endOf('day').toDate().getTime()\n                    }];\n                    allData = allData.filter(function(obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function(a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n            });\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n        var updateChildrenChart = function(metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function(device, key, _index) {\n                angular$1.forEach(device.data, function(item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function(label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n                });\n            });\n            // order\n            allXLabels.sort(function(a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function(label) {\n                allLines.push([label]);\n            });\n\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function(device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        labels.push(key);\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function(realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function(odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            var connectSeparatedPoints = false;\n            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n            }\n\n            //update chart\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'labelsKMB': true,\n                        'file': allLines,\n                        legend: 'never',\n                        labelsKMB: true,\n                        labelsSeparateLines: false,\n                        highlightCircleSize: 2,\n                        strokeWidth: 1,\n                        strokeBorderWidth: 1,\n                        // data formate\n                        labels: ['x'].concat(sampleData.labels),\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        highlightCallback: function(e, x, pts, row, seriesName) {\n                            var maxWidth = e.target.offsetWidth;\n                            var sn = \"\";\n                            angular$1.forEach(series, function(value, name, item) {\n                                if (value.axis === \"y1\") {\n                                    sn = name;\n                                }\n                            });\n                            var point_show = {\n                                x: 0,\n                                y: 0\n                            };\n                            angular$1.forEach(pts, function(item, index) {\n                                if (item.name === seriesName) {\n                                    $scope.legendText = seriesName;\n                                    $scope.legendColor = $scope.currentChart.user_attrs_.colors[index];\n                                    // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                    $scope.legendText_device = seriesName;\n                                    if (moment.tz.guess()) {\n                                        $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                    } else {\n                                        $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                    }\n                                    $scope.legendText_column = sn;\n                                    $scope.legendText_value = item.yval;\n                                    angular$1.forEach(pts, function(point) {\n                                        if (point.name === seriesName) {\n                                            point_show.y = point.canvasy + 30;\n                                            point_show.x = point.canvasx + 30;\n                                        }\n                                    });\n                                }\n                            });\n                            var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n\n                            $scope.$apply(function() {\n                                $scope.legendTop = point_show.y;\n\n                                if (maxWidth < (point_show.x + 200)) {\n                                    $scope.legendLeft = point_show.x - 200;\n                                } else {\n                                    $scope.legendLeft = point_show.x;\n                                }\n                            });\n\n                        },\n\n                        unhighlightCallback: function(e) {\n                            $scope.$apply(function() {\n                                $scope.legendText = null;\n                                $scope.legendText_device = null;\n                                $scope.legendText_datetime = null;\n                                $scope.legendText_column = null;\n                                $scope.legendText_value = null;\n                            });\n                        },\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max],\n                                axisLabelWidth: 80\n                            },\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    $scope.showY2Btns = false;\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function(line) {\n                        line.push(null);\n                    });\n                    series[\"span_y2\"] = {\n                        'axis': 'y2'\n                    };\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'legend': 'never',\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labelsSeparateLines': false,\n                        highlightCircleSize: 2,\n                        strokeWidth: 1,\n                        strokeBorderWidth: 1,\n                        'highlightSeriesOpts': {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        highlightCallback: function(e, x, pts, row, seriesName) {\n                            var maxWidth = e.target.offsetWidth;\n                            var sn = \"\";\n                            angular$1.forEach(series, function(value, name, item) {\n                                if (value.axis === \"y1\") {\n                                    sn = name;\n                                }\n                            });\n                            var point_show = {\n                                x: 0,\n                                y: 0\n                            };\n                            angular$1.forEach(pts, function(item, index) {\n                                if (item.name === seriesName) {\n                                    $scope.legendText = seriesName;\n                                    $scope.legendColor = $scope.currentChart.user_attrs_.colors[index];\n                                    // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                    $scope.legendText_device = seriesName;\n                                    if (moment.tz.guess()) {\n                                        $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                    } else {\n                                        $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                    }\n                                    $scope.legendText_column = sn;\n                                    $scope.legendText_value = item.yval;\n                                    angular$1.forEach(pts, function(point) {\n                                        if (point.name === seriesName) {\n                                            point_show.y = point.canvasy + 30;\n                                            point_show.x = point.canvasx + 30;\n                                        }\n                                    });\n                                }\n                            });\n                            var legendbox = angular$1.element(\"#legendbox\" + element_id);\n                            $scope.$apply(function() {\n                                $scope.legendTop = point_show.y;\n\n                                if (maxWidth < (point_show.x + 200)) {\n                                    $scope.legendLeft = point_show.x - 200;\n                                } else {\n                                    $scope.legendLeft = point_show.x;\n                                }\n                            });\n                        },\n\n                        unhighlightCallback: function(e) {\n                            $scope.$apply(function() {\n                                $scope.legendText = null;\n                                $scope.legendText_device = null;\n                                $scope.legendText_datetime = null;\n                                $scope.legendText_column = null;\n                                $scope.legendText_value = null;\n                            });\n                        },\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max]\n                            },\n                            'y2': {\n                                axisLabelFormatter: function(d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                //\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n\n                // set the first one to range bar\n                // update range bar with the first channel data\n                if ($scope.basicInfo && $scope.basicInfo.range_show && $scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n\n                    Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                        zoom: true,\n                        selection: false,\n                        range: false\n                    });\n                    if (showY2axis) {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels)\n                        };\n                    } else {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels).concat(['span_y2'])\n                        };\n                    }\n                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                    // reset the datetime for current chart\n\n                    if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= newLines[0][0] && $scope.chartDateWindow[1] <= newLines[newLines.length - 1][0])) {\n                        // keep the current range bar refresh once.\n                        $scope.chartDateTime = {\n                            begin: $scope.chartDateTime.begin,\n                            end: $scope.chartDateTime.end\n                        };\n                        $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    } else {\n\n                        $scope.currentChart[\"xAxisZoomRange\"] = [newLines[0][0], newLines[newLines.length - 1][0]];\n                        if (begin_path && end_path && !init_flag) {\n                            // $scope.chartDateTime = {\n                            // \"begin\": new Date(new Number(begin_path)),\n                            // \"end\": new Date(new Number(end_path))\n                            // };\n                            $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            init_flag = true;\n                        } else {\n                            if ($scope.currentIntervalChoosed && ((newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= newLines[0][0].getTime())) {\n                                $scope.rangeConfig.dateWindow = [new Date(newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), newLines[newLines.length - 1][0]];\n                            } else {\n                                $scope.chartDateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                                $scope.rangeConfig.dateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                            }\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChartOptions = $scope.rangeConfig;\n                    }\n                } else {\n                    //  keep the same time window and refersh\n                    $scope.chartDateTime = {\n                        begin: $scope.chartDateTime.begin,\n                        end: $scope.chartDateTime.end\n                    };\n                    $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    $scope.loadingShow = false;\n                }\n\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function(metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function(device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function(collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y1',\n                                };\n                            } else {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                                $scope.showY2Btns = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function(data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: value\n                                    });\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: null\n                                    });\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function(item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({\n                                device: device.device,\n                                data: tempData\n                            });\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function(nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function(line) {\n                angular$1.forEach(chartData, function(timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(null);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n                    var connectSeparatedPoints = false;\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                    }\n                    if (showY2axis) {\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeWidth: 1,\n                            strokeBorderWidth: 1,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                        };\n\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeWidth: 1,\n                            strokeBorderWidth: 1,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                var maxWidth = e.target.offsetWidth;\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        $scope.legendColor = $scope.currentChart.user_attrs_.colors[index];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        if (moment.tz.guess()) {\n                                            $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                        } else {\n                                            $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                        }\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n\n                                    if (maxWidth < (point_show.x + 200)) {\n                                        $scope.legendLeft = point_show.x - 200;\n                                    } else {\n                                        $scope.legendLeft = point_show.x;\n                                    }\n                                });\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        $scope.showY2Btns = false;\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function(line) {\n                            line.push(null);\n                        });\n                        series[\"span_y2\"] = {\n                            axis: 'y2'\n                        };\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightCircleSize: 2,\n                            strokeWidth: 1,\n                            strokeBorderWidth: 1,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightCircleSize: 2,\n                            strokeWidth: 1,\n                            strokeBorderWidth: 1,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                var maxWidth = e.target.offsetWidth;\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        $scope.legendColor = $scope.currentChart.user_attrs_.colors[index];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        if (moment.tz.guess()) {\n                                            $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                        } else {\n                                            $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                        }\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    if (maxWidth < (point_show.x + 200)) {\n                                        $scope.legendLeft = point_show.x - 200;\n                                    } else {\n                                        $scope.legendLeft = point_show.x;\n                                    }\n                                });\n\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n\n\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function(metadata, store, rangeData, allData) {\n\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function(yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n\n                    if (allLines.length == 0) {\n\n                        $scope.currentChart.updateOptions({\n                            'file': []\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n\n\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n                            var connectSeparatedPoints = false;\n                            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                            }\n                            if (showY2axis) {\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n\n\n                            } else {\n\n                                var newLines = [];\n                                $scope.showY2Btns = false;\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n\n                                series[\"span-Y2\"] = {\n                                    axis: 'y2'\n                                };\n\n\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            }\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        $scope.autoUpdateChart = updateDetailChart;\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function(metadata, store, allData, rangeTree) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {\n                                'l0': {\n                                    axis: 'y1'\n                                }\n                            };\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {\n                                        axis: 'y1'\n                                    },\n                                    'l0': {\n                                        axis: 'y2'\n                                    }\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.showY2Btns = false;\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range\n                                });\n                                // save\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n                        var connectSeparatedPoints = false;\n                        if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                            connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                        }\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: null,\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {\n                                axis: 'y2'\n                            };\n                            $scope.showY2Btns = false;\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: null,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        axisLabelFormatter: function(d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n\n\n                        if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= allLines[0][0] && $scope.chartDateWindow[1] <= allLines[allLines.length - 1][0])) {\n                            // keep the current range bar refresh once.\n                            $scope.chartDateTime = {\n                                begin: $scope.chartDateTime.begin,\n                                end: $scope.chartDateTime.end\n                            };\n                            $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                        } else {\n\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            if (begin_path && end_path && !init_flag) {\n                                // $scope.chartDateTime = {\n                                // \"begin\": new Date(new Number(begin_path)),\n                                // \"end\": new Date(new Number(end_path))\n                                // };\n                                $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                init_flag = true;\n                            } else {\n                                if ($scope.currentIntervalChoosed && ((allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= allLines[0][0].getTime())) {\n                                    $scope.rangeConfig.dateWindow = [new Date(allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), allLines[allLines.length - 1][0]];\n                                } else {\n                                    $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                    $scope.rangeConfig.dateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                }\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                        }\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n        $scope.chartDateTime = {\n            begin: null,\n            end: null\n        };\n\n        // function for show one\n        $scope.showOne = function(deviceName) {\n\n            if ($rootScope['standalone'] && $rootScope['standalone'] == true) {\n                return false;\n            }\n\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/admin/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/admin/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n\n        var btntimer = null;\n\n\n        $scope.btnZoomInVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomInVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVULeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVDLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVURight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVDRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        // functions for buttons\n        $scope.btnpanleft = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[0] - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0] - pan_delta;\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[1] - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1] - pan_delta;\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnpanright = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = $scope.chartDateWindow[0].getTime() + pan_delta;\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            } else {\n                if (($scope.chartDateWindow[0] + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = ($scope.chartDateWindow[0] + pan_delta);\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1].getTime() + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            } else {\n                if (($scope.chartDateWindow[1] + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1] + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        $scope.btnzoomin = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            startDate = rangeStart + (delta * 2);\n            endDate = rangeEnd - (delta * 2);\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            //\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnzoomout = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            if ((rangeStart - (delta * 2)) > panRange[0]) {\n                startDate = rangeStart - (delta * 2);\n            } else {\n                startDate = panRange[0];\n            }\n\n            if ((rangeEnd + (delta * 2)) < panRange[1]) {\n                endDate = rangeEnd + (delta * 2);\n            } else {\n                endDate = panRange[1];\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        var timer = null;\n        $scope.refersh = function(g, init) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function() {\n                if (init || g.xAxisRange()[0] != $scope.chartDateTime.begin || g.xAxisRange()[1] != $scope.chartDateTime.end) {\n                    $scope.chartDateTime = {\n                        begin: g.xAxisRange()[0],\n                        end: g.xAxisRange()[1]\n                    };\n                    $scope.chartDateWindow = g.xAxisRange();\n                }\n            }, 600);\n        };\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph\n    .$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location', '$stateParams', '$compile'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap', 'ui.router', 'angular-cache']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function() {\n        return function(input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .factory('$graphstorage', ['$window', function($window) {\n        return {\n            setTree: function(key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getTree: function(key) {\n                return JSON.parse($window.localStorage[key]) || false;\n            },\n            addTree: function(key, value) {\n                if ($window.localStorage[key]) {\n                    var trees = JSON.parse($window.localStorage[key]);\n                    trees.push(value);\n                    this.setTree(key, trees);\n                } else {\n                    this.setTree(key, [value]);\n                }\n            },\n            clear: function() {\n                $window.localStorage.clear();\n            }\n        }\n    }])\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function() {\n        return function(scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).config(function(CacheFactoryProvider) {\n        angular$1.extend(CacheFactoryProvider.defaults, {\n            maxAge: 30 * 60 * 1000, // half an hour\n            deleteOnExpire: 'aggressive',\n        });\n    }).service('graphDataService', function(CacheFactory) {\n        var graphCache = null;\n        if (!CacheFactory.get('graphCache')) {\n            graphCache = CacheFactory('graphCache',{\n                maxAge: 30 * 60 * 1000, // half an hour\n                deleteOnExpire: 'aggressive'\n            });\n        }\n        return {\n            get: function(name) {\n                return graphCache.get('/graph/'+name);\n            },\n            put: function(name, data) {\n                return graphCache.put('/graph/'+name, data);\n            }\n        };\n    })\n    .filter('tableformatter', ['$filter', function($filter) {\n        return function(input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}