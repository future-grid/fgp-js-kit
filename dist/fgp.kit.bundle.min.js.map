{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","standalone","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","$on","evt","msg","push","forEach","item","id","items","element","find","children","item_new","currentElement","attr","groupItems","dulpItem","findChild4Repeat","param","config","callback","metadata","data","datasource","style","key","from","parentId","parentHtmlObj","arrayItems","newId","i","parent","currentItem","html_render","repeat","append","findChild","sendDeviceData","deviceInfo","then","$broadcast","device","event","obj","view","graph","graphs","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","graphDataService","_$http","_$q","indexCache","deviceStores","_$interval","_$graphDataService","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","contentType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","fields","params","concat","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","fillChildrenTree","buckets","tree","showData","value","flag","info","fillTree","size","calTree","start","end","filter","elem","devicesStoreData","store","devices","index","$graphDataService","Date","getTime","method","JSON","stringify","deviceGraphData","newComeResult","indexOf","sort","a","b","timestamp","put","deviceStoreData","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","autoUpdateGraph","schema","count","fetcher","last","interval","trees","frequency","timeKey","graphData","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","$stateParams","_dataService","dom_loading","dom_legend","dom_empty_data","dom_alert_info","dom_datetime_interval","dom_series_list","dom_real_time_grap","html","link","status","timeOut","completionPercent","getData","numSeries","numRows","labels","initDate","j","val","sampleData","movePan","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","canScroll","timer","mouseOverHandler","cancel","mouseEnterHandler","mouseOutHandler","scroll","normal","WheelEvent","detail","deltaY","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","wheel","mousedown","mousemove","mouseenter","mouseup","mouseout","drawGapEdgePoints","pointSize","legend","labelsKMB","labelsSeparateLines","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","timer_auto","process_bar_timer","on","tempConifg","realTimeGraph","currentChartOptions","file","auto_device_name","auto_schema","auto_store","auto_fields","graph_data","worker","deviceConfig","auto_metadata","groups","collections","allLines","yRanges","collection","line","showY2axis","rows","row","label","yaxis","f","Function","counter","realLine","ex","yrange","newLines","copy","NaN","perInterval","showRealTimeGraph","modal","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","finalDateRagne","chartDateTime","begin","finalDateRange","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","alertMessage","showY2Btns","legendText","legendText_device","legendText_datetime","legendText_column","legendText_value","legendColor","autoupdate","dateTimeIntervals","basic","checked","currentIntervalChoosed","changeInterval","rangeConfig","loadingShow","intevals","height","begin_path","end_path","init_flag","fixInterval","noneFixed","fixGraphWithGap","currentInterval","currentIntervalName","fixed","tempDate","labels_","file_","showOrHideDevice","childrenDevices","setVisibility","fixGraphWithGap_click","parent_container","data_from","checkY2Btns","deviceData","$watch","nObj","oObj","level","patt","RegExp","lines","columns","match","column","startsWith","initChart","relation","relation_group","initChildrenChart","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","series_range","l0","rangeBarLabels","objNeed2Add","dataLength","tempObj","rangeSeries","currentStore","childTrees","arr","updateChildrenDetailChart","rangeChildrenData","updateDetailChart","rangeData","group","fetchData","values","node","array","Array","apply","slice","ordinalRangeData","intevalforshow","rangeTree","allData","first","newData","thePoint","updateChart","deviceDatas","devicesInfo","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allXLabels","yRange","toString","substr","originalData","odata","childrenRangeConfig","highlightSeriesOpts","strokeWidth","strokeBorderWidth","highlightCircleSize","y2label","highlightCallback","pts","seriesName","sn","point_show","xval","yval","point","canvasy","canvasx","legendbox","$apply","legendTop","legendLeft","unhighlightCallback","axisLabelFormatter","d","newTime","tempData","tempTime","dateTime","chartData","nt","timeTicket","lineData","autoUpdateChart","rangeSeriesNumber","Number","open","lastIndexOf","btntimer","btnZoomInVLeft","btnZoomOutVLeft","btnZoomInVRight","btnZoomOutVRight","btnPanVULeft","btnPanVDLeft","btnPanVURight","btnPanVDRight","btnpanleft","panRange","pan_delta","startDate","endDate","btnpanright","btnzoomin","rangeStart","rangeEnd","btnzoomout","init","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","button","shown","buttons","split","healthinfo","action","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$websocket","labelstyle","listStyle","deviceType","dataStream","port","onMessage","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","splice","itemIndex","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","formatter","record","cleanData","service","input","substring","setTree","localStorage","getTree","addTree","clear","directive","$last","CacheFactoryProvider","extend","defaults","maxAge","deleteOnExpire","CacheFactory","graphCache"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,$,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\n$ = 'default' in $ ? $['default'] : $;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\",\n        standalone: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n    $rootScope['standalone'] = $scope.standalone;\n\n\n    var graphBindingArray = [];\n\n    $scope.$on('bindChildChartEvent', function (evt, msg) {\n        graphBindingArray.push(msg);\n    });\n\n    $scope.$on('bindChildRepeatEvent', function (evt, msg) {\n        angular$1.forEach($scope.configuration, function (item) {\n            if (item.id == msg.id) {\n                var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                angular$1.forEach(items, function (item_new) {\n                    $scope.showdata[item_new.id] = item;\n                    var currentElement = angular$1.element(item_new);\n                    if (currentElement.attr(\"dulp\")) {\n                        var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                        angular$1.forEach(groupItems, function (dulpItem) {\n                            findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id);\n                        });\n                    }else{\n                        findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id);\n                    }\n                });\n            }\n        });\n    });\n\n    $scope.$on('listStyleEvent', function (evt, param) {\n        var config = $scope.showdata[param.id.replace(\"edit\", \"\")];\n        param.callback(config.metadata.data.datasource.style);\n    });\n\n\n    $scope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n        angular$1.forEach($scope.showdata, function (metadata, key) {\n            if (key == msg.id) {\n                msg.callback({data: metadata, from: 'show'});\n                return;\n            }\n        });\n    });\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                $scope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    $scope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems);\n            }\n            else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    angular$1\n        .forEach($scope\n\n                .configuration\n            ,\n            function (item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    $scope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)($scope));\n                    findChild(item.id, currentItem, $scope.configuration);\n                }\n            }\n        )\n    ;\n\n    var\n        sendDeviceData = function () {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    $scope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n        };\n\n    /**\n     * get device information\n     */\n    if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n        // first time\n        sendDeviceData();\n        // after every 30 seconds\n        // $interval(function () {\n        // sendDeviceData();\n        // }, 30000);\n    }\n\n\n    $scope.$on('graphScatterViewChangeEvent', function(event, obj){\n        //tell all the children graphs the scatter view changed\n        $scope.$broadcast('parentScatterViewChangedEvent', {children: obj.children, view:obj.view});\n    });\n\n    // all item created;\n    $timeout(function () {\n        angular$1.forEach(graphBindingArray, function (graph) {\n            $scope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n        });\n    });\n};\n\n\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n    this._$interval = $interval;\n    this._$graphDataService = graphDataService;\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/rest/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices?key=' + deviceKey;\n    }\n\n    $.ajaxSettings.async = false;\n    $.ajax({\n        type: 'GET',\n        url: url,\n        contentType: \"application/json\",\n        success: function(data) {\n            var url = host + \"/rest/api/\";\n            if (applicationName) {\n                url += \"app/\" + applicationName + \"/devices/extension-types?device_type=\";\n            } else {\n                url += \"devices/extension-types?device_type=\";\n            }\n            $.ajaxSettings.async = false;\n            $.ajax({\n                type: 'GET',\n                url: url + data.type,\n                contentType: \"application/json\",\n                success: function(types) {\n                    angular$1.forEach(types, function(type) {\n                        Object.defineProperty(data, type.name, {\n                            get: function() {\n                                var result = null;\n                                var url = host + \"/rest/api/\";\n                                if (applicationName) {\n                                    url += \"app/\" + applicationName + \"/devices/extensions?device_name=\";\n                                } else {\n                                    url += \"devices/extensions?device_name=\";\n                                }\n                                $.ajaxSettings.async = false;\n                                $.ajax({\n                                    type: 'GET',\n                                    url: url + this.name + '&extension_type=' + type.name,\n                                    contentType: \"application/json\",\n                                    success: function(field) {\n                                        result = field;\n                                    },\n                                    error: function(e) {\n                                        deferred.reject(e);\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                    });\n                },\n                error: function(e) {\n                    console.log(e.message);\n                }\n            });\n\n            deferred.resolve(data);\n        },\n        error: function(e) {\n            deferred.reject(e);\n        }\n    });\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            'otherLevels': otherLevels,\n            'fields': [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value;\n                tree['size'] = value.length;\n\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.length;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id) {\n                tree.data = value;\n                tree['size'] = value.size;\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        data['size'] = tree.size;\n                        flag = true;\n                    }\n                });\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end) ||\n            ((start > tree.start) && start <= tree.end) ||\n            ((tree.start >= start) && tree.start < end) ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function(elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (host, application, deviceInfo, storeSchema, store, start, end, fields) {\n\n    if(!deviceInfo || deviceInfo.length == 0){\n        return false;\n    }\n\n    var devices = \"[\";\n\n    deviceInfo.forEach(function(device, index) {\n        if (index < deviceInfo.length - 1) {\n            devices += \"\\\"\"+device.name +\"\\\",\";\n        } else {\n            devices += \"\\\"\"+device.name +\"\\\"]\";\n        }\n    });\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end\n    this._$http({\n        method: 'GET',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=' + devices + '&fields='+JSON.stringify(fields)+'&start=' + start + '&end=' + end\n    }).then(\n        function(response) {\n            var result = {};\n            var data = response.data;\n            for(key in data){\n                var deviceGraphData = $graphDataService.get(key + \"/\" + store) ? $graphDataService.get(key + \"/\" + store) :[];\n                var newComeResult = data[key].data;\n                newComeResult.forEach(function(item) {\n                    if (deviceGraphData.indexOf(item) == -1) {\n                        // add\n                        deviceGraphData.push(item);\n                    }\n                });\n                // order by timestamp\n                deviceGraphData.sort(function(a, b) {\n                    if (a.timestamp > b.timestamp) {\n                        return 1;\n                    } else if (a.timestamp < b.timestamp) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                $graphDataService.put(key + \"/\" + store, deviceGraphData);\n                result[key] = deviceGraphData;\n            }\n            deferred.resolve(result);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (host, application, deviceKey, storeSchema, store, tree, start, end, fields) {\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end\n    this._$http({\n        method: 'GET',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=[\"' + deviceKey + '\"]&fields='+JSON.stringify(fields)+'&start=' + start + '&end=' + end\n    }).then(\n        function(response) {\n            // only return 1 device data\n            var deviceGraphData = $graphDataService.get(deviceKey + \"/\" + store) ? $graphDataService.get(deviceKey + \"/\" + store) : [];\n            var newComeResult = response.data[deviceKey].data;\n            newComeResult.forEach(function(item) {\n                if (deviceGraphData.indexOf(item) == -1) {\n                    // add\n                    deviceGraphData.push(item);\n                }\n            });\n            // order by timestamp\n            deviceGraphData.sort(function(a, b) {\n                if (a.timestamp > b.timestamp) {\n                    return 1;\n                } else if (a.timestamp < b.timestamp) {\n                    return -1;\n                }\n                return 0;\n            });\n            $graphDataService.put(deviceKey + \"/\" + store, deviceGraphData);\n            deferred.resolve(deviceGraphData);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n\n    return deferred.promise;\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) &&\n                    (lor.length == 6) ? lor : co(lor);\n            })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/rest/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function(response) {\n            console.info(response);\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.prototype.autoUpdateGraph = function autoUpdateGraph (application, device, schema, store, fields, count, callback) {\n    var _$interval = this._$interval;\n    var _$http = this._$http;\n    var fetcher = null;\n    this._$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n        .success(function(response) {\n            var last = -1;\n            var interval = -1;\n            if (response.trees && response.trees.length === 1) {\n                interval = response.trees[0].frequency;\n                last = response.trees[0].last.timeKey;\n            }\n            if (interval != -1) {\n                var start = last - (count * interval);\n                var end = last;\n                // first time\n                _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                    params: {\n                        \"devices\": JSON.stringify([device]),\n                        \"fields\": JSON.stringify(fields),\n                        \"start\": start,\n                        \"end\": end\n                    }\n                }).success(function(graphData) {\n\n                    // start task\n                    fetcher = _$interval(function() {\n                        _$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n                            .success(function(response) {\n                                if (response.trees && response.trees.length === 1) {\n                                    last = response.trees[0].last.timeKey;\n                                    start = last - (count * interval);\n                                    end = last;\n                                    _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                                        params: {\n                                            \"devices\": JSON.stringify([device]),\n                                            \"fields\": JSON.stringify(fields),\n                                            \"start\": start,\n                                            \"end\": end\n                                        }\n                                    }).success(function(graphData) {\n                                        // put the data back\n                                        callback(graphData[device], null, interval);\n                                    });\n                                }\n                            });\n                    }, interval);\n\n                    // put the data back\n                    callback(graphData[device], fetcher, interval);\n                });\n            }\n        });\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory, $interval, graphDataService) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory', '$interval', 'graphDataService'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n    this._$interval = $interval;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_legend = '<li>{{legendText_device}}</li><li>{{legendText_datetime}}</li><li><label style=\"color: {{legendColor}}\">{{legendText_column}}</label>:{{legendText_value}}</li>';\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        var dom_alert_info = '<span class=\"label label-warning\" ng-show=\"alertMessage\" style=\"color: #000;\">{{alertMessage}}</span>';\n\n        var dom_datetime_interval = '<div ng-show=\"rangeSelectorBar\" class=\"dropdown\"> <button class=\"btn btn-info dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">{{currentIntervalChoosed.name}}<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"interval in dateTimeIntervals\"><a href=\"javascript:;\" ng-click=\"changeInterval(interval)\">{{interval.name}}</a></li></ul> </div>';\n\n\n        var dom_series_list = '<div ng-show=\"currentView === 1\" class=\"dropdown\"> <button class=\"btn btn-warning dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">Devices<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"device in childrenDevices\"><input type=\"checkbox\" ng-click=\"showOrHideDevice(device)\" ng-checked=\"device.show\"/>{{device.name}}</li></ul> </div>';\n\n\n        var dom_real_time_grap = '<div class=\"modal fade \" id=\"real_time_graph_' + attrs.id + '\" role=\"dialog\">' +\n            '<div class=\"modal-dialog modal-lg\">' +\n            '<div class=\"modal-content\">' +\n            '<div class=\"col-md-12\"  style=\"padding-top:3px;height: 1px;background-color: #0e90d2;\" ng-style=\"{ \\'width\\': completionPercent + \\'%\\' }\"></div>' +\n            '<div class=\"modal-body\" style=\"width: 100%;height: 300px;\">' +\n            '<div class=\"real-time-graph\" style=\"width: 100%;height: 100%\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n\n        var html = '<div id=\"legendbox' + attrs.id + '\" ng-show=\"legendText\" ng-style=\"{top:legendTop,left:legendLeft}\" style=\"border-radius:10px;background-color:#ffffff;position: absolute;border: 1px solid {{legendColor}};-moz-box-shadow: 5px 5px 5px #888888;box-shadow: 5px 5px 5px #888888;z-index: 99999999;margin-right: 5px;\"><ul style=\"list-style: none;list-style-position: inside;text-align: right;\">' + dom_legend + '</ul></div><div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips btn btn-xs btn-info badge\" href=\"javascript:;\"  style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><i class=\"glyphicon glyphicon-transfer\"></i><span>Scatter View</span></a><a ng-show=\"autoupdate\" class=\"tooltips btn btn-xs btn-info badge\" style=\"float: right;margin-right: 10px;\" ng-click=\"showRealTimeGraph()\" data-toggle=\"modal\"><span>Auto Update</span><i class=\"glyphicon glyphicon-random\"></i></a><div style=\"float: right; margin-right: 10px;\">' + dom_series_list + '</div><div style=\"float: right; margin-right: 10px;\">' + dom_datetime_interval + '</div><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\"/>fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? \\'#009900;\\' : \\'\\'}}\">{{item.name}}</span></label></div><div style=\"float: right; margin-right: 10px;\">' + dom_alert_info + '</div></div></div><div style=\"position: relative;width: 100%;height:100%;\"><div style=\"position: absolute;left:25px;z-index: 999;\" ng-show=\"basicInfo.zoom\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVULeft()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDLeft()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVLeft()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVLeft()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div><div class=\"line-chart-graph\" style=\"width: 100%;height:100%;\"></div><div style=\"position: absolute;right:-15px;top:0px;z-index: 999;\" ng-show=\"checkY2Btns()\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVURight()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDRight()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVRight()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVRight()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;position: relative\"><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;left: 20px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanleft()\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanright()\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;width: 100%;position: absolute;\"></div><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;right: -5px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomin()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomout()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div></div></div>' + dom_real_time_grap;\n\n        return html;\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    var dataService = this._dataService;\n    var _$interval = this._$interval;\n    scope.status = true;\n    var timeOut = this.$timeout;\n    scope.completionPercent = 0;\n    this.$timeout(function() {\n        var getData = function(numSeries, numRows, name) {\n            var result = {\n                labels: null,\n                data: null\n            };\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n                initDate = new Date(initDate.getTime() + 900000);\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)\n                        ];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function(range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n\n        var canScroll = false;\n\n        var timer = null;\n        var mouseOverHandler = function(e, g, context) {\n            //\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n\n        var mouseEnterHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n        var mouseOutHandler = function(e, g, context) {\n            // set flag to false\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            canScroll = false;\n        };\n\n        var scroll = function(e, g, context) {\n\n            if ((scope.basicInfo && !scope.basicInfo.zoom) || !canScroll) {\n                return;\n            }\n\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function() {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function(e, g, context) {\n            if (context.isPanning) {\n                if (e.offsetX <= (g.plotter_.area.x)) {\n                    movePan(e, g, context, 'r');\n                } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(e, g, context, 'l');\n                } else {\n                    movePan(e, g, context, 'h');\n                }\n                timeOut(function() {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n\n        var mouseupHandler = function(e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n\n            canScroll = true;\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'wheel': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseenter': mouseEnterHandler,\n            'mouseup': mouseupHandler,\n            // 'mouseover': mouseOverHandler,\n            'mouseout': mouseOutHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            legend: 'follow',\n            labelsKMB: true,\n            labelsSeparateLines: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            // highlightSeriesOpts: {\n            // strokeWidth: 2,\n            // strokeBorderWidth: 1,\n            // highlightCircleSize: 2\n            // },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function(y) {\n                        return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function(e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function(g, isInit) {\n                if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                    scope.refersh(g, isInit);\n                }\n            },\n            'interactionModel': interactionModel\n        };\n\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n        var timer_auto = null;\n        var process_bar_timer = null;\n        element.find(\"#real_time_graph_\" + attrs.id).on(\"hidden.bs.modal\", function() {\n            // put your default event here\n            _$interval.cancel(timer_auto);\n            _$interval.cancel(process_bar_timer);\n        });\n\n\n        //real-time-graph\n        element.find(\"#real_time_graph_\" + attrs.id).on('shown.bs.modal', function() {\n\n            var tempConifg = {\n                drawGapEdgePoints: true,\n                'pointSize': 3,\n                labelsKMB: true,\n                labelsSeparateLines: false,\n                drawPoints: false,\n                drawAxesAtZero: false,\n                labelsDivStyles: {\n                    'text-align': 'right',\n                    'position': 'relative',\n                    'display': 'inline-block'\n                },\n                // x label y label\n                ylabel: 'Value',\n                xlabel: 'Date',\n                colors: scope.defaultColors,\n                // multiple Y axis\n                series: {\n                    'Device0': {\n                        axis: 'y2'\n                    },\n                    'Device4': {\n                        axis: 'y2'\n                    }\n                },\n                // showRangeSelector: true,\n                axes: {\n                    y: {\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    y2: {\n                        // set axis-related properties here\n                        'labelsKMB': true,\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    x: {\n                        // datetime format\n                        valueFormatter: function(y) {\n                            return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                        }\n                    }\n                },\n                interactionModel: {}\n            };\n\n            scope.realTimeGraph = new Dygraph(element.find(\"div[class='real-time-graph']\")[0], sampleData.data, tempConifg);\n            scope.realTimeGraph.updateOptions(scope.currentChartOptions);\n            scope.realTimeGraph.updateOptions({\n                \"file\": []\n            });\n\n            timer_auto = dataService.autoUpdateGraph(scope.applicationName, scope.auto_device_name, scope.auto_schema, scope.auto_store, scope.auto_fields, element.find(\"div[class='real-time-graph']\").width() / 4, function(graph_data, worker, interval) {\n                // update graph\n                var deviceConfig = scope.auto_metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{\n                    min: null,\n                    max: null\n                }, {\n                    min: null,\n                    max: null\n                }];\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == scope.auto_store) {\n                        angular$1.forEach(graph_data.data, function(line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        var showY2axis = false;\n                        angular$1.forEach(collection.rows, function(row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[row.label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular$1.forEach(allLines, function(realLine) {\n                                try {\n                                    var value = f(graph_data.data[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.min) * 0.10;\n                            } else {\n                                yrange.min = yrange.min - (yrange.max - yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max - yrange.min) * 0.10;\n                            }\n                        });\n\n                        var newLines = [];\n                        if (!showY2axis) {\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(NaN);\n                            });\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: newLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        } else {\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: allLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                if (worker) {\n                    timer_auto = worker;\n                }\n\n\n                //\n                var perInterval = interval / 100;\n                var counter = 0;\n\n                if (process_bar_timer) {\n                    _$interval.cancel(process_bar_timer);\n                    counter = 0;\n                }\n\n                process_bar_timer = _$interval(function() {\n                    scope.completionPercent = counter;\n                    counter++;\n                }, perInterval, 100);\n\n\n            });\n        });\n\n\n        scope.currentChartOptions = {};\n\n        scope.showRealTimeGraph = function() {\n            element.find(\"#real_time_graph_\" + attrs.id).modal();\n        };\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                    xAxisHeight: 0,\n                    axes: {\n                        x: {\n                            drawAxis: false\n                        }\n                    },\n                    showRangeSelector: true,\n                    rangeSelectorHeight: 30\n                });\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function(event) {\n                status = false;\n                timeOut(function() {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {\n                        begin: finalDateRagne[0],\n                        end: finalDateRagne[1]\n                    };\n                });\n            });\n\n            scope.$on('mouseUpMessage', function($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function() {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {\n                            begin: finalDateRange[0],\n                            end: finalDateRange[1]\n                        };\n                    });\n                }\n            });\n\n            scope.$on('parentScatterViewChangedEvent', function (event, params) {\n                    angular$1.forEach(params.children, function(item) {\n                        if(item == attrs.id){\n                            scope.currentView = params.view;\n                        }\n                    });\n            });\n\n\n            scope.$on('bindFatherGraphEvent', function(event, data) {\n                angular$1.forEach(data.children, function(child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function(g, isInit) {\n                                // console.info(\"refersh running!\" + \" is  Init?\"+ isInit);\n                                scope.refersh(g, isInit);\n                            }\n                        });\n\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function(event) {\n                if (status) {\n                    timeOut(function() {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function(event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {\n                    'graphs': [scope.currentChart],\n                    children: basicInfo.childrenChart\n                };\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope, $stateParams,graphDataService) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n    $scope.applicationName = $rootScope.applicationName;\n\n    $scope.alertMessage;\n\n    $scope.showY2Btns = false;\n\n    $scope.legendText = null;\n    $scope.legendText_device = null;\n    $scope.legendText_datetime = null;\n    $scope.legendText_column = null;\n    $scope.legendText_value = null;\n    $scope.legendColor = null;\n    $scope.autoupdate = false;\n    $scope.auto_device_name = \"\";\n    $scope.auto_schema = \"\";\n    $scope.auto_store = \"\";\n    $scope.auto_fields = [];\n    // default data-time intervals\n    $scope.dateTimeIntervals = [{\n        name: \"5 minutes\",\n        interval: 300000\n    }, {\n        name: \"1 hour\",\n        interval: 3600000\n    }, {\n        name: \"1 day\",\n        interval: 86400000\n    }, {\n        name: \"1 week\",\n        interval: 604800017\n    }, {\n        name: \"1 month\",\n        interval: 2629800000\n    }, {\n        name: \"1 year\",\n        interval: 31557600000\n    }];\n\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id,\n        callback: function(data) {\n            if (data) {\n                widgetData = data;\n                if (widgetData.data.metadata.data.basic.ranges) {\n                    if (widgetData.data.metadata.data.basic.hasOwnProperty(\"ranges\")) {\n                        $scope.dateTimeIntervals = widgetData.data.metadata.data.basic.ranges;\n                        angular$1.forEach($scope.dateTimeIntervals, function(range) {\n                            range[\"interval\"] = range.value;\n                            if (range.checked == true) {\n                                $scope.currentIntervalChoosed = range;\n                            }\n                        });\n                    }\n                } else {\n                    $scope.currentIntervalChoosed = $scope.dateTimeIntervals[1];\n                }\n            }\n        }\n    });\n\n\n    $scope.changeInterval = function(interval) {\n\n        var range = $scope.currentChart[\"xAxisZoomRange\"];\n\n        if (range[0] instanceof Date) {\n            range[0] = range[0].getTime();\n        }\n\n        if (range[1] instanceof Date) {\n            range[1] = range[1].getTime();\n        }\n\n        if (interval && ((range[1] - interval.interval) >= range[0])) {\n            $scope.rangeConfig.dateWindow = [new Date(range[1] - interval.interval), range[1]];\n            $scope.currentChart.updateOptions($scope.rangeConfig);\n            $scope.currentIntervalChoosed = interval;\n        }\n    };\n\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {\n            device: []\n        };\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n        // get start and end from url\n        var begin_path = $stateParams.begin;\n        var end_path = $stateParams.end;\n        var init_flag = false;\n\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function() {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n\n        $scope.showOrHideDevice = function(device) {\n            angular$1.forEach($scope.childrenDevices, function(item, index) {\n                if (item.name === device.name) {\n                    var graph = $scope.currentChart;\n\n                    if (device.show == true) {\n                        graph.setVisibility(index, false);\n                        device.show = false;\n                    } else {\n                        graph.setVisibility(index, true);\n                        device.show = true;\n                    }\n\n                }\n            });\n        };\n\n        $scope.fixGraphWithGap_click = function() {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.checkY2Btns = function() {\n            return $scope.basicInfo.zoom === true && $scope.showY2Btns === true;\n        };\n\n        $scope.$on('deviceInfoEvent', function(event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.auto_schema = metadata.data.source.store;\n            $scope.auto_metadata = metadata;\n            $scope.auto_device_name = deviceData.device.name;\n\n            $scope.$watch('currentView', function(nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    $scope.$emit('graphScatterViewChangeEvent', {children: $scope.basicInfo.childrenChart, view:nObj});\n                    if (nObj == -1) {\n                        $scope.autoupdate = true;\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                            angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === rangeLevel) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column.startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n                            $scope.auto_fields = fields;\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                                initChart(data,deviceData.device.name);\n                            }, function(error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        $scope.autoupdate = false;\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === rangeLevel) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if (column.startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                // show children view\n                                dataService.childrenDeviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, rangeLevel, otherLevels, fields).then(function(data) {\n                                    // get all device trees\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                    } else {\n                                        return;\n                                    }\n\n                                }, function(error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n            // first time of showing chart\n            $scope.$watch('currentChart', function(newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n\n                    // fields of range level\n                    var fields = [];\n                    var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0 && level.name === rangeLevel) {\n                            var lines = level.rows;\n                            if (lines) {\n                                angular$1.forEach(lines, function(line) {\n                                    //\n                                    if (line.value) {\n                                        var columns = (line.value).match(patt);\n                                        angular$1.forEach(columns, function(column) {\n                                            if ((column).startsWith('data.')) {\n                                                fields.push(column.replace('data.', ''));\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    $scope.auto_fields = fields;\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                        initChart(data,deviceData.device.name);\n                    }, function(error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function(newValue, oldValue) {\n                if (newValue.begin != null && newValue.end != null) {\n                    var expect_points = Math.floor($element.parent().width() / 2);\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    var conf = $scope.intevals.device;\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                        $scope.autoupdate = false;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n\n\n                        if ($scope.currentView == -1) {\n                            $scope.autoupdate = true;\n                            $scope.auto_store = conf[conf.length - 1].name;\n                        }\n\n\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                        $scope.autoupdate = false;\n                    }\n\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function(config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n\n                    // check the interval(raw data) no more than 1000 points\n                    if (expectedInterval == lastOne) {\n                        //\n                        if (((newValue.end - newValue.begin) / expectedInterval) > expect_points) {\n                            // reset range bar\n                            $scope.rangeConfig.dateWindow = [new Date(newValue.end - (expect_points - 1) * expectedInterval), new Date(newValue.end)];\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n\n                            $scope.alertMessage = \"Limit the number of \\\"Zoom-Out\\\" points to \" + expect_points * 2 + \".\";\n                            $timeout(function() {\n                                $scope.alertMessage = null;\n                            }, 5000);\n\n                            return;\n                        }\n\n                    }\n\n                    // update range-bar\n                    if ($scope.rangeSelectorBar) {\n                        angular$1.forEach($scope.trees, function(tree) {\n                            if (tree.range == true) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === tree.store) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields).then(function(data) {\n                                        // udpate chart\n                                        var showData = data;\n                                        showData = showData.filter(function(obj) {\n                                            return obj != null;\n                                        });\n\n                                        // update range bar\n                                        var basicInfo = $scope.basicInfo;\n                                        var allLines = [];\n                                        angular$1.forEach(showData, function(line) {\n                                            allLines.push([new Date(line.timestamp)]);\n                                        });\n                                        var series_range = {\n                                            'l0': {\n                                                axis: 'y1'\n                                            }\n                                        };\n\n                                        var rangeBarLabels = [];\n                                        for (var i = 0; i < fields.length; i++) {\n                                            rangeBarLabels.push(fields[i]);\n\n                                            var f = new Function(\"data\", \"with(data) { if(data.\" + fields[i] + \"!=null)return data.\" + fields[i] + \";return null;}\");\n                                            // add value\n                                            var counter = 0;\n                                            angular$1.forEach(allLines, function(realLine) {\n                                                try {\n                                                    var value = f(showData[counter]);\n                                                    realLine.push(value);\n                                                } catch (ex) {\n                                                    realLine.push(null);\n                                                }\n                                                counter++;\n                                            });\n                                        }\n                                        //\n\n                                        if ($scope.rangeConfig && $scope.rangeConfig.file && $scope.rangeConfig.file != null) {\n                                            var objNeed2Add = [];\n                                            angular$1.forEach($scope.rangeConfig.file, function(item) {\n                                                var flag = false;\n                                                var dataLength = -1;\n                                                angular$1.forEach(allLines, function(line) {\n                                                    dataLength = line.length;\n                                                    if (line.length > 0 && line[0].getTime() === item[0].getTime()) {\n                                                        flag = true;\n                                                    } else if (line.length === 0) {\n                                                        flag = true;\n                                                    } else {\n                                                        dataLength = line.length;\n                                                    }\n\n                                                });\n                                                if (!flag) {\n                                                    var tempObj = [];\n                                                    for (var i = 0; i < dataLength; i++) {\n                                                        tempObj[i] = item[i];\n                                                    }\n                                                    objNeed2Add.push(tempObj);\n                                                }\n                                            });\n                                        }\n                                        allLines = allLines.concat(objNeed2Add);\n                                        allLines.sort(function(a, b) {\n                                            return a[0] > b[0] ? 1 : -1;\n                                        });\n                                        if ($scope.showY2Btns) {\n                                            //noinspection JSDuplicatedDeclaration\n                                            if (!$scope.rangeConfig.axes.hasOwnProperty(\"y2\")) {\n                                                series_range = {\n                                                    'l0': {\n                                                        axis: 'y1'\n                                                    },\n                                                    'l0': {\n                                                        axis: 'y2'\n                                                    }\n                                                };\n                                                $scope.rangeSeries = series_range;\n                                                $scope.rangeConfig = {\n                                                    'file': allLines,\n                                                    'labels': ['x'].concat(rangeBarLabels),\n                                                    'series': series_range\n                                                };\n                                                if (basicInfo && basicInfo.range_show) {\n                                                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                                }\n                                            }\n\n                                        } else {\n                                            series_range[\"span_y2\"] = {\n                                                axis: 'y2'\n                                            };\n                                            $scope.rangeSeries = series_range;\n                                            var newLines = [];\n                                            angular$1.copy(allLines, newLines);\n                                            angular$1.forEach(newLines, function(line) {\n                                                line.push(NaN);\n                                            });\n                                            $scope.rangeConfig = {\n                                                'file': newLines,\n                                                'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                                'series': series_range\n                                            };\n                                            if (basicInfo && basicInfo.range_show) {\n                                                $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                            }\n                                        }\n                                    },\n                                    function(data) {\n                                        console.info(data);\n                                    }\n                                );\n                            }\n                        });\n                    }\n\n\n                    $scope.loadingShow = true;\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        if (expectedInterval == conf[0].interval) {\n                            $scope.currentChart.updateOptions({\n                                dateWindow: $scope.chartDateWindow\n                            });\n                            $scope.loadingShow = false;\n                        } else {\n                            $scope.legendText = null;\n                            var deviceInfo = [];\n                            var currentStore = \"\";\n\n                            $scope.childrenDevices = [];\n\n                            // has problem....\n                            angular$1.forEach($scope.childTrees, function(device) {\n                                angular$1.forEach(device.trees, function(tree, index) {\n                                    if (expectedInterval == tree.frequency && index != 0) {\n                                        currentStore = tree.store;\n                                        deviceInfo.push({\n                                            name: device.name,\n                                            tree: tree.tree\n                                        });\n                                        device[\"show\"] = true;\n                                        $scope.childrenDevices.push(device);\n                                    }\n                                });\n                            });\n\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column && (column).startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n\n                            $scope.auto_fields = fields;\n                            dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields).then(function(data) {\n                                var showData = [];\n                                angular$1.forEach(data, function(arr, key) {\n                                    var deviceData = [].concat(arr);\n                                    showData.push({\n                                        device: key,\n                                        data: deviceData\n                                    });\n                                });\n                                //get configuration\n                                updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n\n                            }, function(data) {\n                                console.info(data);\n                            });\n                        }\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // cal tree\n                        angular$1.forEach($scope.trees, function(tree, index) {\n                            if (expectedInterval == tree.frequency) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields).then(function(data) {\n                                    // udpate chart\n                                    var showData = data;\n                                    showData = showData.filter(function(obj) {\n                                        return obj != null;\n                                    });\n                                    showData.sort(function(a, b) {\n                                        return a.timestamp > b.timestamp ? 1 : -1;\n                                    });\n                                    //get configuration\n                                    updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                    // tell some other widgets, the graph is changed.\n                                    $timeout(function() {\n                                        $rootScope.$broadcast('chartDataChangeEvent', {\n                                            'id': element_id,\n                                            'group': 'device',\n                                            'data': {\n                                                'collection': tree.store,\n                                                'group': 'device',\n                                                'data': showData\n                                            }\n                                        });\n                                    });\n\n                                }, function(data) {\n                                    console.info(data);\n                                });\n                            }\n                        });\n\n                        $scope.fixGraphWithGap();\n                    }\n                    $scope.status = false;\n                }\n            });\n\n        });\n\n\n        var fetchData = function(values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                if (node.data != null && node.data.array) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                } else if (node.data != null) {\n                    Array.prototype.push.apply(values, node.data.slice(0, node.data.length));\n                }\n\n            }\n\n        };\n\n\n        $scope.trees = [];\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function(data, deviceName) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function(tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({\n                    name: tree.store,\n                    interval: tree.frequency\n                });\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            // fetchData(allData, rangeTree.tree);only get first and last\n            // fix the problem of never seen the current data.\n            rangeTree.last.timestamp = rangeTree.last.timestamp + (rangeTree.frequency - 1);\n            allData = allData.concat([rangeTree.first, rangeTree.last]);\n\n            allData = allData.filter(function(obj) {\n                return obj != null;\n            });\n\n            allData.sort(function(a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({\n                    timestamp: timestamp - currentInterval\n                });\n                Array.prototype.push.apply(newData, allData);\n                newData.push({\n                    timestamp: timestamp + currentInterval\n                });\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // put the data into range tree cache\n            if(rangeTree){\n                //\n                graphDataService.put(deviceName+\"/\"+rangeTree.store,[rangeTree.first,rangeTree.last]);\n            }\n            // get configuration and make real data\n            updateChart(metadata, store, allData, rangeTree);\n        };\n\n        var initChildrenChart = function(deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            $scope.childrenDevices = [];\n\n            angular$1.forEach(deviceDatas, function(deviceData) {\n                var device = deviceData.device;\n                device[\"show\"] = true;\n                $scope.childrenDevices.push(device);\n                var trees = deviceData.trees;\n                $scope.childTrees.push({\n                    name: device.name,\n                    trees: trees\n                });\n                var rangeTree = null;\n                angular$1.forEach(trees, function(tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function(interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({\n                            name: tree.store,\n                            interval: tree.frequency\n                        });\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [];\n                    fetchData(allData, rangeTree.tree);\n                    allData = allData.filter(function(obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function(a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n\n            });\n\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n\n        var updateChildrenChart = function(metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function(device, key) {\n                angular$1.forEach(device.data, function(item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function(label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n\n\n                });\n            });\n            // order\n            allXLabels.sort(function(a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function(label) {\n                allLines.push([label]);\n            });\n\n\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function(device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        labels.push(key);\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function(realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function(odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            //update chart\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'labelsKMB': true,\n                        'file': allLines,\n                        legend: 'never',\n                        labelsKMB: true,\n                        labelsSeparateLines: false,\n                        // data formate\n                        labels: ['x'].concat(sampleData.labels),\n                        highlightSeriesOpts: {\n                            strokeWidth: 2,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 2\n                        },\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        highlightCallback: function(e, x, pts, row, seriesName) {\n                            var sn = \"\";\n                            angular$1.forEach(series, function(value, name, item) {\n                                if (value.axis === \"y1\") {\n                                    sn = name;\n                                }\n                            });\n                            var point_show = {\n                                x: 0,\n                                y: 0\n                            };\n                            angular$1.forEach(pts, function(item, index) {\n                                if (item.name === seriesName) {\n                                    $scope.legendText = seriesName;\n                                    $scope.legendColor = colors[index];\n                                    // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                    $scope.legendText_device = seriesName;\n                                    $scope.legendText_datetime = moment(item.xval).format('l HH:mm:ss');\n                                    $scope.legendText_column = sn;\n                                    $scope.legendText_value = item.yval;\n                                    angular$1.forEach(pts, function(point) {\n                                        if (point.name === seriesName) {\n                                            point_show.y = point.canvasy + 30;\n                                            point_show.x = point.canvasx + 30;\n                                        }\n                                    });\n                                }\n                            });\n                            var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n\n                            $scope.$apply(function() {\n                                $scope.legendTop = point_show.y;\n                                $scope.legendLeft = point_show.x;\n                            });\n\n                        },\n\n                        unhighlightCallback: function(e) {\n                            $scope.$apply(function() {\n                                $scope.legendText = null;\n                                $scope.legendText_device = null;\n                                $scope.legendText_datetime = null;\n                                $scope.legendText_column = null;\n                                $scope.legendText_value = null;\n                            });\n                        },\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max],\n                                axisLabelWidth: 80\n                            },\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    $scope.showY2Btns = false;\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function(line) {\n                        line.push(NaN);\n                    });\n                    series[\"span_y2\"] = {\n                        'axis': 'y2'\n                    };\n                    $scope.childrenRangeConfig = {\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'legend': 'never',\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labelsSeparateLines': false,\n                        'highlightSeriesOpts': {\n                            strokeWidth: 2,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 2\n                        },\n                        highlightCallback: function(e, x, pts, row, seriesName) {\n                            var sn = \"\";\n                            angular$1.forEach(series, function(value, name, item) {\n                                if (value.axis === \"y1\") {\n                                    sn = name;\n                                }\n                            });\n                            var point_show = {\n                                x: 0,\n                                y: 0\n                            };\n                            angular$1.forEach(pts, function(item, index) {\n                                if (item.name === seriesName) {\n                                    $scope.legendText = seriesName;\n                                    $scope.legendColor = colors[index];\n                                    // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                    $scope.legendText_device = seriesName;\n                                    $scope.legendText_datetime = moment(item.xval).format('l HH:mm:ss');\n                                    $scope.legendText_column = sn;\n                                    $scope.legendText_value = item.yval;\n                                    angular$1.forEach(pts, function(point) {\n                                        if (point.name === seriesName) {\n                                            point_show.y = point.canvasy + 30;\n                                            point_show.x = point.canvasx + 30;\n                                        }\n                                    });\n                                }\n                            });\n                            var legendbox = angular$1.element(\"#legendbox\" + element_id);\n                            $scope.$apply(function() {\n                                $scope.legendTop = point_show.y;\n                                $scope.legendLeft = point_show.x;\n                            });\n                        },\n\n                        unhighlightCallback: function(e) {\n                            $scope.$apply(function() {\n                                $scope.legendText = null;\n                                $scope.legendText_device = null;\n                                $scope.legendText_datetime = null;\n                                $scope.legendText_column = null;\n                                $scope.legendText_value = null;\n                            });\n                        },\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max]\n                            },\n                            'y2': {\n                                axisLabelFormatter: function(d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                //\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n                //  keep the same time window and refersh\n                $scope.chartDateTime = {\n                    begin: $scope.chartDateTime.begin,\n                    end: $scope.chartDateTime.end\n                };\n                $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                $scope.loadingShow = false;\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function(metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function(device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function(collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                                $scope.showY2Btns = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function(data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: value\n                                    });\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: null\n                                    });\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function(item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({\n                                device: device.device,\n                                data: tempData\n                            });\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function(nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function(line) {\n                angular$1.forEach(chartData, function(timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(NaN);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n\n                    if (showY2axis) {\n\n                        $scope.currentChartOptions = {\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 2,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 2\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                        };\n\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 2,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 2\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        $scope.legendColor = colors[index];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        $scope.legendText_datetime = moment(item.xval).format('l HH:mm:ss');\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    $scope.legendLeft = point_show.x;\n                                });\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        $scope.showY2Btns = false;\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function(line) {\n                            line.push(NaN);\n                        });\n                        series[\"span_y2\"] = {\n                            axis: 'y2'\n                        };\n                        $scope.currentChartOptions = {\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 2,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 2\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            'highlightSeriesOpts': {\n                                strokeWidth: 2,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 2\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        $scope.legendColor = colors[index];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        $scope.legendText_datetime = moment(item.xval).format('l HH:mm:ss');\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    $scope.legendLeft = point_show.x;\n                                });\n\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n\n\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function(metadata, store, rangeData, allData) {\n\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function(yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n\n                    if (allLines.length == 0) {\n\n                        $scope.currentChart.updateOptions({\n                            'file': []\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n\n\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n\n                            if (showY2axis) {\n                                $scope.currentChartOptions = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n\n\n                            } else {\n\n                                var newLines = [];\n                                $scope.showY2Btns = false;\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(NaN);\n                                });\n\n                                series[\"span-Y2\"] = {\n                                    axis: 'y2'\n                                };\n\n\n                                $scope.currentChartOptions = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: null,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            }\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        $scope.autoUpdateChart = updateDetailChart;\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function(metadata, store, allData, rangeTree) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {\n                                'l0': {\n                                    axis: 'y1'\n                                }\n                            };\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {\n                                        axis: 'y1'\n                                    },\n                                    'l0': {\n                                        axis: 'y2'\n                                    }\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.showY2Btns = false;\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range\n                                });\n                                // save\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: null,\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {\n                                axis: 'y2'\n                            };\n                            $scope.showY2Btns = false;\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(NaN);\n                            });\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: null,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        axisLabelFormatter: function(d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n\n\n                        if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= allLines[0][0] && $scope.chartDateWindow[1] <= allLines[allLines.length - 1][0])) {\n                            // keep the current range bar refresh once.\n                            $scope.chartDateTime = {\n                                begin: $scope.chartDateTime.begin,\n                                end: $scope.chartDateTime.end\n                            };\n                            $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                        } else {\n\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            if (begin_path && end_path && !init_flag) {\n                                // $scope.chartDateTime = {\n                                // \"begin\": new Date(new Number(begin_path)),\n                                // \"end\": new Date(new Number(end_path))\n                                // };\n                                $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                init_flag = true;\n                            } else {\n                                if ($scope.currentIntervalChoosed && ((allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= allLines[0][0].getTime())) {\n                                    $scope.rangeConfig.dateWindow = [new Date(allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), allLines[allLines.length - 1][0]];\n                                } else {\n                                    $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                    $scope.rangeConfig.dateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                }\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                        }\n\n\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n        $scope.chartDateTime = {\n            begin: null,\n            end: null\n        };\n\n        // function for show one\n        $scope.showOne = function(deviceName) {\n\n            if ($rootScope['standalone'] && $rootScope['standalone'] == true) {\n                return false;\n            }\n\n\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n\n        var btntimer = null;\n\n\n        $scope.btnZoomInVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomInVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVULeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVDLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVURight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVDRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        // functions for buttons\n        $scope.btnpanleft = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[0] - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0] - pan_delta;\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[1] - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1] - pan_delta;\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnpanright = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = $scope.chartDateWindow[0].getTime() + pan_delta;\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            } else {\n                if (($scope.chartDateWindow[0] + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = ($scope.chartDateWindow[0] + pan_delta);\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1].getTime() + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            } else {\n                if (($scope.chartDateWindow[1] + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1] + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        $scope.btnzoomin = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            startDate = rangeStart + (delta * 2);\n            endDate = rangeEnd - (delta * 2);\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            //\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnzoomout = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            if ((rangeStart - (delta * 2)) > panRange[0]) {\n                startDate = rangeStart - (delta * 2);\n            } else {\n                startDate = panRange[0];\n            }\n\n            if ((rangeEnd + (delta * 2)) < panRange[1]) {\n                endDate = rangeEnd + (delta * 2);\n            } else {\n                endDate = panRange[1];\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        var timer = null;\n        $scope.refersh = function(g, init) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function() {\n                if (init || g.xAxisRange()[0] != $scope.chartDateTime.begin || g.xAxisRange()[1] != $scope.chartDateTime.end) {\n                    $scope.chartDateTime = {\n                        begin: g.xAxisRange()[0],\n                        end: g.xAxisRange()[1]\n                    };\n                    $scope.chartDateWindow = g.xAxisRange();\n                }\n            }, 600);\n        };\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph\n    .$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location', '$stateParams'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap', 'ui.router', 'angular-cache']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function() {\n        return function(input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .factory('$graphstorage', ['$window', function($window) {\n        return {\n            setTree: function(key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getTree: function(key) {\n                return JSON.parse($window.localStorage[key]) || false;\n            },\n            addTree: function(key, value) {\n                if ($window.localStorage[key]) {\n                    var trees = JSON.parse($window.localStorage[key]);\n                    trees.push(value);\n                    this.setTree(key, trees);\n                } else {\n                    this.setTree(key, [value]);\n                }\n            },\n            clear: function() {\n                $window.localStorage.clear();\n            }\n        }\n    }])\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function() {\n        return function(scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).config(function(CacheFactoryProvider) {\n        angular$1.extend(CacheFactoryProvider.defaults, {\n            maxAge: 30 * 60 * 1000, // half an hour\n            deleteOnExpire: 'aggressive',\n        });\n    }).service('graphDataService', function(CacheFactory) {\n        var graphCache = null;\n        if (!CacheFactory.get('graphCache')) {\n            graphCache = CacheFactory('graphCache',{\n                maxAge: 30 * 60 * 1000, // half an hour\n                deleteOnExpire: 'aggressive'\n            });\n        }\n        return {\n            get: function(name) {\n                return graphCache.get('/graph/'+name);\n            },\n            put: function(name, data) {\n                return graphCache.put('/graph/'+name, data);\n            }\n        };\n    })\n    .filter('tableformatter', ['$filter', function($filter) {\n        return function(input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}