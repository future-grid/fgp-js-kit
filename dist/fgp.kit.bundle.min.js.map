{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","jquery","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","standalone","interactions","drill","highlights","eventsHandler","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","findChild4Repeat","parentId","parentHtmlObj","arrayItems","newId","newScope","i","parent","currentItem","element","html_render","id","attr","repeat","find","append","findChild","$watch","newVal","oldVal","empty","$destroy","$new","$on","evt","msg","push","forEach","item","items","children","item_new","currentElement","groupItems","dulpItem","param","config","callback","metadata","data","datasource","style","key","from","sendDeviceData","graph","$broadcast","graphs","deviceInfo","then","device","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","graphDataService","$location","_$http","_$q","_$location","indexCache","deviceStores","_$interval","_$graphDataService","host","deviceKey","ip","port","protocol","indexOf","deferred","defer","url","httpServices","qServices","method","headers","Content-Type","success","type","types","resolve","extensionRequests","name","catch","info","console","warn","all","result","extensionItem","errors","reject","error","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","fields","get","params","concat","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","isSame","childrenExtensionInitInfo","extensionType","devicesExtensionInitInfo","devicesKey","promises","__http","fillChildrenTree","buckets","tree","showData","value","flag","fillTree","size","calTree","start","end","filter","elem","devicesStoreData","store","interval","start_point","Date","getTime","devices","index","$graphDataService","JSON","stringify","deviceGraphData","newComeResult","end_point","deviceStoreData","needLoad","timestamp","sort","a","b","put","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","autoUpdateGraph","schema","count","fetcher","last","trees","frequency","timeKey","graphData","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$stateParams","_dataService","dom_loading","dom_legend","dom_empty_data","dom_alert_info","dom_datetime_interval","dom_series_list","dom_real_time_grap","html","link","status","timeOut","completionPercent","graphId","getData","numSeries","numRows","labels","initDate","j","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","canScroll","timer","mouseOverHandler","e","cancel","mouseEnterHandler","mouseOutHandler","scroll","normal","WheelEvent","detail","deltaY","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","range_show","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","wheel","mousedown","mousemove","mouseenter","mouseup","mouseout","drawGapEdgePoints","pointSize","legend","labelsKMB","labelsSeparateLines","highlightSeriesOpts","strokeWidth","strokeBorderWidth","highlightCircleSize","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","timer_auto","process_bar_timer","on","tempConifg","realTimeGraph","currentChartOptions","file","auto_device_name","auto_schema","auto_store","auto_fields","graph_data","worker","deviceConfig","auto_metadata","groups","collections","allLines","yRanges","collection","line","showY2axis","rows","row","label","yaxis","f","Function","counter","realLine","ex","yrange","newLines","copy","perInterval","showRealTimeGraph","modal","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","finalDateRagne","chartDateTime","begin","finalDateRange","view","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","alertMessage","showY2Btns","legendText","legendText_device","legendText_datetime","legendText_column","legendText_value","legendColor","autoupdate","defaultTimeIntervals","scales","dateTimeIntervals","locked_interval","lock","currentIntervalName","currentIntervalChoosed","_item","changeInterval","basic","checked","rangeConfig","loadingShow","intevals","height","begin_path","end_path","init_flag","fixInterval","noneFixed","fixGraphWithGap","currentInterval","fixed","tempDate","obj","labels_","file_","showOrHideDevice","childrenDevices","setVisibility","fixGraphWithGap_click","parent_container","data_from","checkY2Btns","selectedDevices","singleClickEventHandler","_index","currentHighLightChildDevice","splice","onExternal","currentChildName","childrens","childrenDeviceNameColumn","_indexExternal","map","o","onGraph","$watchCollection","newValue","oldValue","timerInterval","$index","setSelection","deviceData","nObj","oObj","viewChangeListener","button_handlers","level","patt","RegExp","lines","columns","match","column","startsWith","initChart","relation","relationConfig","nameColumn","relation_group","initChildrenChart","interactionHandler","devices_key","extension_type","buttons","scatter","button","buttons_html","_func","toString","slice","childrenColors","substr","field","dataFilter","highlighting","hideAllOthers","hideOther","expect_points","expectedInterval","conf","preOne","lastOne","cin","limits","series_range","l0","rangeBarLabels","objNeed2Add","dataLength","tempObj","rangeSeries","points","connected","connectSeparatedPoints","currentStore","childTrees","_init","arr","devicesMatchData","updateChildrenDetailChart","rangeChildrenData","_device","updateDetailChart","rangeData","group","fetchData","values","node","array","Array","apply","ordinalRangeData","intevalforshow","rangeTree","allData","first","newData","thePoint","endOf","toDate","updateChart","deviceDatas","devicesInfo","merge","extension","deviceObj","updateChildrenChart","leftAndRight","left","leftYAxis","right","rightYAxis","allXLabels","yRange","originalData","odata","childrenRangeConfig","y2label","axisLabelFormatter","d","Number","newTime","tempData","tempTime","dateTime","chartData","nt","timeTicket","lineData","highlightCallback","pts","seriesName","maxWidth","offsetWidth","sn","point_show","colorIndex","legendText_device_name","tz","guess","xval","yval","point","canvasy","canvasx","legendbox","$apply","legendTop","legendLeft","unhighlightCallback","autoUpdateChart","rangeSeriesNumber","drillDown","open","lastIndexOf","btntimer","btnZoomInVLeft","btnZoomOutVLeft","btnZoomInVRight","btnZoomOutVRight","btnPanVULeft","btnPanVDLeft","btnPanVURight","btnPanVDRight","btnpanleft","panRange","pan_delta","startDate","endDate","btnpanright","btnzoomin","rangeStart","rangeEnd","btnzoomout","init","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","shown","split","healthinfo","action","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$websocket","labelstyle","listStyle","deviceType","dataStream","onMessage","message","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","itemIndex","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","formatter","record","cleanData","service","input","substring","setTree","localStorage","getTree","addTree","clear","directive","$last","CacheFactoryProvider","extend","defaults","maxAge","deleteOnExpire","CacheFactory","graphCache"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,jquery,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\",\n        standalone: \"=\",\n        interactions: \"=\",\n        drill: \"=\",\n        highlights: \"=\",\n        eventsHandler: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n    $rootScope['standalone'] = $scope.standalone;\n\n\n    var graphBindingArray = [];\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId, newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                newScope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    newScope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems, newScope);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems, newScope);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems, newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems, newScope);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems, newScope);\n            }\n        }\n    }\n\n    var newScope = null;\n    $scope.$watch('deviceName', function(newVal, oldVal) {\n        if (newVal) {\n            $element.empty();\n            if (newScope) {\n                newScope.$destroy();\n            }\n            newScope = $rootScope.$new(true);\n            newScope[\"showdata\"] = {};\n\n            newScope.$on('bindChildChartEvent', function(evt, msg) {\n                graphBindingArray.push(msg);\n            });\n\n            newScope[\"interactions\"] = $scope.interactions;\n            newScope[\"drill\"] = $scope.drill;\n            newScope[\"highlights\"] = $scope.highlights;\n            newScope[\"eventsHandler\"] = $scope.eventsHandler;\n\n            newScope.$on('bindChildRepeatEvent', function(evt, msg) {\n                angular$1.forEach($scope.configuration, function(item) {\n                    if (item.id == msg.id) {\n                        var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                        angular$1.forEach(items, function(item_new) {\n                            newScope.showdata[item_new.id] = item;\n                            var currentElement = angular$1.element(item_new);\n                            if (currentElement.attr(\"dulp\")) {\n                                var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                                angular$1.forEach(groupItems, function(dulpItem) {\n                                    findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id, newScope);\n                                });\n                            } else {\n                                findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id, newScope);\n                            }\n                        });\n                    }\n                });\n            });\n\n            newScope.$on('listStyleEvent', function(evt, param) {\n                var config = newScope.showdata[param.id.replace(\"edit\", \"\")];\n                param.callback(config.metadata.data.datasource.style);\n            });\n\n\n            newScope.$on('fetchWidgetMetadataEvent', function(evt, msg) {\n                angular$1.forEach(newScope.showdata, function(metadata, key) {\n                    if (key == msg.id) {\n                        msg.callback({\n                            data: metadata,\n                            from: 'show'\n                        });\n                        return;\n                    }\n                });\n            });\n\n            // refersh\n            angular$1.forEach($scope.configuration, function(item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    newScope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)(newScope));\n                    findChild(item.id, currentItem, $scope.configuration, newScope);\n                }\n            });\n            /**\n             * get device information\n             */\n            if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n                // first time\n                sendDeviceData(newScope);\n            }\n            // all item created;\n            $timeout(function() {\n                angular$1.forEach(graphBindingArray, function(graph) {\n                    newScope.$broadcast('bindFatherGraphEvent', {\n                        parent: graph.graphs,\n                        children: graph.children\n                    });\n                });\n            });\n        }\n    });\n\n\n    var sendDeviceData = function(newScope) {\n        dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function(data) {\n            // send device info to all widget\n            $timeout(function() {\n                newScope.$broadcast('deviceInfoEvent', {\n                    device: data,\n                    from: 'application'\n                });\n            });\n        });\n    };\n};\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService, $location) {\n    this._$http = $http;\n    this._$q = $q;\n    this._$location = $location;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n    this._$interval = $interval;\n    this._$graphDataService = graphDataService;\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n\n    var deferred = this._$q.defer();\n    var url = host + \"/rest/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices?key=' + deviceKey;\n    }\n\n    var httpServices = this._$http;\n    var qServices = this._$q;\n\n    httpServices({\n        method: 'GET',\n        url: url,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).success(function(data) {\n        var url = host + \"/rest/api/\";\n        if (applicationName) {\n            url += \"app/\" + applicationName + \"/devices/extension-types?device_type=\";\n        } else {\n            url += \"devices/extension-types?device_type=\";\n        }\n        //get all extension types\n        httpServices({\n            method: 'GET',\n            url: url + data.type,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).success(function(types) {\n\n            if (!types || types.length == 0) {\n                deferred.resolve(data);\n            } else {\n                var extensionRequests = [];\n                var url = host + \"/rest/api/\";\n                if (applicationName) {\n                    url += \"app/\" + applicationName + \"/devices/extensions?device_name=\";\n                } else {\n                    url += \"devices/extensions?device_name=\";\n                }\n                angular$1.forEach(types, function(type) {\n                    // extension types\n                    extensionRequests.push(\n                        httpServices({\n                            method: 'GET',\n                            url: url + deviceName + '&extension_type=' + type.name,\n                            headers: {\n                                'Content-Type': 'application/json'\n                            }\n                        }).catch(function(info) {\n                            console.warn(info);\n                        })\n                    );\n                });\n\n                qServices.all(extensionRequests).then(function(result) {\n                    result.forEach(function(extensionItem) {\n                        if (extensionItem && extensionItem.data) {\n                            data[extensionItem.data.type.name] = extensionItem.data;\n                        }\n                    });\n                    deferred.resolve(data);\n                }, function(errors) {\n                    deferred.reject(error);\n                });\n            }\n        }).error(function(error) {\n            deferred.reject(error);\n        });\n\n    }).error(function(error) {\n        deferred.reject(error);\n    });\n\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels, fields) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            'otherLevels': otherLevels,\n            'fields': [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels, fields) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenExtensionInitInfo = function childrenExtensionInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, extensionType, rangeLevel, otherLevels, fields) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.devicesExtensionInitInfo = function devicesExtensionInitInfo (host, application, devicesKey, storeSchema, extensionType, rangeLevel, otherLevels, fields) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n    var result = {};\n    var promises = [];\n    var __http = this._$http;\n    angular$1.forEach(devicesKey, function(deviceKey) {\n        if (deviceKey != null) {\n            var promise = __http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n                params: {\n                    otherLevels: otherLevels,\n                    fields: [].concat(fields),\n                    isSame: true\n                },\n                cache: this.deviceStores\n            }).then(\n                function(response) {\n                    return response.data;\n                },\n                function(response) {\n                    console.error(response.data);\n                }\n            );\n            promises.push(promise);\n        }\n    });\n    // call $q.all on the other side\n    return promises;\n};\n\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value;\n                tree['size'] = value.length;\n\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.length;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id) {\n                tree.data = value;\n                tree['size'] = value.size;\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        data['size'] = tree.size;\n                        flag = true;\n                    }\n                });\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end) ||\n            ((start > tree.start) && start <= tree.end) ||\n            ((tree.start >= start) && tree.start < end) ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function(elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (id, host, application, deviceInfo, storeSchema, store, start, end, fields, interval) {\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n\n    var start_point = new Date().getTime();\n    if (!deviceInfo || deviceInfo.length == 0) {\n        return false;\n    }\n\n    var devices = \"[\";\n\n    deviceInfo.forEach(function(device, index) {\n        if (index < deviceInfo.length - 1) {\n            devices += \"\\\"\" + device.name + \"\\\",\";\n        } else {\n            devices += \"\\\"\" + device.name + \"\\\"]\";\n        }\n    });\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end // TODO: change it to post\n    this._$http({\n        method: 'POST',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store,\n        data: {\n            \"devices\": devices,\n            \"fields\": JSON.stringify(fields),\n            \"start\": start,\n            \"end\": end\n        }\n    }).then(\n        function(response) {\n            var result = {};\n            var data = response.data;\n            for (key in data) {\n                var deviceGraphData = $graphDataService.get(key + \"/\" + store + \"/\" + id) ? $graphDataService.get(key + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = data[key].data;\n                // TODO: make all the lines in same x-axis timeseries\n                result[key] = newComeResult;\n            }\n            var end_point = new Date().getTime();\n            console.info((end_point - start_point) / 1000 + \"s\");\n            deferred.resolve(result);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (id, host, application, deviceKey, storeSchema, store, tree, start, end, fields, interval) {\n\n    var ip = this._$location.host();\n    var port = this._$location.port();\n    var protocol = this._$location.protocol();\n    if (!host || host.indexOf(\"http://localhost:8081\") != -1 || host == \"\") {\n        // change it to real sever host + port\n        host = protocol +\"://\"+ip+\":\"+port;\n    }\n\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    var needLoad = true;\n    if (!needLoad) {\n        // return data\n        deferred.resolve($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id));\n    } else {\n        // send request to back-end\n        this._$http({\n            method: 'GET',\n            url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=[\"' + deviceKey + '\"]&fields=' + JSON.stringify(fields) + '&start=' + start + '&end=' + end\n        }).then(\n            function(response) {\n                // only return 1 device data\n                var deviceGraphData = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) ? $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = response.data[deviceKey].data;\n                newComeResult.forEach(function(item) {\n                    var flag = false;\n                    for (var i = 0; i < deviceGraphData.length; i++) {\n                        if (deviceGraphData[i].timestamp == item.timestamp) {\n                            deviceGraphData[i] = item;\n                            flag = true;\n                        }\n                    }\n                    if (!flag) {\n                        // add\n                        deviceGraphData.push(item);\n                    }\n                });\n                // order by timestamp\n                deviceGraphData.sort(function(a, b) {\n                    if (a.timestamp > b.timestamp) {\n                        return 1;\n                    } else if (a.timestamp < b.timestamp) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                $graphDataService.put(deviceKey + \"/\" + store + \"/\" + id, deviceGraphData);\n                deferred.resolve(deviceGraphData);\n            },\n            function(response) {\n                deferred.reject(response.data);\n            }\n        );\n    }\n\n    return deferred.promise;\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) &&\n                    (lor.length == 6) ? lor : co(lor);\n            })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/rest/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function(response) {\n            console.info(response);\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.prototype.autoUpdateGraph = function autoUpdateGraph (application, device, schema, store, fields, count, callback) {\n    var _$interval = this._$interval;\n    var _$http = this._$http;\n    var fetcher = null;\n    this._$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n        .success(function(response) {\n            var last = -1;\n            var interval = -1;\n            if (response.trees && response.trees.length === 1) {\n                interval = response.trees[0].frequency;\n                last = response.trees[0].last.timeKey;\n            }\n            if (interval != -1) {\n                var start = last - (count * interval);\n                var end = last;\n                // first time\n                _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                    params: {\n                        \"devices\": JSON.stringify([device]),\n                        \"fields\": JSON.stringify(fields),\n                        \"start\": start,\n                        \"end\": end\n                    }\n                }).success(function(graphData) {\n\n                    // start task\n                    fetcher = _$interval(function() {\n                        _$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n                            .success(function(response) {\n                                if (response.trees && response.trees.length === 1) {\n                                    last = response.trees[0].last.timeKey;\n                                    start = last - (count * interval);\n                                    end = last;\n                                    _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                                        params: {\n                                            \"devices\": JSON.stringify([device]),\n                                            \"fields\": JSON.stringify(fields),\n                                            \"start\": start,\n                                            \"end\": end\n                                        }\n                                    }).success(function(graphData) {\n                                        // put the data back\n                                        callback(graphData[device], null, interval);\n                                    });\n                                }\n                            });\n                    }, interval);\n\n                    // put the data back\n                    callback(graphData[device], fetcher, interval);\n                });\n            }\n        });\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory, $interval, graphDataService, $location) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService, $location);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory', '$interval', 'graphDataService', '$location'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\",\n        highlights: \"=\",\n        eventsHandler:\"=\"\n    };\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:2px;margin-bottom:2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q) {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\",\n        highlights: \"=\",\n        eventsHandler: \"=\"\n    };\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n    this._$interval = $interval;\n    this._$q = $q;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_legend = '<li>{{legendText_device_name}}</li><li>{{legendText_datetime}}</li><li><label style=\"color: {{legendColor}}\">{{legendText_column}}</label>:{{legendText_value}}</li>';\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        var dom_alert_info = '<span class=\"label label-warning\" ng-show=\"alertMessage\" style=\"color: #000;\">{{alertMessage}}</span>';\n\n        var dom_datetime_interval = '<div ng-show=\"rangeSelectorBar\" class=\"dropdown\"> <button class=\"btn btn-info dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">{{currentIntervalChoosed.name}}<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"interval in dateTimeIntervals\"><a href=\"javascript:;\" ng-click=\"changeInterval(interval)\">{{interval.name}}</a></li></ul> </div>';\n\n\n        var dom_series_list = '<div ng-show=\"currentView === 1\" class=\"dropdown\"> <button class=\"btn btn-warning dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">Devices<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;height:auto;max-height:300px;overflow-x:hidden;\"><li ng-repeat=\"device in childrenDevices\"><input type=\"checkbox\" ng-click=\"showOrHideDevice(device)\" ng-checked=\"device.show\"/>{{device[childrenDeviceNameColumn]}}</li></ul> </div>';\n\n\n        var dom_real_time_grap = '<div class=\"modal fade \" id=\"real_time_graph_' + attrs.id + '\" role=\"dialog\">' +\n            '<div class=\"modal-dialog modal-lg\">' +\n            '<div class=\"modal-content\">' +\n            '<div class=\"col-md-12\"  style=\"padding-top:3px;height: 1px;background-color: #0e90d2;\" ng-style=\"{ \\'width\\': completionPercent + \\'%\\' }\"></div>' +\n            '<div class=\"modal-body\" style=\"width: 100%;height: 300px;\">' +\n            '<div class=\"real-time-graph\" style=\"width: 100%;height: 100%\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n\n        var html = '<div id=\"legendbox' + attrs.id + '\" ng-show=\"legendText\" ng-style=\"{top:legendTop,left:legendLeft}\" style=\"border-radius:10px;background-color:#ffffff;position: absolute;border: 1px solid {{legendColor}};-moz-box-shadow: 5px 5px 5px #888888;box-shadow: 5px 5px 5px #888888;z-index: 99999999;margin-right: 5px;\"><ul style=\"list-style: none;list-style-position: inside;text-align: right;\">' + dom_legend + '</ul></div><div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips btn btn-xs btn-info badge\" href=\"javascript:;\" ng-hide=\"interactions.graphs.btns.scatter == \\'hide\\'\"  style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><i class=\"glyphicon glyphicon-transfer\"></i><span>Scatter View</span></a><div id=\"buttons_area\" style=\"\"></div><a ng-show=\"autoupdate\" class=\"tooltips btn btn-xs btn-info badge\" style=\"float: right;margin-right: 10px;\" ng-click=\"showRealTimeGraph()\" data-toggle=\"modal\"><span>Auto Update</span><i class=\"glyphicon glyphicon-random\"></i></a><div style=\"float: right; margin-right: 10px;\">' + dom_series_list + '</div><div style=\"float: right; margin-right: 10px;\">' + dom_datetime_interval + '</div><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\"/>fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? (locked_interval.name == item.name ? \\'#e57432;\\':\\'#009900;\\') : (locked_interval.name == item.name ? \\'#e57432;\\':\\'\\') }}\" ng-click=\"lock(item)\">{{item.name}}</span></label></div><div style=\"float: right; margin-right: 10px;\">' + dom_alert_info + '</div></div></div><div style=\"position: relative;width: 100%;height:100%;\"><div style=\"position: absolute;left:25px;z-index: 999;\" ng-show=\"basicInfo.zoom\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVULeft()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDLeft()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVLeft()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVLeft()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div><div class=\"line-chart-graph\" style=\"width: 100%;height:100%;\" ng-dblclick=\"drillDown()\" ng-click=\"singleClickEventHandler()\"></div><div style=\"position: absolute;right:-15px;top:0px;z-index: 999;\" ng-show=\"checkY2Btns()\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVURight()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDRight()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVRight()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVRight()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" style=\"text-align: left;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[0] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[1] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;position: relative\"><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;left: 20px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanleft()\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanright()\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;width: 100%;position: absolute;\"></div><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;right: -5px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomin()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomout()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div></div></div>' + dom_real_time_grap;\n\n        return html;\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    var dataService = this._dataService;\n    var _$interval = this._$interval;\n    scope.status = true;\n    var timeOut = this.$timeout;\n    scope.completionPercent = 0;\n    scope.graphId = attrs.id;\n    this.$timeout(function() {\n        var getData = function(numSeries, numRows, name) {\n            var result = {\n                labels: null,\n                data: null\n            };\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n\n                    if(!zoomRange){\n                        return false;\n                    }\n\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)\n                        ];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function(range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n\n        var canScroll = false;\n\n        var timer = null;\n        var mouseOverHandler = function(e, g, context) {\n            //\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n\n        var mouseEnterHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n        var mouseOutHandler = function(e, g, context) {\n            // set flag to false\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            canScroll = false;\n        };\n\n        var scroll = function(e, g, context) {\n\n            if ((scope.basicInfo && !scope.basicInfo.zoom) || !canScroll) {\n                return;\n            }\n\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                if(scope.basicInfo && scope.basicInfo.range_show){\n                    zoom(g, percentage, xPct, yPct, 'h', null);\n                }\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function() {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function(e, g, context) {\n            if (context.isPanning) {\n                if (e.offsetX <= (g.plotter_.area.x)) {\n                    movePan(e, g, context, 'r');\n                } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(e, g, context, 'l');\n                } else {\n                    movePan(e, g, context, 'h');\n                }\n                timeOut(function() {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function(e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n\n            canScroll = true;\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'wheel': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseenter': mouseEnterHandler,\n            'mouseup': mouseupHandler,\n            // 'mouseover': mouseOverHandler,\n            'mouseout': mouseOutHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            legend: 'follow',\n            labelsKMB: true,\n            labelsSeparateLines: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            highlightSeriesOpts: {\n                strokeWidth: 3,\n                strokeBorderWidth: 1,\n                highlightCircleSize: 5\n            },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function(y) {\n                        return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function(e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function(g, isInit) {\n                if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                    scope.refersh(g, isInit);\n                }\n            },\n            'interactionModel': interactionModel\n        };\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n        //\n        // //create another Canvas\n        // var _canvas_selection = document.createElement(\"canvas\");\n        // // add it into dygraph\n        // scope.currentChart.graphDiv.appendChild(_canvas_selection);\n        // // resize\n        // var _width = scope.currentChart.width_;\n        // var _height = scope.currentChart.height_;\n        // _canvas_selection.width = _width;\n        // _canvas_selection.height = _height;\n        // _canvas_selection.style.width = _width + \"px\";// for IE\n        // _canvas_selection.style.height = _height + \"px\";  // for IE\n        //\n        //\n        // var drawKeyPermission = false;\n        // var drawMousePermission = false;\n        // _canvas_selection.addEventListener( \"keydown\", function(e){\n        // if(e.keyCode == 87){ //  W\n        //     drawKeyPermission = true;\n        // }\n        // }, false);\n        // _canvas_selection.addEventListener( \"keyUp\", function(e){\n        // drawMousePermission = false;\n        // }, false);\n        //\n        // _canvas_selection.addEventListener( \"mousedown\", function(){\n        // drawMousePermission = true;\n        // }, false);\n        //\n        //\n        //\n        //\n        //\n        // // add event\n        // // add functions for this canvas\n        // var selection_ctx = _canvas_selection.getContext(\"2d\"); // used for drewing rect\n        // // clear first\n        // ctx.clearRect(0, 0, _width, _height);\n        // ctx.strokeStyle = \"rgba(0, 0, 0,0.3)\"; // black\n\n\n\n\n\n\n\n        var timer_auto = null;\n        var process_bar_timer = null;\n        element.find(\"#real_time_graph_\" + attrs.id).on(\"hidden.bs.modal\", function() {\n            // put your default event here\n            _$interval.cancel(timer_auto);\n            _$interval.cancel(process_bar_timer);\n        });\n\n\n        //real-time-graph\n        element.find(\"#real_time_graph_\" + attrs.id).on('shown.bs.modal', function() {\n\n            var tempConifg = {\n                drawGapEdgePoints: true,\n                'pointSize': 3,\n                labelsKMB: true,\n                labelsSeparateLines: false,\n                drawPoints: false,\n                drawAxesAtZero: false,\n                labelsDivStyles: {\n                    'text-align': 'right',\n                    'position': 'relative',\n                    'display': 'inline-block'\n                },\n                // x label y label\n                ylabel: 'Value',\n                xlabel: 'Date',\n                colors: scope.defaultColors,\n                // multiple Y axis\n                series: {\n                    'Device0': {\n                        axis: 'y2'\n                    },\n                    'Device4': {\n                        axis: 'y2'\n                    }\n                },\n                // showRangeSelector: true,\n                axes: {\n                    y: {\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    y2: {\n                        // set axis-related properties here\n                        'labelsKMB': true,\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    x: {\n                        // datetime format\n                        valueFormatter: function(y) {\n                            return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                        }\n                    }\n                },\n                interactionModel: {}\n            };\n\n            scope.realTimeGraph = new Dygraph(element.find(\"div[class='real-time-graph']\")[0], sampleData.data, tempConifg);\n            scope.realTimeGraph.updateOptions(scope.currentChartOptions);\n            scope.realTimeGraph.updateOptions({\n                \"file\": [],\n                highlightSeriesOpts: {\n                    strokeWidth: 3,\n                    strokeBorderWidth: 1,\n                    highlightCircleSize: 5\n                },\n            });\n\n            timer_auto = dataService.autoUpdateGraph(scope.applicationName, scope.auto_device_name, scope.auto_schema, scope.auto_store, scope.auto_fields, element.find(\"div[class='real-time-graph']\").width() / 4, function(graph_data, worker, interval) {\n                // update graph\n                var deviceConfig = scope.auto_metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{\n                    min: null,\n                    max: null\n                }, {\n                    min: null,\n                    max: null\n                }];\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == scope.auto_store) {\n                        angular$1.forEach(graph_data.data, function(line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        var showY2axis = false;\n                        angular$1.forEach(collection.rows, function(row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n                            if (row.yaxis == 0) {\n                                series[row.label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[row.label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular$1.forEach(allLines, function(realLine) {\n                                try {\n                                    var value = f(graph_data.data[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n                        });\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.min) * 0.10;\n                            } else {\n                                yrange.min = yrange.min - (yrange.max - yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max - yrange.min) * 0.10;\n                            }\n                        });\n\n                        var newLines = [];\n                        if (!showY2axis) {\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: newLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        } else {\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: allLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                if (worker) {\n                    timer_auto = worker;\n                }\n                //\n                var perInterval = interval / 100;\n                var counter = 0;\n\n                if (process_bar_timer) {\n                    _$interval.cancel(process_bar_timer);\n                    counter = 0;\n                }\n                process_bar_timer = _$interval(function() {\n                    scope.completionPercent = counter;\n                    counter++;\n                }, perInterval, 100);\n            });\n        });\n        scope.currentChartOptions = {};\n        scope.showRealTimeGraph = function() {\n            element.find(\"#real_time_graph_\" + attrs.id).modal();\n        };\n        if (attrs.hasOwnProperty(\"shown\")) {\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                    xAxisHeight: 0,\n                    axes: {\n                        x: {\n                            drawAxis: false\n                        }\n                    },\n                    showRangeSelector: true,\n                    rangeSelectorHeight: 30\n                });\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function(event) {\n                status = false;\n                timeOut(function() {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {\n                        begin: finalDateRagne[0],\n                        end: finalDateRagne[1]\n                    };\n                });\n            });\n            scope.$on('mouseUpMessage', function($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function() {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {\n                            begin: finalDateRange[0],\n                            end: finalDateRange[1]\n                        };\n                    });\n                }\n            });\n            scope.$on('parentScatterViewChangedEvent', function(event, params) {\n                angular$1.forEach(params.children, function(item) {\n                    if (item == attrs.id) {\n                        scope.currentView = params.view;\n                    }\n                });\n            });\n            scope.$on('bindFatherGraphEvent', function(event, data) {\n                angular$1.forEach(data.children, function(child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function(g, isInit) {\n                                // console.info(\"refersh running!\" + \" is  Init?\"+ isInit);\n                                scope.refersh(g, isInit);\n                            }\n                        });\n                    }\n                });\n            });\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function(event) {\n                if (status) {\n                    timeOut(function() {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function(event) {\n                status = true;\n            });\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {\n                    'graphs': [scope.currentChart],\n                    children: basicInfo.childrenChart\n                };\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope, $stateParams, graphDataService, $compile, $q) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n    $scope.applicationName = $rootScope.applicationName;\n    $scope.alertMessage;\n    $scope.showY2Btns = false;\n    $scope.legendText = null;\n    $scope.legendText_device = null;\n    $scope.legendText_datetime = null;\n    $scope.legendText_column = null;\n    $scope.legendText_value = null;\n    $scope.legendColor = null;\n    $scope.autoupdate = false;\n    $scope.auto_device_name = \"\";\n    $scope.auto_schema = \"\";\n    $scope.auto_store = \"\";\n    $scope.auto_fields = [];\n    // default data-time intervals\n    $scope.defaultTimeIntervals = [{\n            name: \"10 seconds\",\n            interval: 10000\n        },\n        {\n            name: \"30 seconds\",\n            interval: 30000,\n            scales: [10000]\n        },\n        {\n            name: \"1 minutes\",\n            interval: 60000,\n            scales: [10000, 30000]\n        },\n        {\n            name: \"5 minutes\",\n            interval: 300000,\n            scales: [30000, 60000]\n        },\n        {\n            name: \"30 minutes\",\n            interval: 1800000,\n            scales: [60000, 300000]\n        }, {\n            name: \"1 hour\",\n            interval: 3600000,\n            scales: [60000, 300000, 1800000]\n        }, {\n            name: \"1 day\",\n            interval: 86400000,\n            scales: [300000, 1800000, 3600000]\n        }, {\n            name: \"1 week\",\n            interval: 604800017,\n            scales: [3600000, 86400000]\n        }, {\n            name: \"1 month\",\n            interval: 2629800000,\n            scales: [86400000, 604800017]\n        }, {\n            name: \"1 year\",\n            interval: 31557600000,\n            scales: [2629800000]\n        }\n    ];\n    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n    $scope.locked_interval = null;\n    // lock interval\n    $scope.lock = function(interval) {\n        if ($scope.locked_interval) {\n            if ($scope.locked_interval == interval) {\n                $scope.locked_interval = null; // unlocked\n                if (!$scope.dateTimeIntervals) {\n                    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n                }\n                // change default choosed interval\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            } else {\n                $scope.locked_interval = interval; // locked\n                // change color\n                // change dropdown list\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n                });\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            }\n        } else {\n            $scope.locked_interval = interval;\n            // change color\n\n            // change dropdown list\n            // check the user default config first\n            if ($scope.dateTimeIntervals) {\n\n            } else {\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n                });\n            }\n            $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n            $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n        }\n        // change\n        $scope.changeInterval($scope.currentIntervalChoosed);\n    };\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id,\n        callback: function(data) {\n            if (data) {\n                widgetData = data;\n                if (widgetData.data.metadata.data.basic.ranges) {\n                    if (widgetData.data.metadata.data.basic.hasOwnProperty(\"ranges\")) {\n                        $scope.dateTimeIntervals = widgetData.data.metadata.data.basic.ranges;\n                        angular$1.forEach($scope.dateTimeIntervals, function(range) {\n                            range[\"interval\"] = range.value;\n                            if (range.checked == true) {\n                                $scope.currentIntervalChoosed = range;\n                            }\n                        });\n                    }\n                } else {\n                    $scope.currentIntervalChoosed = $scope.dateTimeIntervals[1];\n                }\n            }\n        }\n    });\n    $scope.changeInterval = function(interval) {\n        var range = $scope.currentChart[\"xAxisZoomRange\"];\n        if (range[0] instanceof Date) {\n            range[0] = range[0].getTime();\n        }\n        if (range[1] instanceof Date) {\n            range[1] = range[1].getTime();\n        }\n        if (interval && ((range[1] - interval.interval) >= range[0])) {\n            $scope.rangeConfig.dateWindow = [new Date(range[1] - interval.interval), range[1]];\n            $scope.currentChart.updateOptions($scope.rangeConfig);\n            $scope.currentIntervalChoosed = interval;\n        }\n    };\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n        $scope.intevals = {\n            device: []\n        };\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n        // get start and end from url\n        var begin_path = $stateParams.begin;\n        var end_path = $stateParams.end;\n        var init_flag = false;\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function() {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n        };\n        $scope.showOrHideDevice = function(device) {\n            angular$1.forEach($scope.childrenDevices, function(item, index) {\n                if (item.name === device.name) {\n                    var graph = $scope.currentChart;\n                    if (device.show == true) {\n                        graph.setVisibility(index, false);\n                        device.show = false;\n                    } else {\n                        graph.setVisibility(index, true);\n                        device.show = true;\n                    }\n\n                }\n            });\n        };\n        $scope.fixGraphWithGap_click = function() {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n        };\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n        $scope.parent_container = widgetData.data.parent;\n        $scope.data_from = \"application\";\n        $scope.checkY2Btns = function() {\n            return $scope.basicInfo.zoom === true && $scope.showY2Btns === true;\n        };\n\n        $scope.selectedDevices = [];\n        $scope.singleClickEventHandler = function() {\n            // Add the highlight into a list and someone will use it....\n            // check before add\n            var _index = $scope.selectedDevices.indexOf($scope.currentHighLightChildDevice);\n            if (_index != -1) {\n                // remove it\n                $scope.selectedDevices.splice(_index, 1);\n            } else {\n                $scope.selectedDevices.push($scope.currentHighLightChildDevice);\n            }\n\n            // update the external array\n            if ($scope.highlights && $scope.highlights.onExternal) {\n                var currentChildName = \"\";\n                var childrens = $scope.childrenDevices;\n                $scope.childrenDevices.forEach(function(item) {\n                    if (item.name == $scope.currentHighLightChildDevice) {\n                        // give the name in customer's system(not fgp)\n                        currentChildName = (item[$scope.childrenDeviceNameColumn]);\n                    }\n                });\n                var _indexExternal = $scope.highlights.onExternal.map(function(o) {\n                    return o.name\n                }).indexOf(currentChildName);\n                if (_indexExternal != -1) {\n                    $scope.highlights.onExternal.splice(_indexExternal, 1);\n                } else {\n                    $scope.highlights.onExternal.push({\n                        name: currentChildName,\n                        id: $scope.currentHighLightChildDevice\n                    });\n                }\n            }\n        };\n        //\n        if ($scope.highlights && $scope.highlights.onGraph) {\n            $scope.$watchCollection(\"highlights.onGraph\", function(newValue, oldValue) {\n                if ($scope.currentView == 1 && newValue && newValue.length > 0) {\n                    var timerInterval = 0;\n                    angular$1.forEach(newValue, function(deviceName, $index) {\n                        $timeout(function() {\n                            $scope.currentChart.setSelection(false, deviceName);\n                        }, timerInterval);\n                        timerInterval += 1000;\n                    });\n                }\n            });\n        }\n\n        $scope.$on('deviceInfoEvent', function(event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.auto_schema = metadata.data.source.store;\n            $scope.auto_metadata = metadata;\n            $scope.auto_device_name = deviceData.device.name;\n            $scope.$watch('currentView', function(nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    if ($scope.eventsHandler && $scope.eventsHandler.viewChangeListener) {\n                        $scope.eventsHandler.viewChangeListener(nObj);\n                    }\n                    $scope.$emit('graphScatterViewChangeEvent', {\n                        children: $scope.basicInfo.childrenChart,\n                        view: nObj\n                    });\n                    $scope.button_handlers = {}; // clean handlers\n                    $element.find(\"#buttons_area\").empty();\n                    if (nObj == -1) {\n                        $scope.autoupdate = true;\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                            angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === rangeLevel) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column.startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n                            $scope.auto_fields = fields;\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                                initChart(data, deviceData.device.name);\n                            }, function(error) {\n                                console.error(error);\n                            });\n                        }\n                    } else {\n                        $scope.autoupdate = false;\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            var relationConfig = metadata.data.groups[2];\n                            if (relationConfig.nameColumn) {\n                                $scope.childrenDeviceNameColumn = relationConfig.nameColumn;\n                            } else {\n                                $scope.childrenDeviceNameColumn = \"name\";\n                            }\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                                angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === rangeLevel) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if (column.startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                // show children view\n                                dataService.childrenExtensionInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, metadata.data.source.relation_group, rangeLevel, otherLevels, fields).then(function(data) {\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                        interactionHandler();\n                                    } else if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.device && $scope.interactions.graphs.device.children) {\n                                        // no relationship in fgp platform just take it from interactions Configuration  extension_type\n                                        if ($scope.interactions.graphs.device.children.data) {\n                                            var devices_key = $scope.interactions.graphs.device.children.data().then(\n                                                function(data) {\n                                                    $q.all(dataService.devicesExtensionInitInfo($rootScope.host, $rootScope.applicationName, data, metadata.data.source.store, $scope.interactions.graphs.device.children.extension_type, rangeLevel, otherLevels, fields)).then(\n                                                        function(data) {\n                                                            initChildrenChart(data);\n                                                            interactionHandler();\n                                                        },\n                                                        function(error) {\n                                                            console.error(error);\n                                                        }\n                                                    );\n                                                },\n                                                function(error) {\n                                                    return;\n                                                }\n                                            );\n                                        } else {\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                }, function(error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n            });\n            var interactionHandler = function() {\n                // interactions for scatter view\n                if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter) {\n                    // 1. color\n                    if ($scope.interactions.graphs.buttons.scatter.color) {\n                        // change color by \"field\"\n                        var buttons = $scope.interactions.graphs.buttons.scatter.color;\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                var colors = [];\n                                // set button status\n                                if (button[\"active\"]) {\n                                    // make them oragin colors\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        if ($scope.childrenColors) {\n                                            $scope.childrenColors.forEach(function(_item) {\n                                                if (_item.name == device.name) {\n                                                    colors.push(_item.color);\n                                                }\n                                            });\n                                        } else {\n                                            // need to change\n                                            if ($scope.defaultColors[$index]) {\n                                                colors.push($scope.defaultColors[$index]);\n                                            } else {\n                                                colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                                            }\n                                        }\n                                    });\n                                    button[\"active\"] = false;\n                                } else {\n                                    // the custom func returns color.\n                                    var field = button.field;\n                                    var _func = button._func;\n                                    // devices\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        colors.push(_func(device[field]));\n                                    });\n                                    button[\"active\"] = true;\n                                }\n                                // update graph colors\n                                $scope.currentChart.updateOptions({\n                                    \"colors\": colors\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // 2. data filter\n                    if ($scope.interactions.graphs.buttons.scatter.dataFilter) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.dataFilter;\n\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                // devices\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        device.show = true;\n                                        $scope.currentChart.setVisibility($index, true);\n                                    } else {\n                                        device.show = false;\n                                        $scope.currentChart.setVisibility($index, false);\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // highlight   $scope.currentChart.setSelection(false, line);\n                    if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter && $scope.interactions.graphs.buttons.scatter.highlighting) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.highlighting;\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                var hideAllOthers = button.hideOther;\n                                // devices\n                                var timerInterval = 0;\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        $timeout(function() {\n                                            $scope.currentChart.setSelection(false, device[field]);\n                                        }, timerInterval);\n                                        timerInterval += 1000;\n                                    } else {\n                                        if (hideAllOthers && hideAllOthers == true) {\n                                            device.show = false;\n                                            $scope.currentChart.setVisibility($index, false);\n                                        }\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n\n                }\n                // n. other.....\n            };\n            // first time of showing chart\n            $scope.$watch('currentChart', function(newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n                    // fields of range level\n                    var fields = [];\n                    var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0 && level.name === rangeLevel) {\n                            var lines = level.rows;\n                            if (lines) {\n                                angular$1.forEach(lines, function(line) {\n                                    //\n                                    if (line.value) {\n                                        var columns = (line.value).match(patt);\n                                        angular$1.forEach(columns, function(column) {\n                                            if ((column).startsWith('data.')) {\n                                                fields.push(column.replace('data.', ''));\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    $scope.auto_fields = fields;\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n                            //call scatter view init.\n                            $scope.currentView = 1;\n                        } else {\n                            $scope.currentView = -1;\n                            initChart(data, deviceData.device.name);\n                        }\n                    }, function(error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function(newValue, oldValue) {\n                if (newValue.begin != null && newValue.end != null) {\n                    var expect_points = Math.floor($element.parent().width());\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    if ($scope.locked_interval) {\n                        expectedInterval = $scope.locked_interval.interval;\n                    }\n                    var conf = $scope.intevals.device;\n                    if (conf == null || conf.length == 0) {\n                        return false;\n                    }\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                        $scope.autoupdate = false;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n                        if ($scope.currentView == -1) {\n                            $scope.autoupdate = true;\n                            $scope.auto_store = conf[conf.length - 1].name;\n                        }\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                        $scope.autoupdate = false;\n                    }\n                    $scope.currentIntervalName = \"\";\n                    angular$1.forEach(conf, function(config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n                    // check the interval(data) no more than the number of expected points\n                    if (expectedInterval == lastOne) {\n                        // check\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.limits) {\n                            expect_points = $scope['interactions'].graphs.limits;\n                        }\n                        //\n                        if (((newValue.end - newValue.begin) / expectedInterval) > expect_points) {\n                            // reset range bar\n                            $scope.rangeConfig.dateWindow = [new Date(newValue.end - (expect_points - 1) * expectedInterval), new Date(newValue.end)];\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                            $scope.alertMessage = \"Limit the number of \\\"Zoom-Out\\\" points to \" + expect_points + \".\";\n                            $timeout(function() {\n                                $scope.alertMessage = null;\n                            }, 5000);\n                            return;\n                        }\n                    }\n                    // update range-bar\n                    if ($scope.rangeSelectorBar) {\n                        angular$1.forEach($scope.trees, function(tree) {\n                            if (tree.range == true) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === tree.store) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                                        // udpate chart\n                                        var showData = data;\n                                        showData = showData.filter(function(obj) {\n                                            return obj != null;\n                                        });\n                                        // update range bar\n                                        var basicInfo = $scope.basicInfo;\n                                        var allLines = [];\n                                        angular$1.forEach(showData, function(line) {\n                                            allLines.push([new Date(line.timestamp)]);\n                                        });\n                                        var series_range = {\n                                            'l0': {\n                                                axis: 'y1'\n                                            }\n                                        };\n                                        var rangeBarLabels = [];\n                                        for (var i = 0; i < fields.length; i++) {\n                                            rangeBarLabels.push(fields[i]);\n                                            var f = new Function(\"data\", \"with(data) { if(data.\" + fields[i] + \"!=null)return data.\" + fields[i] + \";return null;}\");\n                                            // add value\n                                            var counter = 0;\n                                            angular$1.forEach(allLines, function(realLine) {\n                                                try {\n                                                    var value = f(showData[counter]);\n                                                    realLine.push(value);\n                                                } catch (ex) {\n                                                    realLine.push(null);\n                                                }\n                                                counter++;\n                                            });\n                                        }\n                                        //\n                                        if ($scope.rangeConfig && $scope.rangeConfig.file && $scope.rangeConfig.file != null) {\n                                            var objNeed2Add = [];\n                                            angular$1.forEach($scope.rangeConfig.file, function(item) {\n                                                var flag = false;\n                                                var dataLength = -1;\n                                                angular$1.forEach(allLines, function(line) {\n                                                    dataLength = line.length;\n                                                    if (line.length > 0 && line[0].getTime() === item[0].getTime()) {\n                                                        flag = true;\n                                                    } else if (line.length === 0) {\n                                                        flag = true;\n                                                    } else {\n                                                        dataLength = line.length;\n                                                    }\n\n                                                });\n                                                if (!flag) {\n                                                    var tempObj = [];\n                                                    for (var i = 0; i < dataLength; i++) {\n                                                        tempObj[i] = item[i];\n                                                    }\n                                                    objNeed2Add.push(tempObj);\n                                                }\n                                            });\n                                        }\n                                        allLines = allLines.concat(objNeed2Add);\n                                        allLines.sort(function(a, b) {\n                                            return a[0] > b[0] ? 1 : -1;\n                                        });\n                                        if ($scope.showY2Btns) {\n                                            //noinspection JSDuplicatedDeclaration\n                                            if (!$scope.rangeConfig.axes.hasOwnProperty(\"y2\")) {\n                                                series_range = {\n                                                    'l0': {\n                                                        axis: 'y1'\n                                                    },\n                                                    'l0': {\n                                                        axis: 'y2'\n                                                    }\n                                                };\n                                                $scope.rangeSeries = series_range;\n                                                $scope.rangeConfig = {\n                                                    'file': allLines,\n                                                    'labels': ['x'].concat(rangeBarLabels),\n                                                    'series': series_range,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                };\n                                                if (basicInfo && basicInfo.range_show) {\n                                                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                                }\n                                            } else {\n                                                $scope.rangeSelectorBar.updateOptions({\n                                                    'file': allLines,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                });\n                                            }\n\n                                        } else {\n                                            series_range[\"span_y2\"] = {\n                                                axis: 'y2'\n                                            };\n                                            $scope.rangeSeries = series_range;\n                                            var newLines = [];\n                                            angular$1.copy(allLines, newLines);\n                                            angular$1.forEach(newLines, function(line) {\n                                                line.push(null);\n                                            });\n                                            $scope.rangeConfig = {\n                                                'file': newLines,\n                                                'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                                'series': series_range,\n                                                highlightSeriesOpts: {\n                                                    strokeWidth: 3,\n                                                    strokeBorderWidth: 1,\n                                                    highlightCircleSize: 5\n                                                }\n                                            };\n                                            if (basicInfo && basicInfo.range_show) {\n                                                $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                            }\n                                        }\n                                    },\n                                    function(data) {\n                                        console.info(data);\n                                    }\n                                );\n                            }\n                        });\n                    }\n\n\n                    $scope.loadingShow = true;\n                    // check separated points config\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: true\n                        });\n                    } else {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: false\n                        });\n                    }\n\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        $scope.legendText = null;\n                        var deviceInfo = [];\n                        var currentStore = \"\";\n                        $scope.childrenDevices = [];\n                        angular$1.forEach($scope.childTrees, function(device) {\n                            angular$1.forEach(device.trees, function(tree, index) {\n                                if (expectedInterval == tree.frequency) {\n                                    currentStore = tree.store;\n                                    deviceInfo.push({\n                                        name: device.name,\n                                        tree: tree.tree\n                                    });\n                                    device[\"show\"] = true;\n                                    $scope.childrenDevices.push(device);\n                                }\n                            });\n                        });\n                        var fields = [];\n                        var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                        angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                            if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                var lines = level.rows;\n                                if (lines) {\n                                    angular$1.forEach(lines, function(line) {\n                                        if (line.value) {\n                                            var columns = (line.value).match(patt);\n                                            angular$1.forEach(columns, function(column) {\n                                                if (column && (column).startsWith('data.')) {\n                                                    fields.push(column.replace('data.', ''));\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                        var _init = function(deviceInfo, currentStore, begin, end, fields, expectedInterval) {\n                            $scope.auto_fields = fields;\n                            dataService.devicesStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, new Date(begin).getTime(), new Date(end).getTime(), fields, expectedInterval).then(function(data) {\n                                var showData = [];\n                                angular$1.forEach(data, function(arr, key) {\n                                    var deviceData = [].concat(arr);\n                                    showData.push({\n                                        device: key,\n                                        data: deviceData\n                                    });\n                                });\n                                // order childrenDevices by showData\n                                var devicesMatchData = [];\n                                angular$1.forEach(showData, function(item, _index) {\n                                    angular$1.forEach($scope.childrenDevices, function(device) {\n                                        // just show devices with data\n                                        if (item.device == device.name && item.data.length > 0) {\n                                            devicesMatchData.splice(_index, 0, device);\n                                        }\n                                    });\n                                });\n                                //reset childrenDevies\n                                $scope.childrenDevices = devicesMatchData;\n                                //get configuration\n                                updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n                            }, function(data) {\n                                console.info(data);\n                            });\n                        };\n                        if (deviceInfo.length == 0) {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            var relationConfig = metadata.data.groups[2];\n                            if (relationConfig.nameColumn) {\n                                $scope.childrenDeviceNameColumn = relationConfig.nameColumn;\n                            } else {\n                                $scope.childrenDeviceNameColumn = \"name\";\n                            }\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n\n                            // try to find\n                            if ($scope.interactions.graphs.device.children.data) {\n                                var devices_key = $scope.interactions.graphs.device.children.data().then(\n                                    function(data) {\n                                        $q.all(dataService.devicesExtensionInitInfo($rootScope.host, $rootScope.applicationName, data, metadata.data.source.store, $scope.interactions.graphs.device.children.extension_type, rangeLevel, otherLevels, fields)).then(\n                                            function(data) {\n                                                if (data) {\n                                                    data.forEach(function (_device) {\n                                                        deviceInfo.push(_device.device);\n                                                    });\n                                                }\n                                                _init(deviceInfo, currentStore, newValue.begin, newValue.end, fields, expectedInterval);\n                                            },\n                                            function(error) {\n                                                console.error(error);\n                                            }\n                                        );\n                                    },\n                                    function(error) {\n                                        return;\n                                    }\n                                );\n                            } else {\n                                return;\n                            }\n                        } else {\n                            _init(deviceInfo, currentStore, newValue.begin, newValue.end, fields, expectedInterval);\n                        }\n\n\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // cal tree\n                        angular$1.forEach($scope.trees, function(tree, index) {\n                            if (expectedInterval == tree.frequency) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, tree.frequency).then(function(data) {\n                                    // udpate chart\n                                    var showData = data;\n                                    showData = showData.filter(function(obj) {\n                                        return obj != null;\n                                    });\n                                    showData.sort(function(a, b) {\n                                        return a.timestamp > b.timestamp ? 1 : -1;\n                                    });\n                                    // get configuration\n                                    updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n                                    // rest visibility\n                                    angular$1.forEach(showData, function(item) {\n                                        item[\"show\"] = true;\n                                    });\n\n                                    // tell some other widgets, the graph is changed.\n                                    $timeout(function() {\n                                        $rootScope.$broadcast('chartDataChangeEvent', {\n                                            'id': element_id,\n                                            'group': 'device',\n                                            'data': {\n                                                'collection': tree.store,\n                                                'group': 'device',\n                                                'data': showData\n                                            }\n                                        });\n                                    });\n\n                                }, function(data) {\n                                    console.info(data);\n                                });\n                            }\n                        });\n\n                        $scope.fixGraphWithGap();\n                    }\n                    // 2. series highlighting\n\n                    $scope.status = false;\n                }\n            });\n\n        });\n\n\n        var fetchData = function(values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                if (node.data != null && node.data.array) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                } else if (node.data != null) {\n                    Array.prototype.push.apply(values, node.data.slice(0, node.data.length));\n                }\n\n            }\n\n        };\n\n\n        $scope.trees = [];\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function(data, deviceName) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function(tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({\n                    name: tree.store,\n                    interval: tree.frequency\n                });\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            // fetchData(allData, rangeTree.tree);only get first and last\n            // fix the problem of never seen the current data.\n            rangeTree.last.timestamp = rangeTree.last.timestamp + (rangeTree.frequency - 1);\n            allData = allData.concat([rangeTree.first, rangeTree.last]);\n\n            allData = allData.filter(function(obj) {\n                return obj != null;\n            });\n\n            allData.sort(function(a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({\n                    timestamp: timestamp - currentInterval\n                });\n                Array.prototype.push.apply(newData, allData);\n                newData.push({\n                    timestamp: timestamp + currentInterval\n                });\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // put the data into range tree cache\n            if (rangeTree) {\n                //\n                graphDataService.put(deviceName + \"/\" + rangeTree.store + \"/\" + $scope.graphId, [rangeTree.first, {\n                    timestamp: moment().endOf('day').toDate().getTime()\n                }]);\n            }\n            // get configuration and make real data\n            updateChart(metadata, store, allData, rangeTree);\n        };\n\n        $scope.childrenColors = [];\n\n        var initChildrenChart = function(deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            $scope.childrenDevices = [];\n            // we should give colors to all devices (no matter has data or not)\n            deviceDatas.forEach(function(_device, _index) {\n                if ($scope.defaultColors[_index]) {\n                    $scope.childrenColors.push({\n                        name: _device.device.name,\n                        color: $scope.defaultColors[_index]\n                    });\n                } else {\n                    $scope.childrenColors.push({\n                        name: _device.device.name,\n                        color: '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6)\n                    });\n                }\n            });\n            angular$1.forEach(deviceDatas, function(deviceData, _index) {\n                var device = {};\n                device[\"show\"] = true;\n                angular$1.merge(device, deviceData.device, deviceData.extension);\n                // $scope.childrenDevices.push(device);\n                var trees = deviceData.trees;\n                device[\"trees\"] = trees;\n                $scope.childTrees.push(device);\n                var rangeTree = null;\n                angular$1.forEach(trees, function(tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function(interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({\n                            name: tree.store,\n                            interval: tree.frequency\n                        });\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [rangeTree.first, {\n                        timestamp: moment().endOf('day').toDate().getTime()\n                    }];\n                    allData = allData.filter(function(obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function(a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n            });\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n        var updateChildrenChart = function(metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function(device, key, _index) {\n                angular$1.forEach(device.data, function(item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function(label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n                });\n            });\n            // order\n            allXLabels.sort(function(a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function(label) {\n                allLines.push([label]);\n            });\n\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function(device, key) {\n                // if ($scope.defaultColors[counter]) {\n                // colors.push($scope.defaultColors[counter]);\n                // } else {\n                // colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                // }\n                counter++;\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        labels.push(key); // put the name here and\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function(realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function(odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            var connectSeparatedPoints = false;\n            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n            }\n\n            //update chart\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n                // reset colors by labels\n                colors = [];\n                labels.forEach(function(key) {\n                    $scope.childrenColors.forEach(function(_item) {\n                        if (_item.name == key) {\n                            colors.push(_item.color);\n                        }\n                    });\n                });\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'labelsKMB': true,\n                        'file': allLines,\n                        legend: 'never',\n                        labelsKMB: true,\n                        labelsSeparateLines: false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max],\n                                axisLabelWidth: 80\n                            },\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    $scope.showY2Btns = false;\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function(line) {\n                        line.push(null);\n                    });\n                    series[\"span_y2\"] = {\n                        'axis': 'y2'\n                    };\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'legend': 'never',\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labelsSeparateLines': false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max]\n                            },\n                            'y2': {\n                                axisLabelFormatter: function(d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                //\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n\n                // set the first one to range bar\n                // update range bar with the first channel data\n                if ($scope.basicInfo && $scope.basicInfo.range_show && $scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n\n                    Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                        zoom: true,\n                        selection: false,\n                        range: false\n                    });\n                    if (showY2axis) {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    } else {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels).concat(['span_y2']),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    }\n                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                    // reset the datetime for current chart\n\n                    if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= newLines[0][0] && $scope.chartDateWindow[1] <= newLines[newLines.length - 1][0])) {\n                        // keep the current range bar refresh once.\n                        $scope.chartDateTime = {\n                            begin: $scope.chartDateTime.begin,\n                            end: $scope.chartDateTime.end\n                        };\n                        $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    } else {\n                        $scope.currentChart[\"xAxisZoomRange\"] = [newLines[0][0], newLines[newLines.length - 1][0]];\n                        if (begin_path && end_path && !init_flag) {\n                            // $scope.chartDateTime = {\n                            // \"begin\": new Date(new Number(begin_path)),\n                            // \"end\": new Date(new Number(end_path))\n                            // };\n                            $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            init_flag = true;\n                        } else {\n                            if ($scope.currentIntervalChoosed && ((newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= newLines[0][0].getTime())) {\n                                $scope.rangeConfig.dateWindow = [new Date(newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), newLines[newLines.length - 1][0]];\n                            } else {\n                                $scope.chartDateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                                $scope.rangeConfig.dateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                            }\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChartOptions = $scope.rangeConfig;\n                    }\n                } else {\n                    //  keep the same time window and refersh\n                    $scope.chartDateTime = {\n                        begin: $scope.chartDateTime.begin,\n                        end: $scope.chartDateTime.end\n                    };\n                    $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    $scope.loadingShow = false;\n                }\n\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function(metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function(device) {\n                counter++;\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function(collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y1',\n                                };\n                            } else {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                                $scope.showY2Btns = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function(data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: value\n                                    });\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: null\n                                    });\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function(item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({\n                                device: device.device,\n                                data: tempData\n                            });\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function(nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function(line) {\n                angular$1.forEach(chartData, function(timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(null);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n                    var connectSeparatedPoints = false;\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                    }\n\n                    //rest colors by labels\n                    colors = [];\n                    labels.forEach(function(key) {\n                        $scope.childrenColors.forEach(function(_item) {\n                            if (_item.name == key) {\n                                colors.push(_item.color);\n                            }\n                        });\n                    });\n\n                    if (showY2axis) {\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                        };\n\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        $scope.showY2Btns = false;\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function(line) {\n                            line.push(null);\n                        });\n                        series[\"span_y2\"] = {\n                            axis: 'y2'\n                        };\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightCircleSize: 2,\n\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                if ($scope.currentView == -1) {\n                                    // device view is using default legend\n                                    return false;\n                                }\n                                // set current child device and will do show one\n                                $scope.currentHighLightChildDevice = seriesName;\n                                var maxWidth = e.target.offsetWidth;\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                // get device name columns\n                                var relationConfig = metadata.data.groups[2];\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        var colorIndex = -1;\n                                        //get index from childrenDevices\n                                        angular$1.forEach($scope.childrenDevices, function(device, _index) {\n                                            if (device.name == seriesName) {\n                                                colorIndex = _index;\n                                            }\n                                        });\n\n                                        $scope.childrenColors.forEach(function(_item) {\n                                            if (_item.name == seriesName) {\n                                                $scope.legendColor = _item.color;\n                                            }\n                                        });\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        $scope.legendText_device_name = \"\";\n                                        // if the nameSd exist\n                                        if ($scope.childTrees && $scope.childTrees.length > 0) {\n                                            angular$1.forEach($scope.childTrees, function(item) {\n                                                //\n                                                if (item.name == seriesName) {\n                                                    if (item[relationConfig.nameColumn]) {\n                                                        $scope.legendText_device_name = item[relationConfig.nameColumn];\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        if ($scope.legendText_device_name == \"\") {\n                                            //\n                                            $scope.legendText_device_name = seriesName;\n                                        }\n\n                                        if (moment.tz.guess()) {\n                                            $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                        } else {\n                                            $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                        }\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    if (maxWidth < (point_show.x + 200)) {\n                                        $scope.legendLeft = point_show.x - 200;\n                                    } else {\n                                        $scope.legendLeft = point_show.x;\n                                    }\n                                });\n\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function(metadata, store, rangeData, allData) {\n\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function(yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n                    if (allLines.length == 0) {\n                        $scope.currentChart.updateOptions({\n                            'file': [],\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n                            var connectSeparatedPoints = false;\n                            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                            }\n                            if (showY2axis) {\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            } else {\n                                var newLines = [];\n                                $scope.showY2Btns = false;\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n\n                                series[\"span-Y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            }\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        $scope.autoUpdateChart = updateDetailChart;\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function(metadata, store, allData, rangeTree) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {\n                                'l0': {\n                                    axis: 'y1'\n                                }\n                            };\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {\n                                        axis: 'y1'\n                                    },\n                                    'l0': {\n                                        axis: 'y2'\n                                    }\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.showY2Btns = false;\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                                // save\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n                        var connectSeparatedPoints = false;\n                        if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                            connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                        }\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {\n                                axis: 'y2'\n                            };\n                            $scope.showY2Btns = false;\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        axisLabelFormatter: function(d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n\n\n                        if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= allLines[0][0] && $scope.chartDateWindow[1] <= allLines[allLines.length - 1][0])) {\n                            // keep the current range bar refresh once.\n                            $scope.chartDateTime = {\n                                begin: $scope.chartDateTime.begin,\n                                end: $scope.chartDateTime.end\n                            };\n                            $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                        } else {\n\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            if (begin_path && end_path && !init_flag) {\n                                // $scope.chartDateTime = {\n                                // \"begin\": new Date(new Number(begin_path)),\n                                // \"end\": new Date(new Number(end_path))\n                                // };\n                                $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                init_flag = true;\n                            } else {\n                                if ($scope.currentIntervalChoosed && ((allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= allLines[0][0].getTime())) {\n                                    $scope.rangeConfig.dateWindow = [new Date(allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), allLines[allLines.length - 1][0]];\n                                } else {\n                                    $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                    $scope.rangeConfig.dateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                }\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                        }\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n        $scope.chartDateTime = {\n            begin: null,\n            end: null\n        };\n\n\n        $scope.drillDown = function() {\n            //get redirect configuration from interactions\n            if ($scope.currentView == 1 && $scope.currentHighLightChildDevice && $scope.drill && $scope.drill.graphs && $scope.drill.graphs.drillDown && $scope.drill.graphs.drillDown.url) {\n                //\n                var url = $scope.drill.graphs.drillDown.url;\n                url = url.replace(\"{0}\", $scope.currentHighLightChildDevice);\n                $window.open(url);\n            }\n        };\n        // function for show one\n        $scope.showOne = function(deviceName) {\n\n            if ($rootScope['standalone'] && $rootScope['standalone'] == true) {\n                return false;\n            }\n\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/admin/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/admin/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n\n        var btntimer = null;\n\n\n        $scope.btnZoomInVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomInVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVULeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVDLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVURight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVDRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        // functions for buttons\n        $scope.btnpanleft = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[0] - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0] - pan_delta;\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[1] - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1] - pan_delta;\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnpanright = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = $scope.chartDateWindow[0].getTime() + pan_delta;\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            } else {\n                if (($scope.chartDateWindow[0] + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = ($scope.chartDateWindow[0] + pan_delta);\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1].getTime() + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            } else {\n                if (($scope.chartDateWindow[1] + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1] + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        $scope.btnzoomin = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            startDate = rangeStart + (delta * 2);\n            endDate = rangeEnd - (delta * 2);\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            //\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnzoomout = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            if ((rangeStart - (delta * 2)) > panRange[0]) {\n                startDate = rangeStart - (delta * 2);\n            } else {\n                startDate = panRange[0];\n            }\n\n            if ((rangeEnd + (delta * 2)) < panRange[1]) {\n                endDate = rangeEnd + (delta * 2);\n            } else {\n                endDate = panRange[1];\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        var timer = null;\n        $scope.refersh = function(g, init) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function() {\n                if (init || g.xAxisRange()[0] != $scope.chartDateTime.begin || g.xAxisRange()[1] != $scope.chartDateTime.end) {\n                    $scope.chartDateTime = {\n                        begin: g.xAxisRange()[0],\n                        end: g.xAxisRange()[1]\n                    };\n                    $scope.chartDateWindow = g.xAxisRange();\n                }\n            }, 600);\n        };\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph\n    .$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location', '$stateParams', '$compile', '$q'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap', 'ui.router', 'angular-cache']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function() {\n        return function(input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .factory('$graphstorage', ['$window', function($window) {\n        return {\n            setTree: function(key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getTree: function(key) {\n                return JSON.parse($window.localStorage[key]) || false;\n            },\n            addTree: function(key, value) {\n                if ($window.localStorage[key]) {\n                    var trees = JSON.parse($window.localStorage[key]);\n                    trees.push(value);\n                    this.setTree(key, trees);\n                } else {\n                    this.setTree(key, [value]);\n                }\n            },\n            clear: function() {\n                $window.localStorage.clear();\n            }\n        }\n    }])\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function() {\n        return function(scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).config(function(CacheFactoryProvider) {\n        angular$1.extend(CacheFactoryProvider.defaults, {\n            maxAge: 30 * 60 * 1000, // half an hour\n            deleteOnExpire: 'aggressive',\n        });\n    }).service('graphDataService', function(CacheFactory) {\n        var graphCache = null;\n        if (!CacheFactory.get('graphCache')) {\n            graphCache = CacheFactory('graphCache',{\n                maxAge: 30 * 60 * 1000, // half an hour\n                deleteOnExpire: 'aggressive'\n            });\n        }\n        return {\n            get: function(name) {\n                return graphCache.get('/graph/'+name);\n            },\n            put: function(name, data) {\n                return graphCache.put('/graph/'+name, data);\n            }\n        };\n    })\n    .filter('tableformatter', ['$filter', function($filter) {\n        return function(input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}