{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","showdata","graphBindingArray","$on","evt","msg","push","forEach","metadata","key","id","callback","data","from","findChild","parentId","parentHtmlObj","arrayItems","i","length","parent","currentItem","element","html_render","find","append","item","deviceInfo","then","$broadcast","device","graph","graphs","children","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","_$http","_$q","indexCache","deviceStores","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","jsonpCallback","contentType","dataType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","jsonp","params","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","fillChildrenTree","buckets","tree","showData","value","array","size","flag","info","fillTree","calTree","start","end","filter","elem","devicesStoreData","store","bucketsData","devicesNullBucket","index","bucketKeys","nullBucket","bucket","deviceBucketKeys","JSON","stringify","deviceData","currentBucketShowData","deviceStoreData","defaultColors","this$1","colors","co","lor","Math","floor","random","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","attr","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$interval","$filter","$location","_dataService","dom_loading","dom_empty_data","link","status","timeOut","getData","numSeries","numRows","labels","initDate","Date","j","getTime","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","zoomTimer","scroll","cancel","normal","detail","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","mousedown","mousemove","mouseup","drawGapEdgePoints","pointSize","labelsKMB","concat","highlightCircleSize","strokeWidth","highlightSeriesOpts","strokeBorderWidth","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","on","finalDateRagne","chartDateTime","begin","finalDateRange","child","synchronize","selection","childrenChart","param","$window","elementId","emptyDataShow","loadingShow","intevals","height","fixInterval","noneFixed","fixGraphWithGap","currentInterval","currentIntervalName","interval","fixed","tempDate","obj","labels_","NaN","file","copy","file_","fixGraphWithGap_click","basic","parent_container","data_from","$watch","nObj","oObj","groups","collections","level","rows","initChart","relation","relation_group","initChildrenChart","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","config","currentStore","childTrees","trees","frequency","arr","Array","apply","slice","updateChildrenDetailChart","rangeChildrenData","rangeConfig","rangeSeries","group","collection","ordinalRangeData","timestamp","sort","a","b","updateDetailChart","rangeData","fetchData","values","node","intevalforshow","rangeTree","allData","newData","thePoint","updateChart","deviceDatas","devicesInfo","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allLines","allXLabels","label","yRange","showY2axis","counter","originalData","yaxis","f","Function","realLine","odata","ex","childrenRangeConfig","y2label","newLines","line","axisLabelFormatter","d","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","deviceConfig","yRanges","row","yrange","rangeSeriesNumber","rangeBarLabels","series_range","l0","open","substr","lastIndexOf","timer","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","legend","pieData","update","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","columns","column","formatter","record","cleanData","service","directive","input"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, function (angular,$,Dygraph,ngmap,chart_js) { 'use strict';\n\n    angular = 'default' in angular ? angular['default'] : angular;\n    $ = 'default' in $ ? $['default'] : $;\n    Dygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n    var fgpStage = function fgpStage() {\n        this.scope = {\n            applicationName: \"=\",\n            deviceName: \"=\",\n            server: \"=\",\n            configuration: '='\n        };\n        this.replace = true;\n        this.restrict = 'A';\n    };\n\n    fgpStage.prototype.template = function template () {\n        return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;\">' +\n            '</div>';\n    };\n\n    fgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService) {\n        $scope.showdata = {};\n\n        $rootScope['applicationName'] = $scope.applicationName;\n        $rootScope['host'] = $scope.server;\n        $rootScope['device'] = $scope.deviceName;\n\n\n        var graphBindingArray = [];\n\n        $scope.$on('bindChildChartEvent', function (evt, msg) {\n            graphBindingArray.push(msg);\n        });\n\n\n        $scope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n            angular.forEach($scope.showdata, function (metadata, key) {\n                if (key == msg.id) {\n                    msg.callback({data: metadata, from: 'show'});\n                    return;\n                }\n            });\n        });\n\n        function findChild(parentId, parentHtmlObj, arrayItems) {\n\n            for (var i = 0; i < arrayItems.length; i++) {\n                if ('edit' + parentId === arrayItems[i].parent) {\n                    var currentItem = angular.element(arrayItems[i].html_render);\n                    var id = arrayItems[i].id;\n                    $scope.showdata[id] = arrayItems[i];\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                    findChild(arrayItems[i].id, currentItem, arrayItems);\n                } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                    var currentItem = angular.element(arrayItems[i].html_render);\n                    var id = arrayItems[i].id;\n                    $scope.showdata[id] = arrayItems[i];\n                    parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                    findChild(arrayItems[i].id, currentItem, arrayItems);\n                }\n            }\n        }\n\n        angular.forEach($scope.configuration, function (item) {\n            if ('workingArea' === item.parent) {\n                var currentItem = angular.element(item.html_render);\n                $scope.showdata[item.id] = item;\n                $element.append($compile(currentItem)($scope));\n                findChild(item.id, currentItem, $scope.configuration);\n            }\n        });\n\n        /**\n         * get device information\n         */\n        if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    $scope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n        }\n\n\n        // all item created;\n        $timeout(function () {\n            angular.forEach(graphBindingArray, function (graph) {\n                $scope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n            });\n        });\n    };\n\n\n    fgpStage.buildFactory = function buildFactory () {\n        fgpStage.instance = new fgpStage();\n        return fgpStage.instance;\n    };\n\n    /**\n     * Created by ericwang on 15/06/2016.\n     */\n    var dataAccessApi = function dataAccessApi($http, $q, $cacheFactory) {\n        this._$http = $http;\n        this._$q = $q;\n        // get cache\n        this.indexCache = $cacheFactory('indexCache');\n        this.deviceStores = $cacheFactory('deviceStores');\n    };\n\n\n    /**\n     * sync using JQuery\n     * @param deviceName\n     * @param deviceKey\n     * @param applicationName\n     * @returns {*}\n     */\n    dataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n        var deferred = this._$q.defer();\n        var url = host + \"/api/\";\n\n        if (applicationName) {\n            url += \"app/\" + applicationName;\n        }\n\n        if (deviceName) {\n            url += '/devices/parameter/jsonp?name=' + deviceName\n        } else if (deviceKey) {\n            url += 'devices/parameter/jsonp?key=' + deviceKey\n        }\n\n        $.ajaxSettings.async = false;\n        $.ajax({\n            type: 'GET',\n            url: url,\n            jsonpCallback: 'jsonCallback',\n            contentType: \"application/json\",\n            dataType: 'jsonp',\n            success: function (data) {\n                var url = host + \"/api/\";\n                if (applicationName) {\n                    url += \"app/\" + applicationName + \"/devices/extension-types/jsonp?device_type=\";\n                } else {\n                    url += \"devices/extension-types/jsonp?device_type=\";\n                }\n                $.ajaxSettings.async = false;\n                $.ajax({\n                    type: 'GET',\n                    url: url + data.type,\n                    jsonpCallback: 'jsonCallback',\n                    contentType: \"application/json\",\n                    dataType: 'jsonp',\n                    success: function (types) {\n                        angular.forEach(types, function (type) {\n                            Object.defineProperty(data, type.name, {\n                                get: function () {\n                                    var result = null;\n                                    var url = host + \"/api/\";\n                                    if (applicationName) {\n                                        url += \"app/\" + applicationName + \"/devices/extensions/jsonp?device_name=\";\n                                    } else {\n                                        url += \"devices/extensions/jsonp?device_name=\";\n                                    }\n                                    $.ajaxSettings.async = false;\n                                    $.ajax({\n                                        type: 'GET',\n                                        url: url + this.name + '&extension_type=' + type.name,\n                                        jsonpCallback: 'jsonCallback',\n                                        contentType: \"application/json\",\n                                        dataType: 'jsonp',\n                                        success: function (field) {\n                                            result = field;\n                                        },\n                                        error: function (e) {\n                                            deferred.reject(e);\n                                        }\n                                    });\n                                    return result;\n                                }\n                            });\n                        });\n                    },\n                    error: function (e) {\n                        console.log(e.message);\n                    }\n                });\n\n                deferred.resolve(data);\n            },\n            error: function (e) {\n                deferred.reject(e);\n            }\n        });\n        return deferred.promise;\n    };\n\n    /**\n     *\n     * @param application\n     * @param deviceKey\n     * @param storeSchema\n     * @returns {Promise}\n     */\n    dataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels) {\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n            params: {'otherLevels': otherLevels, 'callback': 'JSON_CALLBACK'}, cache: this.deviceStores\n        }).then(\n            function (response) {\n                deferred.resolve(response.data);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    };\n\n\n    /**\n     *\n     * @param application\n     * @param deviceKey\n     * @param storeSchema\n     * @returns {Promise}\n     */\n    dataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels) {\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n            params: {\n                relationType: relationType,\n                relationDeviceType: relationDeviceType,\n                otherLevels: otherLevels,\n                'callback': 'JSON_CALLBACK'\n            },\n            cache: this.deviceStores\n        }).then(\n            function (response) {\n                deferred.resolve(response.data);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    };\n\n\n    dataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n        if (tree.children[0] != null) {\n            fillChildrenTree(buckets, tree.children[0], showData);\n        }\n\n        if (tree.children[1] != null) {\n            fillChildrenTree(buckets, tree.children[1], showData);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n\n            angular.forEach(buckets, function (value, key) {\n                if (key == tree.id && value != null) {\n                    tree.data = value.array;\n                    tree['size'] = value.size;\n\n                    var flag = false;\n                    angular.forEach(showData, function (data) {\n                        if (data.id == tree.id) {\n                            data.data = tree.data;\n                            tree['size'] = value.size;\n                            flag = true;\n                        }\n                    });\n\n                    if (!flag) {\n                        console.info(\"error:\" + key);\n                    }\n                }\n            });\n        }\n    };\n\n\n    dataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n        if (tree.children[0] != null) {\n            fillTree(buckets, tree.children[0], showData);\n        }\n\n        if (tree.children[1] != null) {\n            fillTree(buckets, tree.children[1], showData);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n            angular.forEach(buckets, function (value, key) {\n                if (key == tree.id) {\n                    tree.data = value.array;\n                    tree['size'] = value.size;\n\n                    var flag = false;\n                    angular.forEach(showData, function (data) {\n                        if (data.id == tree.id) {\n                            data.data = tree.data;\n                            tree['size'] = value.size;\n                            flag = true;\n                        }\n                    });\n\n                    if (!flag) {\n                        console.info(\"error:\" + key);\n                    }\n                }\n            });\n        }\n\n    };\n\n    dataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n        if (tree.children[0] != null) {\n            calTree(buckets, tree.children[0], start, end);\n        }\n\n        if (tree.children[1] != null) {\n            calTree(buckets, tree.children[1], start, end);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n            if (tree.start >= start && tree.end <= end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n            // start inclued in a bucket\n            if (start > tree.start && start < tree.end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n            // end inclued in a bucket\n            if (end > tree.start && end < tree.end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n\n        }\n    };\n\n\n    /**\n     *\n     * @param application\n     * @param deviceInfo deviceKey and tree\n     * @param storeSchema\n     * @param store\n     * @param start\n     * @param end\n     */\n    dataAccessApi.prototype.devicesStoreData = function devicesStoreData (host, application, deviceInfo, storeSchema, store, start, end) {\n\n        var bucketsData = [];\n        var devicesNullBucket = [];\n        var calTree = this.calTree;\n        var fillChildrenTree = this.fillChildrenTree;\n        angular.forEach(deviceInfo, function (device, index) {\n            var bucketKeys = [];\n            calTree(bucketKeys, device.tree, start, end);\n            var nullBucket = [];\n            // get null buckets\n            angular.forEach(bucketKeys, function (bucket) {\n                if (bucket.data == null) {\n                    nullBucket.push(bucket.id);\n                }\n            });\n            if (nullBucket.length != 0) {\n                devicesNullBucket.push({device: device.name, nullBucket: nullBucket});\n            }\n            bucketsData.push({device: device.name, data: bucketKeys});\n        });\n\n        if (devicesNullBucket.length == 0) {\n            // get data from rest service\n            var deferred = this._$q.defer();\n            deferred.resolve(bucketsData);\n            return deferred.promise;\n        } else {\n            // get data from rest service\n            var deferred = this._$q.defer();\n            this._$http.jsonp(host + '/api/app/' + application + '/store/index/devices/store/data/jsonp/' + storeSchema + '/' + store, {\n                params: {\n                    deviceBucketKeys: JSON.stringify(devicesNullBucket),\n                    callback: 'JSON_CALLBACK'\n                }\n            }).then(\n                function (response) {\n                    // response.data\n                    angular.forEach(response.data, function (deviceData) {\n\n                        var currentBucketShowData = null;\n                        angular.forEach(bucketsData, function (showData) {\n                            if (showData.device == deviceData.device) {\n                                currentBucketShowData = showData.data; //  bucketKeys\n                                angular.forEach(deviceInfo, function (device, index) {\n                                    if (deviceData.device == device.name) {\n                                        fillChildrenTree(deviceData.data, device.tree, currentBucketShowData);\n                                    }\n                                });\n                            }\n                        });\n\n                    });\n                    // fill bucketKeys\n                    deferred.resolve(bucketsData);\n                },\n                function (response) {\n                    deferred.reject(response.data);\n                }\n            );\n            return deferred.promise;\n        }\n\n\n    };\n\n\n    dataAccessApi.prototype.deviceStoreData = function deviceStoreData (host, application, deviceKey, storeSchema, store, tree, start, end) {\n        var fillTree = this.fillTree;\n        var calTree = this.calTree;\n        var bucketKeys = [];\n        calTree(bucketKeys, tree, start, end);\n        var nullBucket = [];\n        // get null buckets\n        angular.forEach(bucketKeys, function (bucket) {\n            if (bucket.data == null) {\n                nullBucket.push(bucket.id);\n            }\n        });\n\n        if (nullBucket.length == 0) {\n            // send rest request\n            var deferred = this._$q.defer();\n            deferred.resolve(bucketKeys);\n            return deferred.promise;\n        } else {\n            // send rest request\n            var deferred = this._$q.defer();\n            this._$http.jsonp(host + '/api/app/' + application + '/store/index/store/data/jsonp/' + deviceKey + '/' + storeSchema + '/' + store, {\n                params: {\n                    bucketKeys: nullBucket,\n                    callback: 'JSON_CALLBACK'\n                }\n            }).then(\n                function (response) {\n                    fillTree(response.data, tree, bucketKeys);\n                    // fill bucketKeys\n                    deferred.resolve(bucketKeys);\n                },\n                function (response) {\n                    deferred.reject(response.data);\n                }\n            );\n            return deferred.promise;\n        }\n\n\n    };\n\n    dataAccessApi.prototype.defaultColors = function defaultColors () {\n            var this$1 = this;\n\n        if (!this.colors) {\n            this['colors'] = [];\n            for (var i = 0; i < 300; i++) {\n                this$1.colors.push('#' + (function co(lor) {\n                        return (lor +=\n                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                        && (lor.length == 6) ? lor : co(lor);\n                    })(''));\n            }\n        }\n        return this.colors;\n\n    };\n\n\n    dataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory) {\n        dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory);\n        return dataAccessApi.instance;\n    };\n\n    dataAccessApi.$inject = ['$http', '$q', '$cacheFactory'];\n\n    var fgpWidgetContainer = function fgpWidgetContainer() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetContainer.prototype.template = function template (element, attrs) {\n        var flag = attrs.hasOwnProperty(\"shown\");\n        var showTitle = attrs.hasOwnProperty(\"showtitle\");\n        var element_id = attrs.id;\n        var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\">' +\n            '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n            '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n            '</div>' +\n            '</div></div>';\n        var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;\">' +\n            '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n            '</div>' +\n            '</div></div>';\n\n        // show or design\n        if (flag) {\n            if (showTitle) {\n                return dom_show;\n            } else {\n                // without title\n                return dom_show_notitle;\n            }\n        }\n\n    };\n\n    fgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n        // only show\n        var element_id = $element.attr(\"id\");\n\n\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n\n        var metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n        $scope.data = {};\n        if (metadata.data) {\n            $scope.data[\"source\"] = metadata.data.source;\n            if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n                if ($scope.data.source.device) {\n                    /**\n                     * get device information\n                     */\n                    dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                        // send device info to all widget\n                        $timeout(function () {\n                            $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                        });\n                    });\n                }\n\n            }\n        }\n\n    };\n\n\n    fgpWidgetContainer.buildFactory = function buildFactory () {\n        fgpWidgetContainer.instance = new fgpWidgetContainer();\n        return fgpWidgetContainer.instance;\n    };\n\n    fgpWidgetContainer.$inject = [];\n\n    var fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.$timeout = $timeout;\n        this._dataService = dataService;\n    };\n\n    fgpWidgetGraph.prototype.template = function template (element, attrs) {\n        var flag = attrs.hasOwnProperty(\"shown\");\n        if (flag) {\n            var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n                '<div class=\"rect1\"></div>' +\n                '<div class=\"rect2\"></div>' +\n                '<div class=\"rect3\"></div>' +\n                '<div class=\"rect4\"></div>' +\n                '<div class=\"rect5\"></div>' +\n                '</div></div>';\n\n\n            var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n                '<h1>Empty Data!</h1>' +\n                '</div></div>';\n\n            return '<div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips\" href=\"javascript:;\" style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><div class=\"relationBtn\">R</div><span>Scatter View</span></a><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\">fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? \\'#009900;\\' : \\'\\'}}\">{{item.name}}</span></label></div></div></div><div class=\"line-chart-graph\" style=\"width: 100%;height: 100%;\"></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;\"><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;\"></div></div></div></div></div>';\n        }\n    };\n\n    fgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n        scope['defaultColors'] = this._dataService.defaultColors();\n        scope.status = true;\n        var timeOut = this.$timeout;\n        this.$timeout(function () {\n                var getData = function (numSeries, numRows, name) {\n                    var result = {labels: null, data: null};\n                    var data = [];\n                    var labels = [];\n                    //init date\n                    var initDate = new Date(\"2014/01/01 00:00:00\");\n                    for (var j = 0; j < numRows; ++j) {\n                        data[j] = [new Date(initDate.getTime() + 900000)];\n                        initDate = new Date(initDate.getTime() + 900000);\n                    }\n                    for (var i = 0; i < numSeries; ++i) {\n                        labels.push(name + i);\n                        var val = 0;\n                        for (var j = 0; j < numRows; ++j) {\n                            val += Math.random() - 0.5;\n                            data[j][i + 1] = val;\n                        }\n                    }\n                    result.labels = labels;\n                    result.data = data;\n                    return result;\n                };\n\n\n                var sampleData = getData(1, 10, 'Device');\n\n                function movePan(event, g, context, side) {\n\n                    context.dragEndX = Dygraph.dragGetX_(event, context);\n                    context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n                    // y-axis scaling is automatic unless this is a full 2D pan.\n                    if (context.is2DPan) {\n\n                        var pixelsDragged = context.dragEndY - context.dragStartY;\n                        // Adjust each axis appropriately.\n                        if (side == \"r\") {\n                            var axis = g.axes_[0];\n                            var axis_data = context.axes[0];\n                            var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                            var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                            // In log scale, maxValue and minValue are the logs of those values.\n                            var maxValue = axis_data.initialTopValue + unitsDragged;\n                            if (boundedValue) {\n                                maxValue = Math.min(maxValue, boundedValue[1]);\n                            }\n                            var minValue = maxValue - axis_data.dragValueRange;\n                            if (boundedValue) {\n                                if (minValue < boundedValue[0]) {\n                                    // Adjust maxValue, and recompute minValue.\n                                    maxValue = maxValue - (minValue - boundedValue[0]);\n                                    minValue = maxValue - axis_data.dragValueRange;\n                                }\n                            }\n                            if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                                axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                                axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                            } else {\n                                axis.valueWindow = [minValue, maxValue];\n                                axis.valueRange = [minValue, maxValue];\n                            }\n                        } else if (side == 'l') {\n                            var axis = g.axes_[1];\n                            var axis_data = context.axes[1];\n                            var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                            var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                            // In log scale, maxValue and minValue are the logs of those values.\n                            var maxValue = axis_data.initialTopValue + unitsDragged;\n                            if (boundedValue) {\n                                maxValue = Math.min(maxValue, boundedValue[1]);\n                            }\n                            var minValue = maxValue - axis_data.dragValueRange;\n                            if (boundedValue) {\n                                if (minValue < boundedValue[0]) {\n                                    // Adjust maxValue, and recompute minValue.\n                                    maxValue = maxValue - (minValue - boundedValue[0]);\n                                    minValue = maxValue - axis_data.dragValueRange;\n                                }\n                            }\n                            if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                                axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                                axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                            } else {\n                                axis.valueWindow = [minValue, maxValue];\n                                axis.valueRange = [minValue, maxValue];\n                            }\n                        } else {\n                            var minDate = context.initialLeftmostDate -\n                                (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                            if (context.boundedDates) {\n                                minDate = Math.max(minDate, context.boundedDates[0]);\n                            }\n                            var maxDate = minDate + context.dateRange;\n                            if (context.boundedDates) {\n                                if (maxDate > context.boundedDates[1]) {\n                                    // Adjust minDate, and recompute maxDate.\n                                    minDate = minDate - (maxDate - context.boundedDates[1]);\n                                    maxDate = minDate + context.dateRange;\n                                }\n                            }\n                            var zoomRange = g.xAxisZoomRange;\n                            if (g.xAxisZoomRange[0] instanceof Date) {\n                                zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                            }\n                            if (g.xAxisZoomRange[1] instanceof Date) {\n                                zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                            }\n\n                            if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                                return;\n                            }\n\n                            if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                                g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                                    Math.pow(Dygraph.LOG_SCALE, maxDate)];\n                            } else {\n                                g.dateWindow_ = [minDate, maxDate];\n                            }\n                        }\n                    }\n                    g.drawGraph_(false);\n                }\n\n\n                function offsetToPercentage(g, offsetX, offsetY) {\n                    // This is calculating the pixel offset of the leftmost date.\n                    var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n                    var yar0 = g.yAxisRange(0);\n\n                    // This is calculating the pixel of the higest value. (Top pixel)\n                    var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n                    // x y w and h are relative to the corner of the drawing area,\n                    // so that the upper corner of the drawing area is (0, 0).\n                    var x = offsetX - xOffset;\n                    var y = offsetY - yOffset;\n\n                    // This is computing the rightmost pixel, effectively defining the\n                    // width.\n                    var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n                    // This is computing the lowest pixel, effectively defining the height.\n                    var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n                    // Percentage from the left.\n                    var xPct = w == 0 ? 0 : (x / w);\n                    // Percentage from the top.\n                    var yPct = h == 0 ? 0 : (y / h);\n\n                    // The (1-) part below changes it from \"% distance down from the top\"\n                    // to \"% distance up from the bottom\".\n                    return [xPct, (1 - yPct)];\n                }\n\n\n                function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n\n                    function adjustAxis(axis, zoomInPercentage, bias) {\n                        var delta = axis[1] - axis[0];\n                        var increment = delta * zoomInPercentage;\n                        var foo = [increment * bias, increment * (1 - bias)];\n                        return [axis[0] + foo[0], axis[1] - foo[1]];\n                    }\n\n                    xBias = xBias || 0.5;\n                    yBias = yBias || 0.5;\n                    var yAxes = g.axes_;\n                    var newYAxes = [];\n                    for (var i = 0; i < g.numAxes(); i++) {\n                        newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n                    }\n                    if ('v' == direction) {\n                        if ('l' == side) {\n                            yAxes[0]['valueRange'] = newYAxes[0];\n                            yAxes[0]['valueWindow'] = newYAxes[0];\n                        } else if ('r' == side && g.numAxes() == 2) {\n                            yAxes[1]['valueRange'] = newYAxes[1];\n                            yAxes[1]['valueWindow'] = newYAxes[1];\n                        }\n                        g.drawGraph_(false);\n                    } else {\n\n                        var ranges = [];\n                        angular.forEach(g.xAxisRange(), function (range) {\n                            if (range instanceof Date) {\n                                ranges.push(range.getTime());\n                            } else {\n                                ranges.push(range);\n                            }\n                        });\n\n                        var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                        // do not bigger than range data\n                        var zoomRange = [];\n                        if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                            zoomRange[0] = g.xAxisZoomRange[0];\n                            zoomRange[1] = g.xAxisZoomRange[1];\n                        } else {\n                            zoomRange[0] = g.xAxisExtremes()[0];\n                            zoomRange[1] = g.xAxisExtremes()[1];\n                        }\n                        if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                            return;\n                        } else if (newZoomRange[0] >= newZoomRange[1]) {\n                            return;\n                        } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                            g.updateOptions({\n                                dateWindow: [zoomRange[0], newZoomRange[1]]\n                            });\n                        } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                            g.updateOptions({\n                                dateWindow: [newZoomRange[0], zoomRange[1]]\n                            });\n                        } else {\n                            g.updateOptions({\n                                dateWindow: newZoomRange\n                            });\n                        }\n                    }\n                }\n\n                var zoomTimer = null;\n                var scroll = function (e, g, context) {\n\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n\n                    if (zoomTimer) {\n                        timeOut.cancel(zoomTimer);\n                    }\n                    var normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n                    // For me the normalized value shows 0.075 for one click. If I took\n                    // that verbatim, it would be a 7.5%.\n                    var percentage = normal / 50;\n\n                    if (!(e.offsetX && e.offsetY)) {\n                        e.offsetX = e.layerX - e.target.offsetLeft;\n                        e.offsetY = e.layerY - e.target.offsetTop;\n                    }\n                    var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n                    var xPct = percentages[0];\n                    var yPct = percentages[1];\n                    //\n                    if (e.offsetX <= (g.plotter_.area.x)) {\n                        // console.info(\"v\", \"l\")\n                        // left zoom\n                        zoom(g, percentage, xPct, yPct, 'v', 'l');\n                    } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                        // right zoom\n                        // console.info(\"v\", \"r\")\n                        zoom(g, percentage, xPct, yPct, 'v', 'r');\n                    } else {\n                        // middle zoom\n                        // console.info(\"h\")\n                        zoom(g, percentage, xPct, yPct, 'h', null);\n                    }\n\n                    Dygraph.cancelEvent(e);\n                    timeOut(function () {\n                        scope.chartDateWindow = g.xAxisRange();\n                    });\n\n                };\n\n                var firstPoint = null;\n                var mousedownHandler = function (e, g, context) {\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n                    context.initializeMouseDown(e, g, context);\n                    firstPoint = e.clientX;\n                    Dygraph.startPan(e, g, context);\n                };\n                var mousemoveHandler = function (e, g, context) {\n                    if (context.isPanning) {\n                        if (event.offsetX <= (g.plotter_.area.x)) {\n                            movePan(event, g, context, 'r');\n                        } else if (event.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                            movePan(event, g, context, 'l');\n                        } else {\n                            movePan(event, g, context, 'h');\n                        }\n                        timeOut(function () {\n                            scope.chartDateWindow = scope.currentChart.xAxisRange();\n                        });\n                    }\n                };\n\n                var mouseupHandler = function (e, g, context) {\n                    if (context.isPanning) {\n                        Dygraph.endPan(e, g, context);\n                    }\n                };\n\n                var interactionModel = {\n                    'mousewheel': scroll,\n                    'DOMMouseScroll': scroll,\n                    'mousedown': mousedownHandler,\n                    'mousemove': mousemoveHandler,\n                    'mouseup': mouseupHandler\n                };\n\n\n                //init configuration\n                var configuration = {\n                    drawGapEdgePoints: true,\n                    'pointSize': 3,\n                    labelsKMB: true,\n                    // data formate\n                    labels: ['x'].concat(sampleData.labels),\n                    highlightCircleSize: 2,\n                    strokeWidth: 1,\n                    highlightSeriesOpts: {\n                        strokeWidth: 2,\n                        strokeBorderWidth: 1,\n                        highlightCircleSize: 2\n                    },\n                    drawPoints: false,\n                    drawAxesAtZero: false,\n                    labelsDivStyles: {\n                        'text-align': 'right',\n                        'position': 'relative',\n                        'display': 'inline-block'\n                    },\n                    yRangePad: 10,\n                    // x label y label\n                    ylabel: 'Value',\n                    xlabel: 'Date',\n                    colors: scope.defaultColors,\n                    // multiple Y axis\n                    series: {\n                        'Device0': {\n                            axis: 'y2'\n                        },\n                        'Device4': {\n                            axis: 'y2'\n                        }\n                    },\n                    // showRangeSelector: true,\n                    axes: {\n                        y: {\n                            valueRange: [0, 1]\n                        },\n                        y2: {\n                            // set axis-related properties here\n                            'labelsKMB': true,\n                            valueRange: [0, 1]\n                        },\n                        x: {\n                            // datetime format\n                            valueFormatter: function (y) {\n                                return moment(y).format('LLLL'); //Hide legend label\n                            }\n                        }\n                    },\n                    pointClickCallback: function (e, p) {\n                        if (scope.currentView != -1) {\n                            scope.showOne(p.name);\n                        }\n                    },\n                    drawCallback: function (g, isInit) {\n                        timeOut(function () {\n                            if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                                scope.refersh(g);\n                            }\n                        });\n                    },\n                    'interactionModel': interactionModel\n                };\n\n                scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n                element.find(\"canvas\").css(\"zIndex\", 99);\n\n\n                if (attrs.hasOwnProperty(\"shown\")) {\n\n\n                    var basicInfo = scope.basicInfo;\n                    if (basicInfo && basicInfo.range_show) {\n                        scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                                xAxisHeight: 0,\n                                axes: {\n                                    x: {\n                                        drawAxis: false\n                                    }\n                                },\n                                showRangeSelector: true,\n                                rangeSelectorHeight: 30\n                            }\n                        );\n                        scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n                    }\n\n\n                    var status = false;\n                    // add mouse up event to range select\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function (event) {\n                        status = false;\n                        timeOut(function () {\n                            var finalDateRagne = scope.currentChart.xAxisRange();\n                            scope.chartDateTime = {begin: finalDateRagne[0], end: finalDateRagne[1]};\n                        });\n                    });\n\n                    scope.$on('mouseUpMessage', function ($scope, e) {\n                        if (\"mouseup\" === e.type && status) {\n                            status = false;\n                            timeOut(function () {\n                                var finalDateRange = scope.currentChart.xAxisRange();\n                                scope.chartDateTime = {begin: finalDateRange[0], end: finalDateRange[1]};\n                            });\n                        }\n                    });\n\n                    scope.$on('bindFatherGraphEvent', function (event, data) {\n                        angular.forEach(data.children, function (child) {\n                            if (child == attrs.id) {\n                                Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                                    zoom: true,\n                                    selection: false,\n                                    range: false\n                                });\n                                scope.currentChart.updateOptions({\n                                    drawCallback: function (g, isInit) {\n                                        timeOut(function () {\n                                            scope.refersh(g);\n                                        });\n                                    }\n                                });\n                            }\n                        });\n\n\n                    });\n\n\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function (event) {\n                        if (status) {\n                            timeOut(function () {\n                                scope.chartDateWindow = scope.currentChart.xAxisRange();\n                            });\n                        }\n                    });\n\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function (event) {\n                        status = true;\n                    });\n\n                    //bind chart\n                    if (basicInfo && basicInfo.childrenChart.length > 0) {\n                        var param = {'graphs': [scope.currentChart], children: basicInfo.childrenChart};\n                        if (scope.rangeSelectorBar) {\n                            param.graphs.push(scope.rangeSelectorBar);\n                        }\n                        scope.$emit('bindChildChartEvent', param);\n                    }\n                }\n            }, 0\n        );\n    };\n\n    //controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\n    fgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope) {\n        var element_id = $element.attr(\"id\");\n        $scope.elementId = element_id;\n\n        $scope['defaultColors'] = dataService.defaultColors();\n        var metadata = null;\n        var widgetData = null;\n        $scope.emptyDataShow = false;\n        // attributes----------------------\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.data && widgetData.from == \"show\") {\n            $scope.loadingShow = false;\n\n            $scope.intevals = {device: []};\n\n\n            // update chart\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if (widgetData.data.metadata.css) {\n                $scope.css = widgetData.data.metadata.css;\n            }\n\n            //fix interval\n            $scope.fixInterval = false;\n            var noneFixed = [];\n            $scope.fixGraphWithGap = function () {\n                if ($scope.currentChart && $scope.fixInterval) {\n                    var currentInterval = -1;\n                    angular.forEach($scope.intevals.device, function (item) {\n                        if (item.name === $scope.currentIntervalName) {\n                            currentInterval = item.interval;\n                        }\n                    });\n                    if (noneFixed && noneFixed.length > 0) {\n                        //fix\n                        //get first one\n                        var fixed = [noneFixed[0]];\n                        var tempDate = fixed[0][0].getTime() + currentInterval;\n                        while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                            var flag = false;\n                            // add new\n                            for (var i = 0; i < noneFixed.length; i++) {\n                                if (noneFixed[i][0].getTime() == tempDate) {\n                                    flag = true;\n                                    fixed.push(noneFixed[i]);\n                                    break;\n                                }\n                            }\n\n                            if (!flag) {\n                                var obj = [new Date(tempDate)];\n                                // add NaN\n                                for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                    obj.push(NaN);\n                                }\n                                fixed.push(obj);\n                            }\n                            tempDate += currentInterval;\n                        }\n                        $scope.currentChart.updateOptions({file: fixed});\n                    }\n                } else if ($scope.currentChart && !$scope.fixInterval) {\n                    noneFixed = [];\n                    angular.copy($scope.currentChart.file_, noneFixed);\n                    $scope.currentChart.updateOptions({file: noneFixed});\n                }\n\n            };\n            $scope.fixGraphWithGap_click = function () {\n                if ($scope.currentChart && !$scope.fixInterval) {\n                    noneFixed = [];\n                    angular.copy($scope.currentChart.file_, noneFixed);\n                    var currentInterval = -1;\n                    angular.forEach($scope.intevals.device, function (item) {\n                        if (item.name === $scope.currentIntervalName) {\n                            currentInterval = item.interval;\n                        }\n                    });\n                    if (noneFixed && noneFixed.length > 0) {\n                        //fix\n                        //get first one\n                        var fixed = [noneFixed[0]];\n                        var tempDate = fixed[0][0].getTime() + currentInterval;\n                        while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                            var flag = false;\n                            // add new\n                            for (var i = 0; i < noneFixed.length; i++) {\n                                if (noneFixed[i][0].getTime() == tempDate) {\n                                    flag = true;\n                                    fixed.push(noneFixed[i]);\n                                    break;\n                                }\n                            }\n\n                            if (!flag) {\n                                var obj = [new Date(tempDate)];\n                                // add NaN\n                                for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                    obj.push(NaN);\n                                }\n                                fixed.push(obj);\n                            }\n                            tempDate += currentInterval;\n                        }\n                        $scope.currentChart.updateOptions({file: fixed});\n                    }\n                } else if ($scope.currentChart && $scope.fixInterval) {\n                    $scope.currentChart.updateOptions({file: noneFixed});\n                }\n\n            };\n\n\n            metadata = widgetData.data.metadata;\n            $scope.basicInfo = metadata.data.basic;\n            $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.data_from = \"application\";\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n\n\n                $scope.$watch('currentView', function (nObj, oObj) {\n                    // change\n                    if (nObj != oObj) {\n                        if (nObj == -1) {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular.forEach(metadata.data.groups[1].collections, function (level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                // show device view\n                                dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                                    initChart(data);\n                                }, function (error) {\n                                    console.error(error)\n                                });\n                            }\n\n                        } else {\n                            //get relation config\n                            if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                                return;\n                            } else {\n                                var rangeLevel = null;\n                                var otherLevels = [];\n                                angular.forEach(metadata.data.groups[2].collections, function (level) {\n                                    if (level.rows.length > 0) {\n                                        if (rangeLevel != null) {\n                                            otherLevels.push(rangeLevel);\n                                        }\n                                        rangeLevel = level.name;\n                                    }\n                                });\n                                if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                    // show children view\n                                    dataService.childrenDeviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, rangeLevel, otherLevels).then(function (data) {\n                                        // get all device trees\n                                        if (data != null && data.length > 0) {\n                                            initChildrenChart(data);\n                                        } else {\n                                            return;\n                                        }\n\n                                    }, function (error) {\n                                        console.error(error)\n                                    });\n\n                                }\n                            }\n                        }\n                    }\n                    $scope.fixInterval = false;\n\n                });\n\n\n                // first time of showing chart\n                $scope.$watch('currentChart', function (newValue) {\n                    if (newValue) {\n                        //device first level\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular.forEach(metadata.data.groups[1].collections, function (level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        //send a rest request\n                        dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                            initChart(data);\n                        }, function (error) {\n                            console.error(error)\n                        });\n                    }\n                });\n\n\n                $scope.$watch(\"chartDateTime\", function (newValue, oldValue) {\n                    if (newValue.begin != oldValue.begin || newValue.end != oldValue.end) {\n                        var expect_points = Math.floor($element.parent().width() / 2);\n                        // find a interval\n                        var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                        var conf = $scope.intevals.device;\n                        // device detail view\n                        var preOne = conf[0].interval;\n                        var lastOne = conf[conf.length - 1].interval;\n                        var cin = \"\";\n                        if (expectedInterval >= preOne) {\n                            expectedInterval = preOne;\n                        } else if (expectedInterval <= lastOne) {\n                            expectedInterval = lastOne;\n                        } else {\n                            for (var i = 1; i < conf.length; i++) {\n                                if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                    expectedInterval = preOne;\n                                } else {\n                                    preOne = conf[i].interval;\n                                    cin = conf[i].name;\n                                }\n                            }\n                        }\n                        $scope.currentIntervalName = \"\";\n\n                        angular.forEach(conf, function (config) {\n                            if (config.interval == expectedInterval) {\n                                $scope.currentIntervalName = config.name;\n                            }\n                        });\n                        $scope.loadingShow = true;\n                        if ($scope.currentView == 1) {\n                            // scatter detail view\n                            if (expectedInterval == conf[0].interval) {\n                                // set valueRange;\n                                // re cal max and min\n                                // $scope.childrenRangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                                $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n                                // if ($scope.rangeSelectorBar) {\n                                // $scope.rangeSelectorBar.updateOptions({series: $scope.childRangeSeries});\n                                // }\n                                $scope.loadingShow = false;\n                            } else {\n                                var deviceInfo = [];\n                                var currentStore = \"\";\n                                // has problem....\n                                angular.forEach($scope.childTrees, function (device) {\n                                    angular.forEach(device.trees, function (tree, index) {\n                                        if (expectedInterval == tree.frequency && index != 0) {\n                                            currentStore = tree.store;\n                                            deviceInfo.push({name: device.name, tree: tree.tree});\n                                        }\n                                    });\n                                });\n\n                                dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, newValue.begin, newValue.end).then(function (data) {\n                                    var showData = [];\n                                    angular.forEach(data, function (arr) {\n                                        var deviceData = [];\n                                        angular.forEach(arr.data, function (bucket) {\n                                            if (bucket.data != null) {\n                                                Array.prototype.push.apply(deviceData, bucket.data.slice(0, bucket.size));\n                                            }\n                                        });\n                                        showData.push({device: arr.device, data: deviceData});\n                                    });\n                                    //get configuration\n                                    updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n\n                                }, function (data) {\n                                    console.info(data);\n                                });\n                            }\n                            $scope.fixGraphWithGap();\n                        } else {\n                            // if expected interval is the biggest, show range data\n                            if (expectedInterval == conf[0].interval) {\n                                if (!($scope.chartDateWindow[0] instanceof Date)) {\n                                    $scope.chartDateWindow[0] = new Date($scope.chartDateWindow[0]);\n                                }\n\n                                if (!($scope.chartDateWindow[1] instanceof Date)) {\n                                    $scope.chartDateWindow[1] = new Date($scope.chartDateWindow[1]);\n                                }\n                                $scope.rangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                                // set valueRange\n                                $scope.currentChart.updateOptions($scope.rangeConfig);\n                                if ($scope.rangeSelectorBar && $scope.rangeSeries) {\n                                    $scope.rangeSelectorBar.updateOptions({series: $scope.rangeSeries});\n                                }\n                                // tell some other widgets, the graph is changed.\n                                $timeout(function () {\n                                    $rootScope.$broadcast('chartDataChangeEvent', {\n                                        'id': element_id,\n                                        'group': 'device',\n                                        'data': {\n                                            'collection': conf[0].name,\n                                            'group': 'device',\n                                            'data': $scope.ordinalRangeData.filter(function (obj) {\n                                                return obj.timestamp >= $scope.rangeConfig[\"dateWindow\"][0].getTime() && obj.timestamp <= $scope.rangeConfig[\"dateWindow\"][1].getTime();\n                                            })\n                                        }\n                                    });\n                                });\n\n                                $scope.loadingShow = false;\n                            } else {\n                                // cal tree\n                                angular.forEach($scope.trees, function (tree, index) {\n                                    if (expectedInterval == tree.frequency && index != 0) {\n                                        // send request\n                                        dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, newValue.begin, newValue.end).then(function (data) {\n                                            // udpate chart\n                                            var showData = [];\n                                            angular.forEach(data, function (arr) {\n                                                Array.prototype.push.apply(showData, arr.data.slice(0, arr.size));\n                                            });\n                                            showData = showData.filter(function (obj) {\n                                                return obj != null;\n                                            });\n                                            showData.sort(function (a, b) {\n                                                return a.timestamp > b.timestamp ? 1 : -1;\n                                            });\n                                            //get configuration\n                                            updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                            // tell some other widgets, the graph is changed.\n                                            $timeout(function () {\n                                                $rootScope.$broadcast('chartDataChangeEvent', {\n                                                    'id': element_id,\n                                                    'group': 'device',\n                                                    'data': {\n                                                        'collection': tree.store,\n                                                        'group': 'device',\n                                                        'data': showData\n                                                    }\n                                                });\n                                            });\n\n                                        }, function (data) {\n                                            console.info(data);\n                                        });\n                                    }\n                                });\n                            }\n                            $scope.fixGraphWithGap();\n                        }\n                        $scope.status = false;\n                    }\n                });\n\n\n            });\n\n\n            var fetchData = function (values, node) {\n                if (node.children[0] != null) {\n                    fetchData(values, node.children[0]);\n                }\n\n                if (node.children[1] != null) {\n                    fetchData(values, node.children[1]);\n                }\n\n                if (node.children[0] == null && node.children[1] == null) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                }\n\n            };\n\n\n            $scope.trees = [];\n\n            $scope.rangeData = [];\n\n            $scope.ordinalRangeData = [];\n\n            var initChart = function (data) {\n                $scope.intevalforshow = [];\n                //\n                $scope.intevals.device = [];\n                var trees = data.trees;\n                $scope.trees = trees;\n                var rangeTree = null;\n                angular.forEach(trees, function (tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n                    $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                });\n\n\n                // init chart with range data\n                var store = rangeTree.store;\n\n                // get all data\n                var allData = [];\n                fetchData(allData, rangeTree.tree);\n                allData = allData.filter(function (obj) {\n                    return obj != null;\n                });\n                allData.sort(function (a, b) {\n                    return a.timestamp > b.timestamp ? 1 : -1;\n                });\n\n\n                if ($scope.trees.length == 0 || allData.length == 0) {\n                    $scope.emptyDataShow = true;\n                    return;\n                }\n\n                // if the data only has one point. change the data range to bigger\n                if (allData.length == 1) { //  means only one point.\n                    var newData = [];\n                    // add 1 points into both side\n                    var thePoint = allData[0];\n                    var timestamp = thePoint.timestamp;\n                    var currentInterval = $scope.intevals.device[0].interval;\n                    newData.push({timestamp: timestamp - currentInterval});\n                    Array.prototype.push.apply(newData, allData);\n                    newData.push({timestamp: timestamp + currentInterval});\n                    allData = newData;\n                }\n                $scope.ordinalRangeData = allData;\n                // get configuration and make real data\n                updateChart(metadata, store, allData);\n            };\n\n            var initChildrenChart = function (deviceDatas) {\n                var devicesInfo = {};\n                $scope.intevals.device = [];\n                //range data with all device\n                $scope.childTrees = [];\n                angular.forEach(deviceDatas, function (deviceData) {\n                    var device = deviceData.device;\n                    var trees = deviceData.trees;\n                    $scope.childTrees.push({name: device.name, trees: trees});\n                    var rangeTree = null;\n                    angular.forEach(trees, function (tree) {\n                        if (tree.range) {\n                            rangeTree = tree;\n                        }\n\n                        var flag = false;\n                        angular.forEach($scope.intevals.device, function (interval) {\n                            if (interval.name == tree.store && interval.interval == tree.frequency) {\n                                // has same one\n                                flag = true;\n                            }\n                        });\n                        if (!flag) {\n                            $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                        }\n\n                    });\n\n                    if (rangeTree != null) {\n                        var deviceObj = devicesInfo[device.name] = {};\n                        // get all data\n                        var allData = [];\n                        fetchData(allData, rangeTree.tree);\n                        allData = allData.filter(function (obj) {\n                            return obj != null;\n                        });\n                        allData.sort(function (a, b) {\n                            return a.timestamp > b.timestamp ? 1 : -1;\n                        });\n                        //\n                        deviceObj[\"range\"] = rangeTree;\n                        deviceObj[\"data\"] = allData;\n                    } else {\n                        console.info(device.name + \" has none data.\");\n                    }\n\n                });\n\n                updateChildrenChart(metadata, devicesInfo);\n            };\n\n\n            var updateChildrenChart = function (metadata, devicesInfo) {\n                //relation\n                var relationConfig = metadata.data.groups[2];\n                // scatter view shows only one collection\n                var collections = relationConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n                var allLines = [];\n                var allXLabels = [];\n                angular.forEach(devicesInfo, function (device, key) {\n                    angular.forEach(device.data, function (item) {\n                        var flag = false;\n                        angular.forEach(allXLabels, function (label) {\n                            if (label.getTime() == item.timestamp) {\n                                flag = true;\n                            }\n                        });\n                        if (!flag) {\n                            allXLabels.push(new Date(item.timestamp));\n                        }\n\n\n                    });\n                });\n                // order\n                allXLabels.sort(function (a, b) {\n                    return a > b ? 1 : -1;\n                });\n\n                // make all line\n                angular.forEach(allXLabels, function (label) {\n                    allLines.push([label]);\n                });\n\n\n                var yRange = {min: null, max: null};\n                var showY2axis = false;\n                var counter = 0;\n                angular.forEach(devicesInfo, function (device, key) {\n                    colors.push($scope.defaultColors[counter]);\n                    counter++;\n\n                    angular.forEach(collections, function (collection) {\n                        if (collection.name == device.range.store) {\n                            $scope.currentIntervalName = device.range.store;\n                            var originalData = device.data;\n\n                            // always same for each device\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {'axis': 'y1'};\n                            } else {\n                                series[collection.rows[0].label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            labels.push(key);\n                            // make a line\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            // add value\n                            angular.forEach(allLines, function (realLine, index) {\n\n                                var flag = false;\n                                angular.forEach(originalData, function (odata) {\n                                    if (realLine[0].getTime() == odata.timestamp) {\n                                        try {\n                                            var value = f(odata);\n                                            realLine.push(value);\n                                            if (yRange.min == null) {\n                                                yRange.min = value;\n                                            }\n\n                                            if (yRange.max == null) {\n                                                yRange.max = value;\n                                            }\n\n                                            if (yRange.min > value) {\n                                                yRange.min = value;\n                                            }\n\n                                            if (yRange.max < value) {\n                                                yRange.max = value;\n                                            }\n                                        } catch (ex) {\n                                            realLine.push(null);\n                                        }\n                                        flag = true;\n                                    }\n                                });\n\n                                if (!flag) {\n                                    realLine.push(null);\n                                }\n                            });\n\n\n                        }\n                    });\n                });\n\n                if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                    yRange.min = yRange.min - (yRange.min) * 0.10;\n                    yRange.max = yRange.max + (yRange.max) * 0.10;\n                }\n                //update chart\n\n                if ($scope.currentChart) {\n                    $scope.rangeChildrenData = allLines;\n\n                    if (showY2axis) {\n                        $scope.childrenRangeConfig = {\n                            'labelsKMB': true,\n                            'file': allLines,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max]},\n                                'y2': {}\n                            }\n                            // showRangeSelector: true\n                        };\n                    } else {\n                        var newLines = [];\n                        angular.copy(allLines, newLines);\n                        angular.forEach(newLines, function (line) {\n                            line.push(NaN);\n                        });\n                        series[\"span_y2\"] = {'axis': 'y2'};\n                        $scope.childrenRangeConfig = {\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': newLines,\n                            'labels': ['x'].concat(labels).concat(['span_y2']),\n                            'ylabel': leftAndRight.left,\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max]},\n                                'y2': {\n                                    axisLabelFormatter: function (d) {\n                                        return '';\n                                    }\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                    }\n                    $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n                    $scope.loadingShow = false;\n                }\n\n\n            };\n\n\n            var updateChildrenDetailChart = function (metadata, store, rangeData, allData) {\n                //relation\n                var relationConfig = metadata.data.groups[2];\n                // scatter view shows only one collection\n                var collections = relationConfig.collections;\n                var newLines = [];\n                var newTime = [];\n                var series = {};\n                var labels = [];\n                var colors = [];\n                var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n                var yRange = {min: null, max: null};\n                var counter = 0;\n                var showY2axis = null;\n                angular.forEach(allData, function (device) {\n                    colors.push($scope.defaultColors[counter]);\n                    counter++;\n\n                    if (device.data.length > 0) {\n                        labels.push(device.device);\n                        angular.forEach(collections, function (collection) {\n                            if (collection.name == store) {\n                                $scope.currentIntervalName = store;\n                                if (collection.rows[0].yaxis == 0) {\n                                    series[collection.rows[0].label] = {'axis': 'y1'};\n                                } else {\n                                    series[collection.rows[0].label] = {'axis': 'y2'};\n                                    showY2axis = true;\n                                }\n                                var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \")return \" + collection.rows[0].value + \";return null;}\");\n                                var tempData = [];\n                                var tempTime = [];\n                                // make data\n                                angular.forEach(device.data, function (data) {\n                                    var dateTime = new Date(data.timestamp);\n                                    try {\n                                        var value = f(data);\n                                        tempData.push({timestamp: dateTime, value: value});\n\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n\n                                    } catch (e) {\n                                        tempData.push({timestamp: dateTime, value: null});\n                                    }\n                                    tempTime.push(dateTime.getTime());\n                                });\n                                newTime = newTime.concat(tempTime.filter(function (item) {\n                                    return newTime.indexOf(item) < 0;\n                                }));\n                                newLines.push({device: device.device, data: tempData});\n                            }\n                        });\n                    }\n                });\n\n                var chartData = [];\n\n                angular.forEach(newTime, function (nt) {\n                    chartData.push([new Date(nt)]);\n                });\n\n\n                angular.forEach(newLines, function (line) {\n                    angular.forEach(chartData, function (timeTicket) {\n                        // line data\n                        var flag = false;\n                        var lineData = line.data;\n                        for (var i = 0; i < lineData.length; i++) {\n                            if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                                timeTicket.push(lineData[i].value);\n                                flag = true;\n                                break;\n                            }\n                        }\n                        if (flag != true) {\n                            timeTicket.push(null);\n                        }\n                    });\n                });\n\n\n                if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                    yRange.min = yRange.min - (yRange.min) * 0.10;\n                    yRange.max = yRange.max + (yRange.max) * 0.10;\n                }\n\n\n                if (chartData.length == 0) {\n                    $scope.currentChart.updateOptions({\n                        'file': []\n                    });\n                    $scope.loadingShow = false;\n                } else {\n                    if ($scope.currentChart) {\n\n                        if (showY2axis) {\n                            $scope.currentChart.updateOptions({\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': chartData,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRange.min, yRange.max]}\n                                }\n                                // showRangeSelector: true\n                            });\n                        } else {\n                            var newLines = [];\n                            angular.copy(chartData, newLines);\n                            angular.forEach(newLines, function (line) {\n                                line.push(NaN);\n                            });\n                            series[\"span_y2\"] = {axis: 'y2'};\n                            $scope.currentChart.updateOptions({\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRange.min, yRange.max]},\n                                    \"y2\": {\n                                        axisLabelFormatter: function (d) {\n                                            return '';\n                                        }\n                                    }\n                                }\n                                // showRangeSelector: true\n                            });\n                        }\n                        $scope.loadingShow = false;\n                    }\n                }\n\n\n            };\n\n\n            /**\n             * update detail chart\n             * @param metadata\n             * @param store\n             * @param rangeData\n             * @param allData\n             */\n            var updateDetailChart = function (metadata, store, rangeData, allData) {\n                var deviceConfig = metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{min: null, max: null}, {min: null, max: null}];\n                angular.forEach(collections, function (collection) {\n                    if (collection.name == store) {\n                        angular.forEach(allData, function (line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        // var yRange = {'min': null, 'max': null};\n                        var showY2axis = false;\n                        angular.forEach(collection.rows, function (row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {'axis': 'y1'};\n                            } else {\n                                series[row.label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \")return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular.forEach(allLines, function (realLine) {\n                                try {\n                                    var value = f(allData[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular.forEach(yRanges, function (yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        if (allLines.length == 0) {\n                            $scope.currentChart.updateOptions({\n                                'file': []\n                            });\n                            if ($scope.rangeSelectorBar) {\n                                $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                            }\n                            $scope.loadingShow = false;\n                        } else {\n                            if ($scope.currentChart) {\n\n                                if (showY2axis) {\n                                    $scope.currentChart.updateOptions({\n                                        'drawGapEdgePoints': true,\n                                        'pointSize': 3,\n                                        'labelsKMB': true,\n                                        'file': allLines,\n                                        'labels': ['x'].concat(labels),\n                                        'ylabel': leftAndRight.left,\n                                        'y2label': leftAndRight.right,\n                                        'series': series,\n                                        'axes': {\n                                            'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                            'y2': {'labelsKMB': true, valueRange: [yRanges[1].min, yRanges[1].max]}\n                                        },\n                                        'colors': colors\n                                        // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    });\n                                } else {\n\n                                    var newLines = [];\n                                    angular.copy(allLines, newLines);\n                                    angular.forEach(newLines, function (line) {\n                                        line.push(NaN);\n                                    });\n\n                                    series[\"span-Y2\"] = {axis: 'y2'};\n                                    $scope.currentChart.updateOptions({\n                                        'drawGapEdgePoints': true,\n                                        'pointSize': 3,\n                                        'labelsKMB': true,\n                                        'file': newLines,\n                                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                                        'ylabel': leftAndRight.left,\n                                        'y2label': \"\",\n                                        'series': series,\n                                        'axes': {\n                                            'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                            'y2': {\n                                                axisLabelFormatter: function (d) {\n                                                    return '';\n                                                }\n                                            }\n                                        },\n                                        'colors': colors\n                                        // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    });\n\n                                }\n\n                                $scope.loadingShow = false;\n                            }\n                        }\n\n\n                    }\n                });\n\n\n            };\n\n            /**\n             * update range chart\n             * @param metadata\n             * @param store\n             * @param allData\n             */\n            var updateChart = function (metadata, store, allData) {\n                var deviceConfig = metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{min: null, max: null}, {min: null, max: null}];\n                angular.forEach(collections, function (collection) {\n                    if (collection.name == store) {\n                        $scope.currentIntervalName = store;\n                        angular.forEach(allData, function (line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        $scope.rangeSeriesNumber = collection.rows.length;\n                        var showY2axis = false;\n                        angular.forEach(collection.rows, function (row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {'axis': 'y1'};\n                            } else {\n                                series[row.label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular.forEach(allLines, function (realLine) {\n                                try {\n                                    var value = f(allData[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        if ($scope.currentChart) {\n                            $scope.rangeData = allLines;\n                            var basicInfo = $scope.basicInfo;\n                            if (basicInfo && basicInfo.range_show) {\n                                var rangeBarLabels = [];\n                                for (var i = 0; i < labels.length; i++) {\n                                    rangeBarLabels.push(\"l\" + i);\n                                }\n                                var series_range = {'l0': {axis: 'y1'}};\n                                if (showY2axis) {\n                                    //noinspection JSDuplicatedDeclaration\n                                    series_range = {\n                                        'l0': {axis: 'y1'},\n                                        'l0': {axis: 'y2'}\n                                    };\n                                    $scope.rangeSeries = series_range;\n\n                                    $scope.rangeSelectorBar.updateOptions({\n                                        'file': allLines,\n                                        'labels': ['x'].concat(rangeBarLabels),\n                                        'series': series_range\n                                    });\n                                } else {\n                                    series_range[\"span_y2\"] = {axis: 'y2'};\n                                    $scope.rangeSeries = series_range;\n                                    var newLines = [];\n                                    angular.copy(allLines, newLines);\n                                    angular.forEach(newLines, function (line) {\n                                        line.push(NaN);\n                                    });\n                                    $scope.rangeSelectorBar.updateOptions({\n                                        'file': newLines,\n                                        'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                        'series': series_range\n                                    });\n                                }\n\n\n                            }\n\n                            angular.forEach(yRanges, function (yrange) {\n                                if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                    yrange.min = yrange.min - (yrange.min) * 0.10;\n                                    yrange.max = yrange.max + (yrange.max) * 0.10;\n                                }\n                            });\n\n\n                            // if graph has 2 yAxis or a yAxis\n\n\n                            if (showY2axis) {\n                                $scope.rangeConfig = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'colors': colors,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                        'y2': {'labelsKMB': true, valueRange: [yRanges[1].min, yRanges[1].max]}\n                                    },\n                                    'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    // showRangeSelector: true\n                                };\n                            } else {\n                                series['span_y2'] = {axis: 'y2'};\n                                var newLines = [];\n                                angular.copy(allLines, newLines);\n                                angular.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeConfig = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'colors': colors,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                        'y2': {\n                                            axisLabelFormatter: function (d) {\n                                                return '';\n                                            }\n                                        }\n                                    },\n                                    'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    // showRangeSelector: true\n                                };\n                            }\n\n\n                            if (basicInfo && basicInfo.range_show) {\n                                Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                    zoom: true,\n                                    selection: false,\n                                    range: false\n                                });\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            //bind\n                            $scope.loadingShow = false;\n                        }\n\n                    }\n                });\n            };\n\n\n            $scope.chartDateTime = {begin: null, end: null};\n\n            // function for show one\n            $scope.showOne = function (deviceName) {\n                // device type is\n                if ($location.url().indexOf('/app/page/param/') != -1) {\n                    //open window\n                    $window.open(\"/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n                } else {\n                    //open window\n                    $window.open(\"/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n                }\n\n            };\n\n            var timer = null;\n            $scope.refersh = function (g) {\n                if (timer) {\n                    $timeout.cancel(timer);\n                }\n                timer = $timeout(function () {\n                    $scope.chartDateTime = {begin: g.xAxisRange()[0], end: g.xAxisRange()[1]};\n                    $scope.chartDateWindow = g.xAxisRange();\n                }, 600);\n            };\n\n\n        }\n\n    };\n\n\n    fgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location) {\n        fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location);\n        return fgpWidgetGraph.instance;\n    };\n\n    fgpWidgetGraph.$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location'];\n\n    var fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n        var element_id = attrs.id;\n        //drag-channel  item means this widget accepts items\n        var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n            '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n            '<h1>{{css.title.text}}</h1>' +\n            '<h3>{{css.subtitle.text}}</h3>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n        return dom_show;\n    };\n\n\n    fgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.data && widgetData.from == \"show\") {\n            metadata = widgetData.data.metadata;\n            $scope.css = {};\n            $scope.css[\"color\"] = metadata.css.color;\n            $scope.css[\"width\"] = metadata.css.width;\n            $scope.css[\"minHeight\"] = metadata.css.minHeight;\n            $scope.css[\"border\"] = {};\n            $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n            $scope.css[\"background\"] = {};\n            $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n            $scope.css[\"title\"] = metadata.css.title;\n            $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n            $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n            $scope.css[\"subtitle\"] = metadata.css.subtitle;\n            $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n            $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n                $scope.css[\"title\"].text = f(deviceData.device);\n                f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n                $scope.css[\"subtitle\"].text = f(deviceData.device);\n            });\n        }\n\n\n\n\n    };\n\n    fgpWidgetPageTitle.buildFactory = function buildFactory () {\n        fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n        return fgpWidgetPageTitle.instance;\n    };\n\n    var fgpWidgetMap = function fgpWidgetMap() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetMap.prototype.template = function template (element, attrs) {\n        var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n            '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n            '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n            '</ng-map>' +\n            '</div>' +\n            '';\n        return dom_show;\n    };\n\n\n    fgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        /**\n         * get device information\n         */\n        if (widgetData.data && widgetData.from == \"show\") {\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n\n                $scope.showdata = widgetData.data;\n\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n\n                var location = {};\n                $scope.markers = [];\n                $scope.details = $scope.$parent.device;\n\n\n                // show one point.\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                        var result = f(deviceData.device);\n                        if (result) {\n                            location[item.label] = result;\n                        } else {\n                            location[item.label] = \"\";\n                        }\n                    } catch (error) {\n                        // show image\n                        if (\"image\" == item.label) {\n                            location[item.label] = item.value;\n                        } else {\n                            location[item.label] = \"\";\n                        }\n\n                    }\n                });\n\n\n                //do not show\n                if (location.latitude == \"\" || location.longitude == \"\") {\n                    //hard code. the location is Melbourne\n                    location.latitude = \"-37.810000\";\n                    location.longitude = \"144.950000\";\n                    $scope.center = [location.latitude, location.longitude];\n                    // $scope.markers.push(location);\n                } else {\n                    $scope.center = [location.latitude, location.longitude];\n                    $scope.markers.push(location);\n                }\n\n            });\n        }\n\n    };\n\n    fgpWidgetMap.buildFactory = function buildFactory () {\n        fgpWidgetMap.instance = new fgpWidgetMap();\n        return fgpWidgetMap.instance;\n    };\n\n    var fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n        return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n            '<div class=\"row\" ng-repeat=\"item in data\">' +\n            '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n            '</div>' +\n            '</div>' +\n            '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n            '</div>' +\n            '</div>';\n    };\n\n\n    fgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n\n        /**\n         * get device information\n         */\n        if (widgetData.data && widgetData.from == \"show\") {\n\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n\n                $scope.showdata = widgetData.data;\n\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n\n\n                $scope.data = [];\n                //get all columns\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                        item.value = f(deviceData.device);\n                        $scope.data.push(item);\n                    } catch (error) {\n                        item.value = \"\";\n                        $scope.data.push(item);\n                    }\n                });\n\n\n            });\n\n        }\n\n    };\n\n\n    fgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n        fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n        return fgpWidgetDeviceDetail.instance;\n    };\n\n    /**\n     * Created by ericwang on 20/06/2016.\n     */\n    var fgpWidgetSpan = function fgpWidgetSpan() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetSpan.prototype.template = function template (scope, element) {\n        return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n            '</div>';\n    };\n\n    fgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        $scope.showdata = widgetData.data;\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if ($scope.showdata.metadata.css) {\n            $scope.css = $scope.showdata.metadata.css;\n        }\n    };\n\n    fgpWidgetSpan.buildFactory = function buildFactory () {\n        fgpWidgetSpan.instance = new fgpWidgetSpan();\n        return fgpWidgetSpan.instance;\n    };\n\n    var fgpWidgetPie = function fgpWidgetPie($timeout) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.$timeout = $timeout;\n    };\n\n\n    fgpWidgetPie.prototype.template = function template (element, attrs) {\n        return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n            '<canvas class=\"fgpPieChart\"></canvas>' +\n            '</div>' +\n            '</div>';\n    };\n\n    fgpWidgetPie.prototype.link = function link (scope, element) {\n\n        this.$timeout(function () {\n            var ctx = element.find(\"canvas\")[0];\n            scope.chart = new Chart(ctx, {\n                type: 'pie',\n                data: {\n                    labels: ['1'],\n                    datasets: [\n                        {\n                            data: [1],\n                            backgroundColor: []\n                        }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    animation: false,\n                    legend: {display: true}\n                }\n            });\n        });\n    };\n\n\n    fgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n        var id = $element.attr(\"id\");\n        var metadata = null;\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.from == \"show\" && widgetData.data) {\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n                $scope.showdata = widgetData.data;\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n                $scope.data = [];\n                var colors = [];\n                //get all columns\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                        item.value = f(deviceData.device);\n                        $scope.data.push(item);\n                    } catch (error) {\n                        item.value = item.value;\n                        $scope.data.push(item);\n                    }\n                    if (item.color) {\n                        colors.push(item.color);\n                    } else {\n                        colors.push('#' + (function co(lor) {\n                                return (lor +=\n                                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                                && (lor.length == 6) ? lor : co(lor);\n                            })(''));\n                    }\n                });\n                // timeout\n                $scope.pieData = {labels: [], value: []};\n                $timeout(function () {\n                    // create data\n                    angular.forEach($scope.data, function (item) {\n                        $scope.pieData.labels.push(item.label);\n                        $scope.pieData.value.push(item.value);\n                    });\n\n                    $scope.chart.data.labels = $scope.pieData.labels;\n                    $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                    $scope.chart.data.datasets[0].backgroundColor = colors;\n                    // update chart\n                    $scope.chart.update();\n                });\n\n            });\n\n\n        }\n\n\n    };\n\n    fgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n        fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n        return fgpWidgetPie.instance;\n    };\n    fgpWidgetPie.$inject = ['$timeout'];\n\n    var fgpWidgetChartTable = function fgpWidgetChartTable() {\n        this.restrict = 'E';\n        this.scope = {};\n    };\n\n    fgpWidgetChartTable.prototype.template = function template (element, attrs) {\n        return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n            '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n            '<thead>' +\n            '<tr>' +\n            '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n            '</tr>' +\n            '</thead>' +\n            '<tbody>' +\n            '<tr ng-repeat=\"value in sampledata.values\">' +\n            '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>' +\n            '</div>';\n    };\n\n    fgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        //show\n        $scope.showdata = widgetData.data;\n\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if ($scope.showdata.metadata.css) {\n            $scope.css = $scope.showdata.metadata.css;\n        }\n\n\n        $scope.$on('chartDataChangeEvent', function (event, chartData) {\n            var chartId = chartData.id;\n            if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n                $scope.sampledata = {};\n                // make data\n                var collectionName = chartData.data.collection;\n                var groupName = chartData.group;\n                var columns = [];\n                //get group and collection configuration\n                angular.forEach($scope.showdata.metadata.data.groups, function (group) {\n                    if (group.name == groupName) {\n                        angular.forEach(group.collections, function (collection) {\n                            if (collection.name === collectionName) {\n                                columns = collection.rows;\n                            }\n                        });\n                    }\n                });\n\n\n                $scope.sampledata.columns = [];\n\n                angular.forEach(columns, function (column) {\n                    $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n                });\n                $scope.sampledata.values = [];\n                angular.forEach(columns, function (column) {\n                    var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                    angular.forEach(chartData.data.data, function (record, index) {\n                        if ($scope.sampledata.values.length < chartData.data.data.length) {\n                            //add new one\n                            var item = {};\n                            item[column.label] = f(record);\n                            $scope.sampledata.values.push(item);\n                        } else {\n                            $scope.sampledata.values[index][column.label] = f(record);\n                        }\n                    });\n                });\n\n                var cleanData = [];\n                angular.forEach($scope.sampledata.values, function (value, index) {\n                    var flag = false;\n                    angular.forEach(columns, function (column) {\n                        if (value[column.label] && value[column.label] != \"\") {\n                            flag = true;\n                        }\n                    });\n\n                    if (flag) {\n                        cleanData.push(value);\n                    }\n                });\n                $scope.sampledata.values = cleanData;\n\n            } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n                //\n\n\n            }\n\n        });\n\n\n    };\n\n    fgpWidgetChartTable.buildFactory = function buildFactory () {\n        fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n        return fgpWidgetChartTable.instance;\n    };\n\n    // angular module\n    angular.module('fgp-kit', ['ngMap']).service('dataService', dataAccessApi.buildFactory).directive('fgpContainer', fgpStage.buildFactory)\n        .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n        .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n        .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n        .directive('widgetMap', fgpWidgetMap.buildFactory)\n        .directive('widgetStatus', fgpStage.buildFactory)\n        .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n        .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n        .directive('widgetPie', fgpWidgetPie.buildFactory)\n        .directive('widgetChartTable', fgpWidgetChartTable.buildFactory).filter('tableformatter', ['$filter', function ($filter) {\n        return function (input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\n    var index = 'fgp-kit';\n\n    return index;\n\n}));\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}