{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","$on","evt","msg","push","forEach","item","id","items","element","find","children","item_new","currentElement","attr","groupItems","dulpItem","findChild4Repeat","param","config","callback","metadata","data","datasource","style","key","from","parentId","parentHtmlObj","arrayItems","newId","i","parent","currentItem","html_render","repeat","append","findChild","sendDeviceData","deviceInfo","then","$broadcast","device","graph","graphs","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","_$http","_$q","indexCache","deviceStores","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","jsonpCallback","contentType","dataType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","jsonp","params","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","fillChildrenTree","buckets","tree","showData","value","array","size","flag","info","fillTree","calTree","start","end","filter","elem","devicesStoreData","store","bucketsData","devicesNullBucket","index","bucketKeys","nullBucket","bucket","deviceBucketKeys","JSON","stringify","deviceData","currentBucketShowData","deviceStoreData","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","_dataService","dom_loading","dom_empty_data","link","status","timeOut","getData","numSeries","numRows","labels","initDate","Date","j","getTime","val","sampleData","movePan","event","g","context","side","playing","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","zoomTimer","scroll","cancel","normal","detail","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","mousedown","mousemove","mouseup","drawGapEdgePoints","pointSize","labelsKMB","concat","highlightCircleSize","strokeWidth","highlightSeriesOpts","strokeBorderWidth","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","on","finalDateRagne","chartDateTime","begin","finalDateRange","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","loadingShow","intevals","height","checked","basic","choosed_range","changeRange","refreshTask","autoRefresh","ostart","oend","refersh_time","refresh","gap","stopRefresh","fixInterval","noneFixed","fixGraphWithGap","currentInterval","currentIntervalName","interval","fixed","tempDate","obj","labels_","NaN","file","copy","file_","fixGraphWithGap_click","parent_container","data_from","$watch","nObj","oObj","groups","collections","level","rows","initChart","relation","relation_group","initChildrenChart","rangeTree","newValue","oldValue","expect_points","expectedInterval","conf","firstOne","lastOne","cin","trees","arr","Array","apply","slice","updateRangeBarChart","currentStore","childTrees","frequency","updateChildrenDetailChart","rangeChildrenData","rangeConfig","rangeSeries","sort","a","b","timestamp","updateDetailChart","rangeData","fetchData","values","node","ordinalRangeData","intevalforshow","rang_start","first","rang_end","last","allData","newData","thePoint","updateChart","deviceDatas","devicesInfo","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allLines","allXLabels","label","yRange","showY2axis","counter","toString","substr","collection","originalData","yaxis","f","Function","realLine","odata","ex","childrenRangeConfig","y2label","newLines","line","axisLabelFormatter","d","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","deviceConfig","yRanges","row","yrange","rangeSeriesNumber","rangeBarLabels","series_range","l0","open","lastIndexOf","timer","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","legend","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","button","shown","buttons","split","healthinfo","action","method","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$stateParams","$websocket","labelstyle","listStyle","deviceType","dataStream","port","onMessage","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","splice","itemIndex","fgpWidgetChartTable","chartId","group","sampledata","collectionName","groupName","columns","column","formatter","record","cleanData","service","input","startsWith","substring","directive","$last"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,$,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\n$ = 'default' in $ ? $['default'] : $;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n\n\n    var graphBindingArray = [];\n\n    $scope.$on('bindChildChartEvent', function (evt, msg) {\n        graphBindingArray.push(msg);\n    });\n\n    $scope.$on('bindChildRepeatEvent', function (evt, msg) {\n        angular$1.forEach($scope.configuration, function (item) {\n            if (item.id == msg.id) {\n                var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                angular$1.forEach(items, function (item_new) {\n                    $scope.showdata[item_new.id] = item;\n                    var currentElement = angular$1.element(item_new);\n                    if (currentElement.attr(\"dulp\")) {\n                        var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                        angular$1.forEach(groupItems, function (dulpItem) {\n                            findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id);\n                        });\n                    }else{\n                        findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id);\n                    }\n                });\n            }\n        });\n    });\n\n    $scope.$on('listStyleEvent', function (evt, param) {\n        var config = $scope.showdata[param.id.replace(\"edit\", \"\")];\n        param.callback(config.metadata.data.datasource.style);\n    });\n\n\n    $scope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n        angular$1.forEach($scope.showdata, function (metadata, key) {\n            if (key == msg.id) {\n                msg.callback({data: metadata, from: 'show'});\n                return;\n            }\n        });\n    });\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                $scope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    $scope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems);\n            }\n            else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                $scope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                findChild(arrayItems[i].id, currentItem, arrayItems);\n            }\n        }\n    }\n\n    angular$1\n        .forEach($scope\n\n                .configuration\n            ,\n            function (item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    $scope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)($scope));\n                    findChild(item.id, currentItem, $scope.configuration);\n                }\n            }\n        )\n    ;\n\n    var\n        sendDeviceData = function () {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    $scope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n        };\n\n    /**\n     * get device information\n     */\n    if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n        // first time\n        sendDeviceData();\n\n        // after every 30 seconds\n        // $interval(function () {\n        // sendDeviceData();\n        // }, 30000);\n    }\n\n\n// all item created;\n    $timeout(function () {\n        angular$1.forEach(graphBindingArray, function (graph) {\n            $scope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n        });\n    });\n};\n\n\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/parameter/jsonp?name=' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices/parameter/jsonp?key=' + deviceKey;\n    }\n\n    $.ajaxSettings.async = false;\n    $.ajax({\n        type: 'GET',\n        url: url,\n        jsonpCallback: 'jsonCallback',\n        contentType: \"application/json\",\n        dataType: 'jsonp',\n        success: function (data) {\n            var url = host + \"/api/\";\n            if (applicationName) {\n                url += \"app/\" + applicationName + \"/devices/extension-types/jsonp?device_type=\";\n            } else {\n                url += \"devices/extension-types/jsonp?device_type=\";\n            }\n            $.ajaxSettings.async = false;\n            $.ajax({\n                type: 'GET',\n                url: url + data.type,\n                jsonpCallback: 'jsonCallback',\n                contentType: \"application/json\",\n                dataType: 'jsonp',\n                success: function (types) {\n                    angular$1.forEach(types, function (type) {\n                        Object.defineProperty(data, type.name, {\n                            get: function () {\n                                var result = null;\n                                var url = host + \"/api/\";\n                                if (applicationName) {\n                                    url += \"app/\" + applicationName + \"/devices/extensions/jsonp?device_name=\";\n                                } else {\n                                    url += \"devices/extensions/jsonp?device_name=\";\n                                }\n                                $.ajaxSettings.async = false;\n                                $.ajax({\n                                    type: 'GET',\n                                    url: url + this.name + '&extension_type=' + type.name,\n                                    jsonpCallback: 'jsonCallback',\n                                    contentType: \"application/json\",\n                                    dataType: 'jsonp',\n                                    success: function (field) {\n                                        result = field;\n                                    },\n                                    error: function (e) {\n                                        deferred.reject(e);\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                    });\n                },\n                error: function (e) {\n                    console.log(e.message);\n                }\n            });\n\n            deferred.resolve(data);\n        },\n        error: function (e) {\n            deferred.reject(e);\n        }\n    });\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels) {\n    var deferred = this._$q.defer();\n    this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {'otherLevels': otherLevels, 'callback': 'JSON_CALLBACK'}, cache: this.deviceStores\n    }).then(\n        function (response) {\n            deferred.resolve(response.data);\n        },\n        function (response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels) {\n    var deferred = this._$q.defer();\n    this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            'callback': 'JSON_CALLBACK'\n        },\n        cache: this.deviceStores\n    }).then(\n        function (response) {\n            deferred.resolve(response.data);\n        },\n        function (response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function (value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value.array;\n                tree['size'] = value.size;\n\n                var flag = false;\n                angular$1.forEach(showData, function (data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.size;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function (value, key) {\n            if (key == tree.id) {\n                tree.data = value.array;\n                tree['size'] = value.size;\n\n                var flag = false;\n                angular$1.forEach(showData, function (data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.size;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end)\n            ||\n            ((start > tree.start) && start <= tree.end)\n            ||\n            ((tree.start >= start) && tree.start < end)\n            ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function (elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (host, application, deviceInfo, storeSchema, store, start, end) {\n\n    var bucketsData = [];\n    var devicesNullBucket = [];\n    var calTree = this.calTree;\n    var fillChildrenTree = this.fillChildrenTree;\n    angular$1.forEach(deviceInfo, function (device, index) {\n        var bucketKeys = [];\n        calTree(bucketKeys, device.tree, start, end);\n        var nullBucket = [];\n        // get null buckets\n        angular$1.forEach(bucketKeys, function (bucket) {\n            if (bucket.data == null) {\n                nullBucket.push(bucket.id);\n            }\n        });\n        if (nullBucket.length != 0) {\n            devicesNullBucket.push({device: device.name, nullBucket: nullBucket});\n        }\n        bucketsData.push({device: device.name, data: bucketKeys});\n    });\n\n    if (devicesNullBucket.length == 0) {\n        // get data from rest service\n        var deferred = this._$q.defer();\n        deferred.resolve(bucketsData);\n        return deferred.promise;\n    } else {\n        // get data from rest service\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/devices/store/data/jsonp/' + storeSchema + '/' + store, {\n            params: {\n                deviceBucketKeys: JSON.stringify(devicesNullBucket),\n                callback: 'JSON_CALLBACK'\n            }\n        }).then(\n            function (response) {\n                // response.data\n                angular$1.forEach(response.data, function (deviceData) {\n\n                    var currentBucketShowData = null;\n                    angular$1.forEach(bucketsData, function (showData) {\n                        if (showData.device == deviceData.device) {\n                            currentBucketShowData = showData.data; //  bucketKeys\n                            angular$1.forEach(deviceInfo, function (device, index) {\n                                if (deviceData.device == device.name) {\n                                    fillChildrenTree(deviceData.data, device.tree, currentBucketShowData);\n                                }\n                            });\n                        }\n                    });\n\n                });\n                // fill bucketKeys\n                deferred.resolve(bucketsData);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (host, application, deviceKey, storeSchema, store, tree, start, end) {\n    var fillTree = this.fillTree;\n    var calTree = this.calTree;\n    var bucketKeys = [];\n    calTree(bucketKeys, tree, start, end);\n    var nullBucket = [];\n    // get null buckets\n    angular$1.forEach(bucketKeys, function (bucket) {\n        if (bucket.data == null) {\n            nullBucket.push(bucket.id);\n        }\n    });\n\n    if (nullBucket.length == 0) {\n        // send rest request\n        var deferred = this._$q.defer();\n        deferred.resolve(bucketKeys);\n        return deferred.promise;\n    } else {\n        // send rest request\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/store/data/jsonp/' + deviceKey + '/' + storeSchema + '/' + store, {\n            params: {\n                bucketKeys: nullBucket,\n                callback: 'JSON_CALLBACK'\n            }\n        }).then(\n            function (response) {\n                fillTree(response.data, tree, bucketKeys);\n                // fill bucketKeys\n                deferred.resolve(bucketKeys);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                    return (lor +=\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                    && (lor.length == 6) ? lor : co(lor);\n                })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function (response) {\n            console.info(response);\n            debugger;\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        return '<div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a href=\"javascript:;\" ng-if=\"rangeSelectorBar\" ng-show=\"!playing\" ng-click=\"autoRefresh();\"><i class=\"fa fa-play\" aria-hidden=\"true\"></i></a><a href=\"javascript:;\" ng-if=\"rangeSelectorBar\" ng-show=\"playing\" ng-click=\"stopRefresh();\"><i class=\"fa fa-pause\" aria-hidden=\"true\"></i></a> <a class=\"tooltips\" href=\"javascript:;\" style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><div class=\"relationBtn\">R</div><span>Scatter View</span></a><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\">fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? \\'#009900;\\' : \\'\\'}}\">{{item.name}}</span></label></div><div ng-if=\"rangeSelectorBar\" style=\"float: right;padding-right: 10px;\"><label class=\"radio-inline\" ng-repeat=\"range in ranges\"><input type=\"radio\" ng-value=\"range.value\" name=\"optradio_' + attrs.id + '\" ng-model=\"choosed_range\" ng-click=\"changeRange(range)\">{{range.name}}</label></div></div></div><div class=\"line-chart-graph\" style=\"width: 100%;height: 100%;\"></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;\"><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;\"></div></div></div></div></div>';\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    scope.status = true;\n    var timeOut = this.$timeout;\n    this.$timeout(function () {\n        var getData = function (numSeries, numRows, name) {\n            var result = {labels: null, data: null};\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n                initDate = new Date(initDate.getTime() + 900000);\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            if (scope.playing) {\n                return;\n            }\n\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.playing) {\n                return;\n            }\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function (range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n        var zoomTimer = null;\n        var scroll = function (e, g, context) {\n\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            if (zoomTimer) {\n                timeOut.cancel(zoomTimer);\n            }\n            var normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function () {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function (e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function (e, g, context) {\n            if (context.isPanning) {\n                if (event.offsetX <= (g.plotter_.area.x)) {\n                    movePan(event, g, context, 'r');\n                } else if (event.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(event, g, context, 'l');\n                } else {\n                    movePan(event, g, context, 'h');\n                }\n                timeOut(function () {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function (e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseup': mouseupHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            labelsKMB: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            highlightCircleSize: 2,\n            strokeWidth: 1,\n            highlightSeriesOpts: {\n                strokeWidth: 2,\n                strokeBorderWidth: 1,\n                highlightCircleSize: 2\n            },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function (y) {\n                        return moment(y).format('LLLL'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function (e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function (g, isInit) {\n                timeOut(function () {\n                    if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                        scope.refersh(g);\n                    }\n                });\n            },\n            'interactionModel': interactionModel\n        };\n\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                        xAxisHeight: 0,\n                        axes: {\n                            x: {\n                                drawAxis: false\n                            }\n                        },\n                        showRangeSelector: true,\n                        rangeSelectorHeight: 30\n                    }\n                );\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function (event) {\n                status = false;\n                timeOut(function () {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {begin: finalDateRagne[0], end: finalDateRagne[1]};\n                });\n            });\n\n            scope.$on('mouseUpMessage', function ($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function () {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {begin: finalDateRange[0], end: finalDateRange[1]};\n                    });\n                }\n            });\n\n            scope.$on('bindFatherGraphEvent', function (event, data) {\n                angular$1.forEach(data.children, function (child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function (g, isInit) {\n                                timeOut(function () {\n                                    scope.refersh(g);\n                                });\n                            }\n                        });\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function (event) {\n                if (status) {\n                    timeOut(function () {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function (event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {'graphs': [scope.currentChart], children: basicInfo.childrenChart};\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.chartDateTime = {begin: null, end: null};\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {device: []};\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n\n        $scope.ranges = [\n            {name: \"5 mins\", value: 60 * 1000 * 5},\n            {name: \"1 hour\", value: 60 * 1000 * 60},\n            {name: \"1 day\", value: 60 * 1000 * 60 * 24, checked: true},\n            {name: \"1 week\", value: 60 * 1000 * 60 * 24 * 7},\n        ];\n\n        if (widgetData.data.metadata.data.basic.ranges) {\n            $scope.ranges = widgetData.data.metadata.data.basic.ranges;\n        }\n\n        $scope.choosed_range = 0;\n\n        $scope.changeRange = function (range) {\n            if ($scope.chartDateWindow) {\n                $scope.choosed_range = range.value;\n                if ($scope.chartDateWindow[1] instanceof Date) {\n                    $scope.chartDateWindow = [new Date($scope.chartDateWindow[1].getTime() - $scope.choosed_range), $scope.chartDateWindow[1]];\n                    $scope.chartDateTime = [new Date($scope.chartDateWindow[1].getTime() - $scope.choosed_range), $scope.chartDateWindow[1]];\n                } else {\n                    $scope.chartDateWindow = [new Date($scope.chartDateWindow[1] - $scope.choosed_range), $scope.chartDateWindow[1]];\n                    $scope.chartDateTime = [new Date($scope.chartDateWindow[1] - $scope.choosed_range), $scope.chartDateWindow[1]];\n                }\n\n            }\n            if ($scope.currentChart) {\n                $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n            }\n        };\n\n        // get the default rollup\n        angular$1.forEach($scope.ranges, function (range) {\n            if (range.checked === true) {\n                $scope.choosed_range = range.value;\n            }\n        });\n\n        // auto refresh\n\n        $scope.playing = false;\n\n\n        var refreshTask = null;\n\n        //\n        $scope.autoRefresh = function () {\n            //\n            var ostart = 0;\n            var oend = 0;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                ostart = $scope.chartDateWindow[0].getTime();\n            } else {\n                ostart = $scope.chartDateWindow[0];\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                oend = $scope.chartDateWindow[1].getTime();\n            } else {\n                oend = $scope.chartDateWindow[1];\n            }\n\n            var refersh_time = widgetData.data.metadata.data.basic.refresh;\n            if (!refersh_time) {\n                refersh_time = 5000;// 5 seconds.\n            }\n            // gap\n            var gap = oend - ostart;\n            refreshTask = $interval(function () {\n                var start = 0;\n                var end = 0;\n                if ($scope.chartDateWindow[0] instanceof Date) {\n                    start = $scope.chartDateWindow[0].getTime() + gap;\n                } else {\n                    start = $scope.chartDateWindow[0] + gap;\n                }\n\n                if ($scope.chartDateWindow[1] instanceof Date) {\n                    end = $scope.chartDateWindow[1].getTime() + gap;\n                } else {\n                    end = $scope.chartDateWindow[1] + gap;\n                }\n\n                if (end <= new Date().getTime()) {\n                    $scope.chartDateWindow = [start, end];\n                    $scope.chartDateTime = [start, end];\n                    $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n                }\n            }, refersh_time);\n\n            $scope.playing = true;\n        };\n\n        $scope.stopRefresh = function () {\n            if (refreshTask != null) {\n                $interval.cancel(refreshTask);\n            }\n            $scope.playing = false;\n        };\n\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function () {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function (item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({file: fixed});\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({file: noneFixed});\n            }\n\n        };\n        $scope.fixGraphWithGap_click = function () {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function (item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(NaN);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({file: fixed});\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({file: noneFixed});\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.$watch('currentView', function (nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    if (nObj == -1) {\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function (level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                                initChart(data);\n                            }, function (error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular$1.forEach(metadata.data.groups[2].collections, function (level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                // show children view\n                                dataService.childrenDeviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, rangeLevel, otherLevels).then(function (data) {\n                                    // get all device trees\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                    } else {\n                                        return;\n                                    }\n\n                                }, function (error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n\n            $scope.rangeTree = null;\n\n            // first time of showing chart\n            $scope.$watch('currentChart', function (newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function (level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                        initChart(data);\n                    }, function (error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function (newValue, oldValue) {\n                if (newValue.begin != oldValue.begin || newValue.end != oldValue.end) {\n                    var expect_points = Math.floor($element.parent().width() / 2);\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    var conf = $scope.intevals.device;\n                    // device detail view\n                    var firstOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= firstOne) {\n                        expectedInterval = firstOne;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= firstOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = firstOne;\n                            } else {\n                                firstOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                    }\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function (config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n                    $scope.loadingShow = true;\n                    // update range bar\n                    var rangeLevel = \"\";\n                    angular$1.forEach(metadata.data.groups[1].collections, function (level) {\n                        if (level.rows.length > 0) {\n                            rangeLevel = level.name;\n                        }\n                    });\n\n                    var rangeTree = null;\n                    angular$1.forEach($scope.trees, function (tree) {\n                        if (tree.range) {\n                            rangeTree = tree;\n                        }\n                    });\n\n                    var deviceInfo = [{name: deviceData.device.name, tree: rangeTree.tree}];\n                    dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, rangeLevel, $scope.chartDateWindow[0], $scope.chartDateWindow[1]).then(function (data) {\n                        angular$1.forEach(data, function (arr) {\n                            var deviceData = [];\n                            angular$1.forEach(arr.data, function (bucket) {\n                                if (bucket.data != null) {\n                                    Array.prototype.push.apply(deviceData, bucket.data.slice(0, bucket.size));\n                                }\n                            });\n                            //update range bar\n                            updateRangeBarChart(metadata, rangeLevel, deviceData);\n                        });\n\n                    }, function (data) {\n                        console.info(data);\n                    });\n\n\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        if (expectedInterval == conf[0].interval) {\n                            // set valueRange;\n                            // re cal max and min\n                            // $scope.childrenRangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                            $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n                            // if ($scope.rangeSelectorBar) {\n                            // $scope.rangeSelectorBar.updateOptions({series: $scope.childRangeSeries});\n                            // }\n                            $scope.loadingShow = false;\n                        } else {\n                            var deviceInfo = [];\n                            var currentStore = \"\";\n                            // has problem....\n                            angular$1.forEach($scope.childTrees, function (device) {\n                                angular$1.forEach(device.trees, function (tree, index) {\n                                    if (expectedInterval == tree.frequency && index != 0) {\n                                        currentStore = tree.store;\n                                        deviceInfo.push({name: device.name, tree: tree.tree});\n                                    }\n                                });\n                            });\n\n                            dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, newValue.begin, newValue.end).then(function (data) {\n                                var showData = [];\n                                angular$1.forEach(data, function (arr) {\n                                    var deviceData = [];\n                                    angular$1.forEach(arr.data, function (bucket) {\n                                        if (bucket.data != null) {\n                                            Array.prototype.push.apply(deviceData, bucket.data.slice(0, bucket.size));\n                                        }\n                                    });\n                                    showData.push({device: arr.device, data: deviceData});\n                                });\n                                //get configuration\n                                updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n\n                            }, function (data) {\n                                console.info(data);\n                            });\n                        }\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // if expected interval is the biggest, show range data\n                        if (expectedInterval == conf[0].interval) {\n                            if (!($scope.chartDateWindow[0] instanceof Date)) {\n                                $scope.chartDateWindow[0] = new Date($scope.chartDateWindow[0]);\n                            }\n\n                            if (!($scope.chartDateWindow[1] instanceof Date)) {\n                                $scope.chartDateWindow[1] = new Date($scope.chartDateWindow[1]);\n                            }\n                            $scope.rangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                            // set valueRange\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            if ($scope.rangeSelectorBar && $scope.rangeSeries) {\n                                $scope.rangeSelectorBar.updateOptions({series: $scope.rangeSeries});\n                            }\n                            // tell some other widgets, the graph is changed.\n                            // $timeout(function () {\n                            // $rootScope.$broadcast('chartDataChangeEvent', {\n                            //     'id': element_id,\n                            //     'group': 'device',\n                            //     'data': {\n                            //         'collection': conf[0].name,\n                            //         'group': 'device',\n                            //         'data': $scope.ordinalRangeData.filter(function (obj) {\n                            //             return obj.timestamp >= $scope.rangeConfig[\"dateWindow\"][0].getTime() && obj.timestamp <= $scope.rangeConfig[\"dateWindow\"][1].getTime();\n                            //         })\n                            //     }\n                            // });\n                            // });\n\n                            $scope.loadingShow = false;\n                        } else {\n                            // cal tree\n                            angular$1.forEach($scope.trees, function (tree, index) {\n                                if (expectedInterval == tree.frequency && index != 0) {\n                                    // send request\n                                    dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, newValue.begin, newValue.end).then(function (data) {\n                                        // udpate chart\n                                        var showData = [];\n                                        angular$1.forEach(data, function (arr) {\n                                            Array.prototype.push.apply(showData, arr.data.slice(0, arr.size));\n                                        });\n                                        showData = showData.filter(function (obj) {\n                                            return obj != null;\n                                        });\n                                        showData.sort(function (a, b) {\n                                            return a.timestamp > b.timestamp ? 1 : -1;\n                                        });\n                                        //get configuration\n                                        updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                        // tell some other widgets, the graph is changed.\n                                        // $timeout(function () {\n                                        // $rootScope.$broadcast('chartDataChangeEvent', {\n                                        //     'id': element_id,\n                                        //     'group': 'device',\n                                        //     'data': {\n                                        //         'collection': tree.store,\n                                        //         'group': 'device',\n                                        //         'data': showData\n                                        //     }\n                                        // });\n                                        // });\n\n                                    }, function (data) {\n                                        console.info(data);\n                                    });\n                                }\n                            });\n                        }\n                        $scope.fixGraphWithGap();\n                    }\n                    $scope.status = false;\n                }\n            });// not working.....\n\n        });\n\n\n        var fetchData = function (values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n            }\n\n        };\n\n\n        $scope.trees = [];\n\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function (data) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function (tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n            });\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n\n            // fetchData(allData, rangeTree.tree);\n            // fill graph with null data  never ever be null.\n            var rang_start = rangeTree.first.timestamp;\n            var rang_end = rangeTree.last.timestamp;\n\n            var allData = [{timestamp: new Date(rang_start)}, {timestamp: new Date(rang_end)}];\n\n            // only one point\n            if (rang_start == rang_end) {\n                allData = [{timestamp: new Date(rang_start - 3600000)}, {timestamp: new Date(rang_end)}];\n            }\n\n\n            allData = allData.filter(function (obj) {\n                return obj != null;\n            });\n            allData.sort(function (a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({timestamp: timestamp - currentInterval});\n                Array.prototype.push.apply(newData, allData);\n                newData.push({timestamp: timestamp + currentInterval});\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // get configuration and make real data\n            updateChart(metadata, store, allData);\n\n\n\n            $scope.choosed_range = 0;\n\n            // get the default rollup\n            angular$1.forEach($scope.ranges, function (range) {\n                if (range.checked === true) {\n                    $scope.choosed_range = range.value;\n                    if ($scope.chartDateWindow) {\n                        $scope.choosed_range = range.value;\n                        if ($scope.chartDateWindow[1] instanceof Date) {\n                            $scope.chartDateWindow = [new Date(new Date(rangeTree.last.timestamp).getTime() - $scope.choosed_range), new Date(rangeTree.last.timestamp)];\n                            $scope.chartDateTime = [new Date(new Date(rangeTree.last.timestamp).getTime() - $scope.choosed_range), new Date(rangeTree.last.timestamp)];\n                        } else {\n                            $scope.chartDateWindow = [new Date(rangeTree.last.timestamp - $scope.choosed_range), new Date(rangeTree.last.timestamp)];\n                            $scope.chartDateTime = [new Date(rangeTree.last.timestamp - $scope.choosed_range), new Date(rangeTree.last.timestamp)];\n                        }\n\n                    }\n                }\n            });\n            $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n        };\n\n        var initChildrenChart = function (deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            angular$1.forEach(deviceDatas, function (deviceData) {\n                var device = deviceData.device;\n                var trees = deviceData.trees;\n                $scope.childTrees.push({name: device.name, trees: trees});\n                var rangeTree = null;\n                angular$1.forEach(trees, function (tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function (interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [];\n                    fetchData(allData, rangeTree.tree);\n                    allData = allData.filter(function (obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function (a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n\n            });\n\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n\n        var updateChildrenChart = function (metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function (device, key) {\n                angular$1.forEach(device.data, function (item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function (label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n\n\n                });\n            });\n            // order\n            allXLabels.sort(function (a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function (label) {\n                allLines.push([label]);\n            });\n\n\n            var yRange = {min: null, max: null};\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function (device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function (collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {'axis': 'y1'};\n                        } else {\n                            series[collection.rows[0].label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n                        labels.push(key);\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function (realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function (odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            //update chart\n\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'labelsKMB': true,\n                        'file': allLines,\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80},\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function (line) {\n                        line.push(NaN);\n                    });\n                    series[\"span_y2\"] = {'axis': 'y2'};\n                    $scope.childrenRangeConfig = {\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {valueRange: [yRange.min, yRange.max]},\n                            'y2': {\n                                axisLabelFormatter: function (d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n                $scope.loadingShow = false;\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function (metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n            var yRange = {min: null, max: null};\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function (device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function (collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {'axis': 'y1'};\n                            } else {\n                                series[collection.rows[0].label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \")return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function (data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({timestamp: dateTime, value: value});\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({timestamp: dateTime, value: null});\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function (item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({device: device.device, data: tempData});\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function (nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function (line) {\n                angular$1.forEach(chartData, function (timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(NaN);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n\n                    if (showY2axis) {\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80}\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function (line) {\n                            line.push(NaN);\n                        });\n                        series[\"span_y2\"] = {axis: 'y2'};\n                        $scope.currentChart.updateOptions({\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': newLines,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max], axisLabelWidth: 80},\n                                \"y2\": {\n                                    axisLabelFormatter: function (d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n\n\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function (metadata, store, rangeData, allData) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{min: null, max: null}, {min: null, max: null}];\n            angular$1.forEach(collections, function (collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function (line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function (row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {'axis': 'y1'};\n                        } else {\n                            series[row.label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \")return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function (realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function (yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n\n                    if (allLines.length == 0) {\n                        $scope.currentChart.updateOptions({\n                            'file': []\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n\n                            if (showY2axis) {\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            } else {\n\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n\n                                series[\"span-Y2\"] = {axis: 'y2'};\n                                $scope.currentChart.updateOptions({\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                        'y2': {\n                                            axisLabelFormatter: function (d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n\n                            }\n\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n\n        var updateRangeBarChart = function (metadata, store, allData) {\n            // update rang bar\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{min: null, max: null}, {min: null, max: null}];\n            angular$1.forEach(collections, function (collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function (line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function (row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {'axis': 'y1'};\n                        } else {\n                            series[row.label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function (realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {'l0': {axis: 'y1'}};\n\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {axis: 'y1'},\n                                    'l0': {axis: 'y2'}\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {axis: 'y2'};\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range\n                                });\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function (yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                }\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {axis: 'y2'};\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function (line) {\n                                line.push(NaN);\n                            });\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        axisLabelFormatter: function (d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                }\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function (metadata, store, allData) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{min: null, max: null}, {min: null, max: null}];\n            angular$1.forEach(collections, function (collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function (line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function (row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {'axis': 'y1'};\n                        } else {\n                            series[row.label] = {'axis': 'y2'};\n                            showY2axis = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function (realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {'l0': {axis: 'y1'}};\n\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {axis: 'y1'},\n                                    'l0': {axis: 'y2'}\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {axis: 'y2'};\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range\n                                });\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function (yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {axis: 'y2'};\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function (line) {\n                                line.push(NaN);\n                            });\n                            $scope.rangeConfig = {\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRanges[0].min, yRanges[0].max], axisLabelWidth: 80},\n                                    'y2': {\n                                        axisLabelFormatter: function (d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                        $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n\n        // function for show one\n        $scope.showOne = function (deviceName) {\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n        var timer = null;\n        $scope.refersh = function (g) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function () {\n                $scope.chartDateTime = {begin: g.xAxisRange()[0], end: g.xAxisRange()[1]};\n                $scope.chartDateWindow = g.xAxisRange();\n            }, 600);\n        };\n\n\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph.$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function () {\n        return function (input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function () {\n        return function (scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).filter('tableformatter', ['$filter', function ($filter) {\n    return function (input, obj, field, formatter) {\n        if (formatter) {\n            if (obj[field]) {\n                if (\"date\" == formatter) {\n                    return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                } else {\n                    return input;\n                }\n            }\n        } else {\n            return input;\n        }\n    };\n}]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"]}