{"version":3,"sources":["index.js","com/futuregrid/platform/kit/show/directives/fgp.stage.js","com/futuregrid/platform/kit/utils/data.api.js","com/futuregrid/platform/kit/show/directives/fgp.container.js","com/futuregrid/platform/kit/show/directives/fgp.graph.js","com/futuregrid/platform/kit/show/directives/fgp.page.title.js","com/futuregrid/platform/kit/show/directives/fgp.map.js","com/futuregrid/platform/kit/show/directives/fgp.device.detail.js","com/futuregrid/platform/kit/show/directives/fgp.span.js","com/futuregrid/platform/kit/show/directives/fgp.pie.js","com/futuregrid/platform/kit/show/directives/fgp.chart.table.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","showdata","graphBindingArray","$on","evt","msg","push","forEach","metadata","key","id","callback","data","from","findChild","parentId","parentHtmlObj","arrayItems","i","length","parent","currentItem","element","html_render","find","append","item","deviceInfo","then","$broadcast","device","graph","graphs","children","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","_$http","_$q","indexCache","deviceStores","host","deviceKey","deferred","defer","url","ajaxSettings","async","ajax","type","jsonpCallback","contentType","dataType","success","types","Object","defineProperty","name","get","result","field","error","e","reject","console","log","message","resolve","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","jsonp","params","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","fillChildrenTree","buckets","tree","showData","value","array","size","flag","info","fillTree","calTree","start","end","filter","elem","devicesStoreData","store","bucketsData","devicesNullBucket","index","bucketKeys","nullBucket","bucket","deviceBucketKeys","JSON","stringify","deviceData","currentBucketShowData","deviceStoreData","defaultColors","this$1","colors","co","lor","Math","floor","random","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","attr","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$interval","$filter","$location","_dataService","dom_loading","dom_empty_data","link","status","timeOut","getData","numSeries","numRows","labels","initDate","Date","j","getTime","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","zoomTimer","scroll","cancel","normal","detail","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","mousedown","mousemove","mouseup","drawGapEdgePoints","pointSize","labelsKMB","concat","highlightCircleSize","strokeWidth","highlightSeriesOpts","strokeBorderWidth","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","on","finalDateRagne","chartDateTime","begin","finalDateRange","child","synchronize","selection","childrenChart","param","$window","elementId","emptyDataShow","loadingShow","intevals","height","fixInterval","noneFixed","fixGraphWithGap","currentInterval","currentIntervalName","interval","fixed","tempDate","obj","labels_","NaN","file","copy","file_","fixGraphWithGap_click","basic","parent_container","data_from","$watch","nObj","oObj","groups","collections","level","rows","initChart","relation","relation_group","initChildrenChart","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","config","currentStore","childTrees","trees","frequency","arr","Array","apply","slice","updateChildrenDetailChart","rangeChildrenData","rangeConfig","rangeSeries","group","collection","ordinalRangeData","timestamp","sort","a","b","updateDetailChart","rangeData","fetchData","values","node","intevalforshow","rangeTree","allData","newData","thePoint","updateChart","deviceDatas","devicesInfo","deviceObj","updateChildrenChart","relationConfig","leftAndRight","left","leftYAxis","right","rightYAxis","allLines","allXLabels","label","yRange","showY2axis","counter","originalData","yaxis","f","Function","realLine","odata","ex","childrenRangeConfig","y2label","newLines","line","axisLabelFormatter","d","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","deviceConfig","yRanges","row","yrange","rangeSeriesNumber","rangeBarLabels","series_range","l0","open","substr","lastIndexOf","timer","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","legend","pieData","update","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","columns","column","formatter","record","cleanData","service","dataApi","directive","fgpWidgetStatus","fgpWidgetDetail","input"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * Created by ericwang on 10/06/2016.\n */\n'use strict';\nimport angular from 'angular';\nimport fgpStage from './com/futuregrid/platform/kit/show/directives/fgp.stage.js';\nimport dataApi from './com/futuregrid/platform/kit/utils/data.api.js';\nimport fgpWidgetContainer from './com/futuregrid/platform/kit/show/directives/fgp.container.js';\nimport fgpWidgetGraph from './com/futuregrid/platform/kit/show/directives/fgp.graph.js';\nimport fgpWidgetPageTitle from './com/futuregrid/platform/kit/show/directives/fgp.page.title.js';\nimport fgpWidgetMap from './com/futuregrid/platform/kit/show/directives/fgp.map.js';\nimport fgpWidgetStatus from './com/futuregrid/platform/kit/show/directives/fgp.stage.js';\nimport fgpWidgetDetail from './com/futuregrid/platform/kit/show/directives/fgp.device.detail.js';\nimport fgpWidgetSpan from './com/futuregrid/platform/kit/show/directives/fgp.span.js';\nimport fgpWidgetPie from './com/futuregrid/platform/kit/show/directives/fgp.pie.js';\nimport fgpWidgetChartTable from './com/futuregrid/platform/kit/show/directives/fgp.chart.table.js';\n// angular module\nangular.module('fgp-kit', ['ngMap']).service('dataService', dataApi.buildFactory).directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpWidgetStatus.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory).filter('tableformatter', ['$filter', function ($filter) {\n    return function (input, obj, field, formatter) {\n        if (formatter) {\n            if (obj[field]) {\n                if (\"date\" == formatter) {\n                    return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                } else {\n                    return input;\n                }\n            }\n        } else {\n            return input;\n        }\n    };\n}]);\nexport default 'fgp-kit';","/**\n * Created by ericwang on 10/06/2016.\n */\nimport angular from 'angular';\n'use strict';\nclass fgpStage {\n\n    constructor() {\n        this.scope = {\n            applicationName: \"=\",\n            deviceName: \"=\",\n            server: \"=\",\n            configuration: '='\n        };\n        this.replace = true;\n        this.restrict = 'A';\n    }\n\n    template() {\n        return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;\">' +\n            '</div>';\n    }\n\n    controller($scope, $element, $timeout, $rootScope, $compile, dataService) {\n        $scope.showdata = {};\n\n        $rootScope['applicationName'] = $scope.applicationName;\n        $rootScope['host'] = $scope.server;\n        $rootScope['device'] = $scope.deviceName;\n\n\n        var graphBindingArray = [];\n\n        $scope.$on('bindChildChartEvent', function (evt, msg) {\n            graphBindingArray.push(msg);\n        });\n\n\n        $scope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n            angular.forEach($scope.showdata, function (metadata, key) {\n                if (key == msg.id) {\n                    msg.callback({data: metadata, from: 'show'});\n                    return;\n                }\n            });\n        });\n\n        function findChild(parentId, parentHtmlObj, arrayItems) {\n\n            for (var i = 0; i < arrayItems.length; i++) {\n                if ('edit' + parentId === arrayItems[i].parent) {\n                    var currentItem = angular.element(arrayItems[i].html_render);\n                    var id = arrayItems[i].id;\n                    $scope.showdata[id] = arrayItems[i];\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)($scope));\n                    findChild(arrayItems[i].id, currentItem, arrayItems);\n                } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                    var currentItem = angular.element(arrayItems[i].html_render);\n                    var id = arrayItems[i].id;\n                    $scope.showdata[id] = arrayItems[i];\n                    parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)($scope));\n                    findChild(arrayItems[i].id, currentItem, arrayItems);\n                }\n            }\n        }\n\n        angular.forEach($scope.configuration, function (item) {\n            if ('workingArea' === item.parent) {\n                var currentItem = angular.element(item.html_render);\n                $scope.showdata[item.id] = item;\n                $element.append($compile(currentItem)($scope));\n                findChild(item.id, currentItem, $scope.configuration);\n            }\n        });\n\n        /**\n         * get device information\n         */\n        if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    $scope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n        }\n\n\n        // all item created;\n        $timeout(function () {\n            angular.forEach(graphBindingArray, function (graph) {\n                $scope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n            });\n        });\n    }\n\n\n    static buildFactory() {\n        fgpStage.instance = new fgpStage();\n        return fgpStage.instance;\n    }\n}\n\nexport {fgpStage as default}\n","import $ from 'jquery';\nimport angular from 'angular';\n/**\n * Created by ericwang on 15/06/2016.\n */\nclass dataAccessApi {\n\n    /**\n     * init dataApi\n     * @param $http\n     * @param $q\n     */\n    constructor($http, $q, $cacheFactory) {\n        this._$http = $http;\n        this._$q = $q;\n        // get cache\n        this.indexCache = $cacheFactory('indexCache');\n        this.deviceStores = $cacheFactory('deviceStores');\n    }\n\n\n    /**\n     * sync using JQuery\n     * @param deviceName\n     * @param deviceKey\n     * @param applicationName\n     * @returns {*}\n     */\n    deviceInfo(host, deviceName, deviceKey, applicationName) {\n        var deferred = this._$q.defer();\n        var url = host + \"/api/\";\n\n        if (applicationName) {\n            url += \"app/\" + applicationName;\n        }\n\n        if (deviceName) {\n            url += '/devices/parameter/jsonp?name=' + deviceName\n        } else if (deviceKey) {\n            url += 'devices/parameter/jsonp?key=' + deviceKey\n        }\n\n        $.ajaxSettings.async = false;\n        $.ajax({\n            type: 'GET',\n            url: url,\n            jsonpCallback: 'jsonCallback',\n            contentType: \"application/json\",\n            dataType: 'jsonp',\n            success: function (data) {\n                var url = host + \"/api/\";\n                if (applicationName) {\n                    url += \"app/\" + applicationName + \"/devices/extension-types/jsonp?device_type=\";\n                } else {\n                    url += \"devices/extension-types/jsonp?device_type=\";\n                }\n                $.ajaxSettings.async = false;\n                $.ajax({\n                    type: 'GET',\n                    url: url + data.type,\n                    jsonpCallback: 'jsonCallback',\n                    contentType: \"application/json\",\n                    dataType: 'jsonp',\n                    success: function (types) {\n                        angular.forEach(types, function (type) {\n                            Object.defineProperty(data, type.name, {\n                                get: function () {\n                                    var result = null;\n                                    var url = host + \"/api/\";\n                                    if (applicationName) {\n                                        url += \"app/\" + applicationName + \"/devices/extensions/jsonp?device_name=\";\n                                    } else {\n                                        url += \"devices/extensions/jsonp?device_name=\";\n                                    }\n                                    $.ajaxSettings.async = false;\n                                    $.ajax({\n                                        type: 'GET',\n                                        url: url + this.name + '&extension_type=' + type.name,\n                                        jsonpCallback: 'jsonCallback',\n                                        contentType: \"application/json\",\n                                        dataType: 'jsonp',\n                                        success: function (field) {\n                                            result = field;\n                                        },\n                                        error: function (e) {\n                                            deferred.reject(e);\n                                        }\n                                    });\n                                    return result;\n                                }\n                            });\n                        });\n                    },\n                    error: function (e) {\n                        console.log(e.message);\n                    }\n                });\n\n                deferred.resolve(data);\n            },\n            error: function (e) {\n                deferred.reject(e);\n            }\n        });\n        return deferred.promise;\n    }\n\n    /**\n     *\n     * @param application\n     * @param deviceKey\n     * @param storeSchema\n     * @returns {Promise}\n     */\n    deviceInitInfo(host, application, deviceKey, storeSchema, rangeLevel, otherLevels) {\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n            params: {'otherLevels': otherLevels, 'callback': 'JSON_CALLBACK'}, cache: this.deviceStores\n        }).then(\n            function (response) {\n                deferred.resolve(response.data);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n    /**\n     *\n     * @param application\n     * @param deviceKey\n     * @param storeSchema\n     * @returns {Promise}\n     */\n    childrenDeviceInitInfo(host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels) {\n        var deferred = this._$q.defer();\n        this._$http.jsonp(host + '/api/app/' + application + '/store/index/jsonp/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n            params: {\n                relationType: relationType,\n                relationDeviceType: relationDeviceType,\n                otherLevels: otherLevels,\n                'callback': 'JSON_CALLBACK'\n            },\n            cache: this.deviceStores\n        }).then(\n            function (response) {\n                deferred.resolve(response.data);\n            },\n            function (response) {\n                deferred.reject(response.data);\n            }\n        );\n        return deferred.promise;\n    }\n\n\n    fillChildrenTree(buckets, tree, showData) {\n\n        if (tree.children[0] != null) {\n            fillChildrenTree(buckets, tree.children[0], showData);\n        }\n\n        if (tree.children[1] != null) {\n            fillChildrenTree(buckets, tree.children[1], showData);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n\n            angular.forEach(buckets, function (value, key) {\n                if (key == tree.id && value != null) {\n                    tree.data = value.array;\n                    tree['size'] = value.size;\n\n                    var flag = false;\n                    angular.forEach(showData, function (data) {\n                        if (data.id == tree.id) {\n                            data.data = tree.data;\n                            tree['size'] = value.size;\n                            flag = true;\n                        }\n                    });\n\n                    if (!flag) {\n                        console.info(\"error:\" + key);\n                    }\n                }\n            });\n        }\n    }\n\n\n    fillTree(buckets, tree, showData) {\n        if (tree.children[0] != null) {\n            fillTree(buckets, tree.children[0], showData);\n        }\n\n        if (tree.children[1] != null) {\n            fillTree(buckets, tree.children[1], showData);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n            angular.forEach(buckets, function (value, key) {\n                if (key == tree.id) {\n                    tree.data = value.array;\n                    tree['size'] = value.size;\n\n                    var flag = false;\n                    angular.forEach(showData, function (data) {\n                        if (data.id == tree.id) {\n                            data.data = tree.data;\n                            tree['size'] = value.size;\n                            flag = true;\n                        }\n                    });\n\n                    if (!flag) {\n                        console.info(\"error:\" + key);\n                    }\n                }\n            });\n        }\n\n    }\n\n    calTree(buckets, tree, start, end) {\n        if (tree.children[0] != null) {\n            calTree(buckets, tree.children[0], start, end);\n        }\n\n        if (tree.children[1] != null) {\n            calTree(buckets, tree.children[1], start, end);\n        }\n\n        if (tree.children[0] == null && tree.children[1] == null) {\n            if (tree.start >= start && tree.end <= end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n            // start inclued in a bucket\n            if (start > tree.start && start < tree.end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n            // end inclued in a bucket\n            if (end > tree.start && end < tree.end) {\n                if (buckets.filter(function (elem) {\n                        return elem.id == tree.id\n                    }).length == 0) {\n                    buckets.push(tree);\n                }\n            }\n\n\n        }\n    }\n\n\n    /**\n     *\n     * @param application\n     * @param deviceInfo deviceKey and tree\n     * @param storeSchema\n     * @param store\n     * @param start\n     * @param end\n     */\n    devicesStoreData(host, application, deviceInfo, storeSchema, store, start, end) {\n\n        var bucketsData = [];\n        var devicesNullBucket = [];\n        var calTree = this.calTree;\n        var fillChildrenTree = this.fillChildrenTree;\n        angular.forEach(deviceInfo, function (device, index) {\n            var bucketKeys = [];\n            calTree(bucketKeys, device.tree, start, end);\n            var nullBucket = [];\n            // get null buckets\n            angular.forEach(bucketKeys, function (bucket) {\n                if (bucket.data == null) {\n                    nullBucket.push(bucket.id);\n                }\n            });\n            if (nullBucket.length != 0) {\n                devicesNullBucket.push({device: device.name, nullBucket: nullBucket});\n            }\n            bucketsData.push({device: device.name, data: bucketKeys});\n        });\n\n        if (devicesNullBucket.length == 0) {\n            // get data from rest service\n            var deferred = this._$q.defer();\n            deferred.resolve(bucketsData);\n            return deferred.promise;\n        } else {\n            // get data from rest service\n            var deferred = this._$q.defer();\n            this._$http.jsonp(host + '/api/app/' + application + '/store/index/devices/store/data/jsonp/' + storeSchema + '/' + store, {\n                params: {\n                    deviceBucketKeys: JSON.stringify(devicesNullBucket),\n                    callback: 'JSON_CALLBACK'\n                }\n            }).then(\n                function (response) {\n                    // response.data\n                    angular.forEach(response.data, function (deviceData) {\n\n                        var currentBucketShowData = null;\n                        angular.forEach(bucketsData, function (showData) {\n                            if (showData.device == deviceData.device) {\n                                currentBucketShowData = showData.data; //  bucketKeys\n                                angular.forEach(deviceInfo, function (device, index) {\n                                    if (deviceData.device == device.name) {\n                                        fillChildrenTree(deviceData.data, device.tree, currentBucketShowData);\n                                    }\n                                });\n                            }\n                        });\n\n                    });\n                    // fill bucketKeys\n                    deferred.resolve(bucketsData);\n                },\n                function (response) {\n                    deferred.reject(response.data);\n                }\n            );\n            return deferred.promise;\n        }\n\n\n    }\n\n\n    deviceStoreData(host, application, deviceKey, storeSchema, store, tree, start, end) {\n        var fillTree = this.fillTree;\n        var calTree = this.calTree;\n        var bucketKeys = [];\n        calTree(bucketKeys, tree, start, end);\n        var nullBucket = [];\n        // get null buckets\n        angular.forEach(bucketKeys, function (bucket) {\n            if (bucket.data == null) {\n                nullBucket.push(bucket.id);\n            }\n        });\n\n        if (nullBucket.length == 0) {\n            // send rest request\n            var deferred = this._$q.defer();\n            deferred.resolve(bucketKeys);\n            return deferred.promise;\n        } else {\n            // send rest request\n            var deferred = this._$q.defer();\n            this._$http.jsonp(host + '/api/app/' + application + '/store/index/store/data/jsonp/' + deviceKey + '/' + storeSchema + '/' + store, {\n                params: {\n                    bucketKeys: nullBucket,\n                    callback: 'JSON_CALLBACK'\n                }\n            }).then(\n                function (response) {\n                    fillTree(response.data, tree, bucketKeys);\n                    // fill bucketKeys\n                    deferred.resolve(bucketKeys);\n                },\n                function (response) {\n                    deferred.reject(response.data);\n                }\n            );\n            return deferred.promise;\n        }\n\n\n    }\n\n    defaultColors() {\n        if (!this.colors) {\n            this['colors'] = [];\n            for (var i = 0; i < 300; i++) {\n                this.colors.push('#' + (function co(lor) {\n                        return (lor +=\n                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                        && (lor.length == 6) ? lor : co(lor);\n                    })(''));\n            }\n        }\n        return this.colors;\n\n    }\n\n\n    static buildFactory($http, $q, $cacheFactory) {\n        dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory);\n        return dataAccessApi.instance;\n    }\n\n}\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory'];\n\nexport {dataAccessApi as default}","/**\n * Created by ericwang on 15/06/2016.\n */\n'use strict';\nclass fgpWidgetContainer {\n\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(element, attrs) {\n        var flag = attrs.hasOwnProperty(\"shown\");\n        var showTitle = attrs.hasOwnProperty(\"showtitle\");\n        var element_id = attrs.id;\n        var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\">' +\n            '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n            '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n            '</div>' +\n            '</div></div>';\n        var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;\">' +\n            '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n            '</div>' +\n            '</div></div>';\n\n        // show or design\n        if (flag) {\n            if (showTitle) {\n                return dom_show;\n            } else {\n                // without title\n                return dom_show_notitle;\n            }\n        }\n\n    }\n\n    controller($scope, $element, dataService, $rootScope, $timeout) {\n        // only show\n        var element_id = $element.attr(\"id\");\n\n\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n\n        var metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n        $scope.data = {};\n        if (metadata.data) {\n            $scope.data[\"source\"] = metadata.data.source;\n            if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n                if ($scope.data.source.device) {\n                    /**\n                     * get device information\n                     */\n                    dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                        // send device info to all widget\n                        $timeout(function () {\n                            $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                        });\n                    });\n                }\n\n            }\n        }\n\n    }\n\n\n    static buildFactory() {\n        fgpWidgetContainer.instance = new fgpWidgetContainer();\n        return fgpWidgetContainer.instance;\n    }\n\n}\n\nfgpWidgetContainer.$inject = [];\n\nexport {fgpWidgetContainer as default}","/**\n * Created by ericwang on 15/06/2016.\n */\nimport angular from 'angular';\nimport Dygraph from \"dygraphs\";\n'use strict';\nclass fgpWidgetGraph {\n\n    constructor($timeout, dataService, $rootScope, $interval, $filter, $location) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.$timeout = $timeout;\n        this._dataService = dataService;\n    }\n\n    template(element, attrs) {\n        var flag = attrs.hasOwnProperty(\"shown\");\n        if (flag) {\n            var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n                '<div class=\"rect1\"></div>' +\n                '<div class=\"rect2\"></div>' +\n                '<div class=\"rect3\"></div>' +\n                '<div class=\"rect4\"></div>' +\n                '<div class=\"rect5\"></div>' +\n                '</div></div>';\n\n\n            var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n                '<h1>Empty Data!</h1>' +\n                '</div></div>';\n\n            return '<div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips\" href=\"javascript:;\" style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><div class=\"relationBtn\">R</div><span>Scatter View</span></a><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\">fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? \\'#009900;\\' : \\'\\'}}\">{{item.name}}</span></label></div></div></div><div class=\"line-chart-graph\" style=\"width: 100%;height: 100%;\"></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[0] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{chartDateWindow[1] | date : \\'h:mm a MMMM d, y\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;\"><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;\"></div></div></div></div></div>';\n        }\n    }\n\n    link(scope, element, attrs) {\n        scope['defaultColors'] = this._dataService.defaultColors();\n        scope.status = true;\n        var timeOut = this.$timeout;\n        this.$timeout(function () {\n                var getData = function (numSeries, numRows, name) {\n                    var result = {labels: null, data: null};\n                    var data = [];\n                    var labels = [];\n                    //init date\n                    var initDate = new Date(\"2014/01/01 00:00:00\");\n                    for (var j = 0; j < numRows; ++j) {\n                        data[j] = [new Date(initDate.getTime() + 900000)];\n                        initDate = new Date(initDate.getTime() + 900000);\n                    }\n                    for (var i = 0; i < numSeries; ++i) {\n                        labels.push(name + i);\n                        var val = 0;\n                        for (var j = 0; j < numRows; ++j) {\n                            val += Math.random() - 0.5;\n                            data[j][i + 1] = val;\n                        }\n                    }\n                    result.labels = labels;\n                    result.data = data;\n                    return result;\n                };\n\n\n                var sampleData = getData(1, 10, 'Device');\n\n                function movePan(event, g, context, side) {\n\n                    context.dragEndX = Dygraph.dragGetX_(event, context);\n                    context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n                    // y-axis scaling is automatic unless this is a full 2D pan.\n                    if (context.is2DPan) {\n\n                        var pixelsDragged = context.dragEndY - context.dragStartY;\n                        // Adjust each axis appropriately.\n                        if (side == \"r\") {\n                            var axis = g.axes_[0];\n                            var axis_data = context.axes[0];\n                            var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                            var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                            // In log scale, maxValue and minValue are the logs of those values.\n                            var maxValue = axis_data.initialTopValue + unitsDragged;\n                            if (boundedValue) {\n                                maxValue = Math.min(maxValue, boundedValue[1]);\n                            }\n                            var minValue = maxValue - axis_data.dragValueRange;\n                            if (boundedValue) {\n                                if (minValue < boundedValue[0]) {\n                                    // Adjust maxValue, and recompute minValue.\n                                    maxValue = maxValue - (minValue - boundedValue[0]);\n                                    minValue = maxValue - axis_data.dragValueRange;\n                                }\n                            }\n                            if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                                axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                                axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                            } else {\n                                axis.valueWindow = [minValue, maxValue];\n                                axis.valueRange = [minValue, maxValue];\n                            }\n                        } else if (side == 'l') {\n                            var axis = g.axes_[1];\n                            var axis_data = context.axes[1];\n                            var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                            var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                            // In log scale, maxValue and minValue are the logs of those values.\n                            var maxValue = axis_data.initialTopValue + unitsDragged;\n                            if (boundedValue) {\n                                maxValue = Math.min(maxValue, boundedValue[1]);\n                            }\n                            var minValue = maxValue - axis_data.dragValueRange;\n                            if (boundedValue) {\n                                if (minValue < boundedValue[0]) {\n                                    // Adjust maxValue, and recompute minValue.\n                                    maxValue = maxValue - (minValue - boundedValue[0]);\n                                    minValue = maxValue - axis_data.dragValueRange;\n                                }\n                            }\n                            if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                                axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                                axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                                    Math.pow(Dygraph.LOG_SCALE, maxValue)];\n                            } else {\n                                axis.valueWindow = [minValue, maxValue];\n                                axis.valueRange = [minValue, maxValue];\n                            }\n                        } else {\n                            var minDate = context.initialLeftmostDate -\n                                (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                            if (context.boundedDates) {\n                                minDate = Math.max(minDate, context.boundedDates[0]);\n                            }\n                            var maxDate = minDate + context.dateRange;\n                            if (context.boundedDates) {\n                                if (maxDate > context.boundedDates[1]) {\n                                    // Adjust minDate, and recompute maxDate.\n                                    minDate = minDate - (maxDate - context.boundedDates[1]);\n                                    maxDate = minDate + context.dateRange;\n                                }\n                            }\n                            var zoomRange = g.xAxisZoomRange;\n                            if (g.xAxisZoomRange[0] instanceof Date) {\n                                zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                            }\n                            if (g.xAxisZoomRange[1] instanceof Date) {\n                                zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                            }\n\n                            if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                                return;\n                            }\n\n                            if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                                g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                                    Math.pow(Dygraph.LOG_SCALE, maxDate)];\n                            } else {\n                                g.dateWindow_ = [minDate, maxDate];\n                            }\n                        }\n                    }\n                    g.drawGraph_(false);\n                }\n\n\n                function offsetToPercentage(g, offsetX, offsetY) {\n                    // This is calculating the pixel offset of the leftmost date.\n                    var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n                    var yar0 = g.yAxisRange(0);\n\n                    // This is calculating the pixel of the higest value. (Top pixel)\n                    var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n                    // x y w and h are relative to the corner of the drawing area,\n                    // so that the upper corner of the drawing area is (0, 0).\n                    var x = offsetX - xOffset;\n                    var y = offsetY - yOffset;\n\n                    // This is computing the rightmost pixel, effectively defining the\n                    // width.\n                    var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n                    // This is computing the lowest pixel, effectively defining the height.\n                    var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n                    // Percentage from the left.\n                    var xPct = w == 0 ? 0 : (x / w);\n                    // Percentage from the top.\n                    var yPct = h == 0 ? 0 : (y / h);\n\n                    // The (1-) part below changes it from \"% distance down from the top\"\n                    // to \"% distance up from the bottom\".\n                    return [xPct, (1 - yPct)];\n                }\n\n\n                function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n\n                    function adjustAxis(axis, zoomInPercentage, bias) {\n                        var delta = axis[1] - axis[0];\n                        var increment = delta * zoomInPercentage;\n                        var foo = [increment * bias, increment * (1 - bias)];\n                        return [axis[0] + foo[0], axis[1] - foo[1]];\n                    }\n\n                    xBias = xBias || 0.5;\n                    yBias = yBias || 0.5;\n                    var yAxes = g.axes_;\n                    var newYAxes = [];\n                    for (var i = 0; i < g.numAxes(); i++) {\n                        newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n                    }\n                    if ('v' == direction) {\n                        if ('l' == side) {\n                            yAxes[0]['valueRange'] = newYAxes[0];\n                            yAxes[0]['valueWindow'] = newYAxes[0];\n                        } else if ('r' == side && g.numAxes() == 2) {\n                            yAxes[1]['valueRange'] = newYAxes[1];\n                            yAxes[1]['valueWindow'] = newYAxes[1];\n                        }\n                        g.drawGraph_(false);\n                    } else {\n\n                        var ranges = [];\n                        angular.forEach(g.xAxisRange(), function (range) {\n                            if (range instanceof Date) {\n                                ranges.push(range.getTime());\n                            } else {\n                                ranges.push(range);\n                            }\n                        });\n\n                        var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                        // do not bigger than range data\n                        var zoomRange = [];\n                        if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                            zoomRange[0] = g.xAxisZoomRange[0];\n                            zoomRange[1] = g.xAxisZoomRange[1];\n                        } else {\n                            zoomRange[0] = g.xAxisExtremes()[0];\n                            zoomRange[1] = g.xAxisExtremes()[1];\n                        }\n                        if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                            return;\n                        } else if (newZoomRange[0] >= newZoomRange[1]) {\n                            return;\n                        } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                            g.updateOptions({\n                                dateWindow: [zoomRange[0], newZoomRange[1]]\n                            });\n                        } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                            g.updateOptions({\n                                dateWindow: [newZoomRange[0], zoomRange[1]]\n                            });\n                        } else {\n                            g.updateOptions({\n                                dateWindow: newZoomRange\n                            });\n                        }\n                    }\n                }\n\n                var zoomTimer = null;\n                var scroll = function (e, g, context) {\n\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n\n                    if (zoomTimer) {\n                        timeOut.cancel(zoomTimer);\n                    }\n                    var normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n                    // For me the normalized value shows 0.075 for one click. If I took\n                    // that verbatim, it would be a 7.5%.\n                    var percentage = normal / 50;\n\n                    if (!(e.offsetX && e.offsetY)) {\n                        e.offsetX = e.layerX - e.target.offsetLeft;\n                        e.offsetY = e.layerY - e.target.offsetTop;\n                    }\n                    var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n                    var xPct = percentages[0];\n                    var yPct = percentages[1];\n                    //\n                    if (e.offsetX <= (g.plotter_.area.x)) {\n                        // console.info(\"v\", \"l\")\n                        // left zoom\n                        zoom(g, percentage, xPct, yPct, 'v', 'l');\n                    } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                        // right zoom\n                        // console.info(\"v\", \"r\")\n                        zoom(g, percentage, xPct, yPct, 'v', 'r');\n                    } else {\n                        // middle zoom\n                        // console.info(\"h\")\n                        zoom(g, percentage, xPct, yPct, 'h', null);\n                    }\n\n                    Dygraph.cancelEvent(e);\n                    timeOut(function () {\n                        scope.chartDateWindow = g.xAxisRange();\n                    });\n\n                };\n\n                var firstPoint = null;\n                var mousedownHandler = function (e, g, context) {\n                    if (scope.basicInfo && !scope.basicInfo.zoom) {\n                        return;\n                    }\n                    context.initializeMouseDown(e, g, context);\n                    firstPoint = e.clientX;\n                    Dygraph.startPan(e, g, context);\n                };\n                var mousemoveHandler = function (e, g, context) {\n                    if (context.isPanning) {\n                        if (event.offsetX <= (g.plotter_.area.x)) {\n                            movePan(event, g, context, 'r');\n                        } else if (event.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                            movePan(event, g, context, 'l');\n                        } else {\n                            movePan(event, g, context, 'h');\n                        }\n                        timeOut(function () {\n                            scope.chartDateWindow = scope.currentChart.xAxisRange();\n                        });\n                    }\n                };\n\n                var mouseupHandler = function (e, g, context) {\n                    if (context.isPanning) {\n                        Dygraph.endPan(e, g, context);\n                    }\n                };\n\n                var interactionModel = {\n                    'mousewheel': scroll,\n                    'DOMMouseScroll': scroll,\n                    'mousedown': mousedownHandler,\n                    'mousemove': mousemoveHandler,\n                    'mouseup': mouseupHandler\n                };\n\n\n                //init configuration\n                var configuration = {\n                    drawGapEdgePoints: true,\n                    'pointSize': 3,\n                    labelsKMB: true,\n                    // data formate\n                    labels: ['x'].concat(sampleData.labels),\n                    highlightCircleSize: 2,\n                    strokeWidth: 1,\n                    highlightSeriesOpts: {\n                        strokeWidth: 2,\n                        strokeBorderWidth: 1,\n                        highlightCircleSize: 2\n                    },\n                    drawPoints: false,\n                    drawAxesAtZero: false,\n                    labelsDivStyles: {\n                        'text-align': 'right',\n                        'position': 'relative',\n                        'display': 'inline-block'\n                    },\n                    yRangePad: 10,\n                    // x label y label\n                    ylabel: 'Value',\n                    xlabel: 'Date',\n                    colors: scope.defaultColors,\n                    // multiple Y axis\n                    series: {\n                        'Device0': {\n                            axis: 'y2'\n                        },\n                        'Device4': {\n                            axis: 'y2'\n                        }\n                    },\n                    // showRangeSelector: true,\n                    axes: {\n                        y: {\n                            valueRange: [0, 1]\n                        },\n                        y2: {\n                            // set axis-related properties here\n                            'labelsKMB': true,\n                            valueRange: [0, 1]\n                        },\n                        x: {\n                            // datetime format\n                            valueFormatter: function (y) {\n                                return moment(y).format('LLLL'); //Hide legend label\n                            }\n                        }\n                    },\n                    pointClickCallback: function (e, p) {\n                        if (scope.currentView != -1) {\n                            scope.showOne(p.name);\n                        }\n                    },\n                    drawCallback: function (g, isInit) {\n                        timeOut(function () {\n                            if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                                scope.refersh(g);\n                            }\n                        });\n                    },\n                    'interactionModel': interactionModel\n                };\n\n                scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n                element.find(\"canvas\").css(\"zIndex\", 99);\n\n\n                if (attrs.hasOwnProperty(\"shown\")) {\n\n\n                    var basicInfo = scope.basicInfo;\n                    if (basicInfo && basicInfo.range_show) {\n                        scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                                xAxisHeight: 0,\n                                axes: {\n                                    x: {\n                                        drawAxis: false\n                                    }\n                                },\n                                showRangeSelector: true,\n                                rangeSelectorHeight: 30\n                            }\n                        );\n                        scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n                    }\n\n\n                    var status = false;\n                    // add mouse up event to range select\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function (event) {\n                        status = false;\n                        timeOut(function () {\n                            var finalDateRagne = scope.currentChart.xAxisRange();\n                            scope.chartDateTime = {begin: finalDateRagne[0], end: finalDateRagne[1]};\n                        });\n                    });\n\n                    scope.$on('mouseUpMessage', function ($scope, e) {\n                        if (\"mouseup\" === e.type && status) {\n                            status = false;\n                            timeOut(function () {\n                                var finalDateRange = scope.currentChart.xAxisRange();\n                                scope.chartDateTime = {begin: finalDateRange[0], end: finalDateRange[1]};\n                            });\n                        }\n                    });\n\n                    scope.$on('bindFatherGraphEvent', function (event, data) {\n                        angular.forEach(data.children, function (child) {\n                            if (child == attrs.id) {\n                                Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                                    zoom: true,\n                                    selection: false,\n                                    range: false\n                                });\n                                scope.currentChart.updateOptions({\n                                    drawCallback: function (g, isInit) {\n                                        timeOut(function () {\n                                            scope.refersh(g);\n                                        });\n                                    }\n                                });\n                            }\n                        });\n\n\n                    });\n\n\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function (event) {\n                        if (status) {\n                            timeOut(function () {\n                                scope.chartDateWindow = scope.currentChart.xAxisRange();\n                            });\n                        }\n                    });\n\n                    element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function (event) {\n                        status = true;\n                    });\n\n                    //bind chart\n                    if (basicInfo && basicInfo.childrenChart.length > 0) {\n                        var param = {'graphs': [scope.currentChart], children: basicInfo.childrenChart};\n                        if (scope.rangeSelectorBar) {\n                            param.graphs.push(scope.rangeSelectorBar);\n                        }\n                        scope.$emit('bindChildChartEvent', param);\n                    }\n                }\n            }, 0\n        );\n    }\n\n    //controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\n    controller($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope) {\n        var element_id = $element.attr(\"id\");\n        $scope.elementId = element_id;\n\n        $scope['defaultColors'] = dataService.defaultColors();\n        var metadata = null;\n        var widgetData = null;\n        $scope.emptyDataShow = false;\n        // attributes----------------------\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.data && widgetData.from == \"show\") {\n            $scope.loadingShow = false;\n\n            $scope.intevals = {device: []};\n\n\n            // update chart\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if (widgetData.data.metadata.css) {\n                $scope.css = widgetData.data.metadata.css;\n            }\n\n            //fix interval\n            $scope.fixInterval = false;\n            var noneFixed = [];\n            $scope.fixGraphWithGap = function () {\n                if ($scope.currentChart && $scope.fixInterval) {\n                    var currentInterval = -1;\n                    angular.forEach($scope.intevals.device, function (item) {\n                        if (item.name === $scope.currentIntervalName) {\n                            currentInterval = item.interval;\n                        }\n                    });\n                    if (noneFixed && noneFixed.length > 0) {\n                        //fix\n                        //get first one\n                        var fixed = [noneFixed[0]];\n                        var tempDate = fixed[0][0].getTime() + currentInterval;\n                        while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                            var flag = false;\n                            // add new\n                            for (var i = 0; i < noneFixed.length; i++) {\n                                if (noneFixed[i][0].getTime() == tempDate) {\n                                    flag = true;\n                                    fixed.push(noneFixed[i]);\n                                    break;\n                                }\n                            }\n\n                            if (!flag) {\n                                var obj = [new Date(tempDate)];\n                                // add NaN\n                                for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                    obj.push(NaN);\n                                }\n                                fixed.push(obj);\n                            }\n                            tempDate += currentInterval;\n                        }\n                        $scope.currentChart.updateOptions({file: fixed});\n                    }\n                } else if ($scope.currentChart && !$scope.fixInterval) {\n                    noneFixed = [];\n                    angular.copy($scope.currentChart.file_, noneFixed);\n                    $scope.currentChart.updateOptions({file: noneFixed});\n                }\n\n            };\n            $scope.fixGraphWithGap_click = function () {\n                if ($scope.currentChart && !$scope.fixInterval) {\n                    noneFixed = [];\n                    angular.copy($scope.currentChart.file_, noneFixed);\n                    var currentInterval = -1;\n                    angular.forEach($scope.intevals.device, function (item) {\n                        if (item.name === $scope.currentIntervalName) {\n                            currentInterval = item.interval;\n                        }\n                    });\n                    if (noneFixed && noneFixed.length > 0) {\n                        //fix\n                        //get first one\n                        var fixed = [noneFixed[0]];\n                        var tempDate = fixed[0][0].getTime() + currentInterval;\n                        while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                            var flag = false;\n                            // add new\n                            for (var i = 0; i < noneFixed.length; i++) {\n                                if (noneFixed[i][0].getTime() == tempDate) {\n                                    flag = true;\n                                    fixed.push(noneFixed[i]);\n                                    break;\n                                }\n                            }\n\n                            if (!flag) {\n                                var obj = [new Date(tempDate)];\n                                // add NaN\n                                for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                    obj.push(NaN);\n                                }\n                                fixed.push(obj);\n                            }\n                            tempDate += currentInterval;\n                        }\n                        $scope.currentChart.updateOptions({file: fixed});\n                    }\n                } else if ($scope.currentChart && $scope.fixInterval) {\n                    $scope.currentChart.updateOptions({file: noneFixed});\n                }\n\n            };\n\n\n            metadata = widgetData.data.metadata;\n            $scope.basicInfo = metadata.data.basic;\n            $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.data_from = \"application\";\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n\n\n                $scope.$watch('currentView', function (nObj, oObj) {\n                    // change\n                    if (nObj != oObj) {\n                        if (nObj == -1) {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            angular.forEach(metadata.data.groups[1].collections, function (level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                // show device view\n                                dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                                    initChart(data);\n                                }, function (error) {\n                                    console.error(error)\n                                });\n                            }\n\n                        } else {\n                            //get relation config\n                            if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                                return;\n                            } else {\n                                var rangeLevel = null;\n                                var otherLevels = [];\n                                angular.forEach(metadata.data.groups[2].collections, function (level) {\n                                    if (level.rows.length > 0) {\n                                        if (rangeLevel != null) {\n                                            otherLevels.push(rangeLevel);\n                                        }\n                                        rangeLevel = level.name;\n                                    }\n                                });\n                                if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                                    // show children view\n                                    dataService.childrenDeviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, rangeLevel, otherLevels).then(function (data) {\n                                        // get all device trees\n                                        if (data != null && data.length > 0) {\n                                            initChildrenChart(data);\n                                        } else {\n                                            return;\n                                        }\n\n                                    }, function (error) {\n                                        console.error(error)\n                                    });\n\n                                }\n                            }\n                        }\n                    }\n                    $scope.fixInterval = false;\n\n                });\n\n\n                // first time of showing chart\n                $scope.$watch('currentChart', function (newValue) {\n                    if (newValue) {\n                        //device first level\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular.forEach(metadata.data.groups[1].collections, function (level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        //send a rest request\n                        dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels).then(function (data) {\n                            initChart(data);\n                        }, function (error) {\n                            console.error(error)\n                        });\n                    }\n                });\n\n\n                $scope.$watch(\"chartDateTime\", function (newValue, oldValue) {\n                    if (newValue.begin != oldValue.begin || newValue.end != oldValue.end) {\n                        var expect_points = Math.floor($element.parent().width() / 2);\n                        // find a interval\n                        var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                        var conf = $scope.intevals.device;\n                        // device detail view\n                        var preOne = conf[0].interval;\n                        var lastOne = conf[conf.length - 1].interval;\n                        var cin = \"\";\n                        if (expectedInterval >= preOne) {\n                            expectedInterval = preOne;\n                        } else if (expectedInterval <= lastOne) {\n                            expectedInterval = lastOne;\n                        } else {\n                            for (var i = 1; i < conf.length; i++) {\n                                if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                    expectedInterval = preOne;\n                                } else {\n                                    preOne = conf[i].interval;\n                                    cin = conf[i].name;\n                                }\n                            }\n                        }\n                        $scope.currentIntervalName = \"\";\n\n                        angular.forEach(conf, function (config) {\n                            if (config.interval == expectedInterval) {\n                                $scope.currentIntervalName = config.name;\n                            }\n                        });\n                        $scope.loadingShow = true;\n                        if ($scope.currentView == 1) {\n                            // scatter detail view\n                            if (expectedInterval == conf[0].interval) {\n                                // set valueRange;\n                                // re cal max and min\n                                // $scope.childrenRangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                                $scope.currentChart.updateOptions({dateWindow: $scope.chartDateWindow});\n                                // if ($scope.rangeSelectorBar) {\n                                //     $scope.rangeSelectorBar.updateOptions({series: $scope.childRangeSeries});\n                                // }\n                                $scope.loadingShow = false;\n                            } else {\n                                var deviceInfo = [];\n                                var currentStore = \"\";\n                                // has problem....\n                                angular.forEach($scope.childTrees, function (device) {\n                                    angular.forEach(device.trees, function (tree, index) {\n                                        if (expectedInterval == tree.frequency && index != 0) {\n                                            currentStore = tree.store;\n                                            deviceInfo.push({name: device.name, tree: tree.tree});\n                                        }\n                                    });\n                                });\n\n                                dataService.devicesStoreData($rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, newValue.begin, newValue.end).then(function (data) {\n                                    var showData = [];\n                                    angular.forEach(data, function (arr) {\n                                        var deviceData = [];\n                                        angular.forEach(arr.data, function (bucket) {\n                                            if (bucket.data != null) {\n                                                Array.prototype.push.apply(deviceData, bucket.data.slice(0, bucket.size));\n                                            }\n                                        });\n                                        showData.push({device: arr.device, data: deviceData});\n                                    });\n                                    //get configuration\n                                    updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n\n                                }, function (data) {\n                                    console.info(data);\n                                });\n                            }\n                            $scope.fixGraphWithGap();\n                        } else {\n                            // if expected interval is the biggest, show range data\n                            if (expectedInterval == conf[0].interval) {\n                                if (!($scope.chartDateWindow[0] instanceof Date)) {\n                                    $scope.chartDateWindow[0] = new Date($scope.chartDateWindow[0]);\n                                }\n\n                                if (!($scope.chartDateWindow[1] instanceof Date)) {\n                                    $scope.chartDateWindow[1] = new Date($scope.chartDateWindow[1]);\n                                }\n                                $scope.rangeConfig[\"dateWindow\"] = $scope.chartDateWindow;\n                                // set valueRange\n                                $scope.currentChart.updateOptions($scope.rangeConfig);\n                                if ($scope.rangeSelectorBar && $scope.rangeSeries) {\n                                    $scope.rangeSelectorBar.updateOptions({series: $scope.rangeSeries});\n                                }\n                                // tell some other widgets, the graph is changed.\n                                $timeout(function () {\n                                    $rootScope.$broadcast('chartDataChangeEvent', {\n                                        'id': element_id,\n                                        'group': 'device',\n                                        'data': {\n                                            'collection': conf[0].name,\n                                            'group': 'device',\n                                            'data': $scope.ordinalRangeData.filter(function (obj) {\n                                                return obj.timestamp >= $scope.rangeConfig[\"dateWindow\"][0].getTime() && obj.timestamp <= $scope.rangeConfig[\"dateWindow\"][1].getTime();\n                                            })\n                                        }\n                                    });\n                                });\n\n                                $scope.loadingShow = false;\n                            } else {\n                                // cal tree\n                                angular.forEach($scope.trees, function (tree, index) {\n                                    if (expectedInterval == tree.frequency && index != 0) {\n                                        // send request\n                                        dataService.deviceStoreData($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, newValue.begin, newValue.end).then(function (data) {\n                                            // udpate chart\n                                            var showData = [];\n                                            angular.forEach(data, function (arr) {\n                                                Array.prototype.push.apply(showData, arr.data.slice(0, arr.size));\n                                            });\n                                            showData = showData.filter(function (obj) {\n                                                return obj != null;\n                                            });\n                                            showData.sort(function (a, b) {\n                                                return a.timestamp > b.timestamp ? 1 : -1;\n                                            });\n                                            //get configuration\n                                            updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n\n                                            // tell some other widgets, the graph is changed.\n                                            $timeout(function () {\n                                                $rootScope.$broadcast('chartDataChangeEvent', {\n                                                    'id': element_id,\n                                                    'group': 'device',\n                                                    'data': {\n                                                        'collection': tree.store,\n                                                        'group': 'device',\n                                                        'data': showData\n                                                    }\n                                                });\n                                            });\n\n                                        }, function (data) {\n                                            console.info(data);\n                                        });\n                                    }\n                                });\n                            }\n                            $scope.fixGraphWithGap();\n                        }\n                        $scope.status = false;\n                    }\n                });\n\n\n            });\n\n\n            var fetchData = function (values, node) {\n                if (node.children[0] != null) {\n                    fetchData(values, node.children[0]);\n                }\n\n                if (node.children[1] != null) {\n                    fetchData(values, node.children[1]);\n                }\n\n                if (node.children[0] == null && node.children[1] == null) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                }\n\n            };\n\n\n            $scope.trees = [];\n\n            $scope.rangeData = [];\n\n            $scope.ordinalRangeData = [];\n\n            var initChart = function (data) {\n                $scope.intevalforshow = [];\n                //\n                $scope.intevals.device = [];\n                var trees = data.trees;\n                $scope.trees = trees;\n                var rangeTree = null;\n                angular.forEach(trees, function (tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n                    $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                });\n\n\n                // init chart with range data\n                var store = rangeTree.store;\n\n                // get all data\n                var allData = [];\n                fetchData(allData, rangeTree.tree);\n                allData = allData.filter(function (obj) {\n                    return obj != null;\n                });\n                allData.sort(function (a, b) {\n                    return a.timestamp > b.timestamp ? 1 : -1;\n                });\n\n\n                if ($scope.trees.length == 0 || allData.length == 0) {\n                    $scope.emptyDataShow = true;\n                    return;\n                }\n\n                // if the data only has one point. change the data range to bigger\n                if (allData.length == 1) { //  means only one point.\n                    var newData = [];\n                    // add 1 points into both side\n                    var thePoint = allData[0];\n                    var timestamp = thePoint.timestamp;\n                    var currentInterval = $scope.intevals.device[0].interval;\n                    newData.push({timestamp: timestamp - currentInterval});\n                    Array.prototype.push.apply(newData, allData);\n                    newData.push({timestamp: timestamp + currentInterval});\n                    allData = newData;\n                }\n                $scope.ordinalRangeData = allData;\n                // get configuration and make real data\n                updateChart(metadata, store, allData);\n            };\n\n            var initChildrenChart = function (deviceDatas) {\n                var devicesInfo = {};\n                $scope.intevals.device = [];\n                //range data with all device\n                $scope.childTrees = [];\n                angular.forEach(deviceDatas, function (deviceData) {\n                    var device = deviceData.device;\n                    var trees = deviceData.trees;\n                    $scope.childTrees.push({name: device.name, trees: trees});\n                    var rangeTree = null;\n                    angular.forEach(trees, function (tree) {\n                        if (tree.range) {\n                            rangeTree = tree;\n                        }\n\n                        var flag = false;\n                        angular.forEach($scope.intevals.device, function (interval) {\n                            if (interval.name == tree.store && interval.interval == tree.frequency) {\n                                // has same one\n                                flag = true;\n                            }\n                        });\n                        if (!flag) {\n                            $scope.intevals.device.push({name: tree.store, interval: tree.frequency});\n                        }\n\n                    });\n\n                    if (rangeTree != null) {\n                        var deviceObj = devicesInfo[device.name] = {};\n                        // get all data\n                        var allData = [];\n                        fetchData(allData, rangeTree.tree);\n                        allData = allData.filter(function (obj) {\n                            return obj != null;\n                        });\n                        allData.sort(function (a, b) {\n                            return a.timestamp > b.timestamp ? 1 : -1;\n                        });\n                        //\n                        deviceObj[\"range\"] = rangeTree;\n                        deviceObj[\"data\"] = allData;\n                    } else {\n                        console.info(device.name + \" has none data.\");\n                    }\n\n                });\n\n                updateChildrenChart(metadata, devicesInfo);\n            };\n\n\n            var updateChildrenChart = function (metadata, devicesInfo) {\n                //relation\n                var relationConfig = metadata.data.groups[2];\n                // scatter view shows only one collection\n                var collections = relationConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n                var allLines = [];\n                var allXLabels = [];\n                angular.forEach(devicesInfo, function (device, key) {\n                    angular.forEach(device.data, function (item) {\n                        var flag = false;\n                        angular.forEach(allXLabels, function (label) {\n                            if (label.getTime() == item.timestamp) {\n                                flag = true;\n                            }\n                        });\n                        if (!flag) {\n                            allXLabels.push(new Date(item.timestamp));\n                        }\n\n\n                    });\n                });\n                // order\n                allXLabels.sort(function (a, b) {\n                    return a > b ? 1 : -1;\n                });\n\n                // make all line\n                angular.forEach(allXLabels, function (label) {\n                    allLines.push([label]);\n                });\n\n\n                var yRange = {min: null, max: null};\n                var showY2axis = false;\n                var counter = 0;\n                angular.forEach(devicesInfo, function (device, key) {\n                    colors.push($scope.defaultColors[counter]);\n                    counter++;\n\n                    angular.forEach(collections, function (collection) {\n                        if (collection.name == device.range.store) {\n                            $scope.currentIntervalName = device.range.store;\n                            var originalData = device.data;\n\n                            // always same for each device\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {'axis': 'y1'};\n                            } else {\n                                series[collection.rows[0].label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            labels.push(key);\n                            // make a line\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            // add value\n                            angular.forEach(allLines, function (realLine, index) {\n\n                                var flag = false;\n                                angular.forEach(originalData, function (odata) {\n                                    if (realLine[0].getTime() == odata.timestamp) {\n                                        try {\n                                            var value = f(odata);\n                                            realLine.push(value);\n                                            if (yRange.min == null) {\n                                                yRange.min = value;\n                                            }\n\n                                            if (yRange.max == null) {\n                                                yRange.max = value;\n                                            }\n\n                                            if (yRange.min > value) {\n                                                yRange.min = value;\n                                            }\n\n                                            if (yRange.max < value) {\n                                                yRange.max = value;\n                                            }\n                                        } catch (ex) {\n                                            realLine.push(null);\n                                        }\n                                        flag = true;\n                                    }\n                                });\n\n                                if (!flag) {\n                                    realLine.push(null);\n                                }\n                            });\n\n\n                        }\n                    });\n                });\n\n                if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                    yRange.min = yRange.min - (yRange.min) * 0.10;\n                    yRange.max = yRange.max + (yRange.max) * 0.10;\n                }\n                //update chart\n\n                if ($scope.currentChart) {\n                    $scope.rangeChildrenData = allLines;\n\n                    if (showY2axis) {\n                        $scope.childrenRangeConfig = {\n                            'labelsKMB': true,\n                            'file': allLines,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max]},\n                                'y2': {}\n                            }\n                            // showRangeSelector: true\n                        };\n                    } else {\n                        var newLines = [];\n                        angular.copy(allLines, newLines);\n                        angular.forEach(newLines, function (line) {\n                            line.push(NaN);\n                        });\n                        series[\"span_y2\"] = {'axis': 'y2'};\n                        $scope.childrenRangeConfig = {\n                            'drawGapEdgePoints': true,\n                            'pointSize': 3,\n                            'labelsKMB': true,\n                            'file': newLines,\n                            'labels': ['x'].concat(labels).concat(['span_y2']),\n                            'ylabel': leftAndRight.left,\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {valueRange: [yRange.min, yRange.max]},\n                                'y2': {\n                                    axisLabelFormatter: function (d) {\n                                        return '';\n                                    }\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                    }\n                    $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n                    $scope.loadingShow = false;\n                }\n\n\n            };\n\n\n            var updateChildrenDetailChart = function (metadata, store, rangeData, allData) {\n                //relation\n                var relationConfig = metadata.data.groups[2];\n                // scatter view shows only one collection\n                var collections = relationConfig.collections;\n                var newLines = [];\n                var newTime = [];\n                var series = {};\n                var labels = [];\n                var colors = [];\n                var leftAndRight = {left: relationConfig.leftYAxis, right: relationConfig.rightYAxis};\n                var yRange = {min: null, max: null};\n                var counter = 0;\n                var showY2axis = null;\n                angular.forEach(allData, function (device) {\n                    colors.push($scope.defaultColors[counter]);\n                    counter++;\n\n                    if (device.data.length > 0) {\n                        labels.push(device.device);\n                        angular.forEach(collections, function (collection) {\n                            if (collection.name == store) {\n                                $scope.currentIntervalName = store;\n                                if (collection.rows[0].yaxis == 0) {\n                                    series[collection.rows[0].label] = {'axis': 'y1'};\n                                } else {\n                                    series[collection.rows[0].label] = {'axis': 'y2'};\n                                    showY2axis = true;\n                                }\n                                var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \")return \" + collection.rows[0].value + \";return null;}\");\n                                var tempData = [];\n                                var tempTime = [];\n                                // make data\n                                angular.forEach(device.data, function (data) {\n                                    var dateTime = new Date(data.timestamp);\n                                    try {\n                                        var value = f(data);\n                                        tempData.push({timestamp: dateTime, value: value});\n\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n\n                                    } catch (e) {\n                                        tempData.push({timestamp: dateTime, value: null});\n                                    }\n                                    tempTime.push(dateTime.getTime());\n                                });\n                                newTime = newTime.concat(tempTime.filter(function (item) {\n                                    return newTime.indexOf(item) < 0;\n                                }));\n                                newLines.push({device: device.device, data: tempData});\n                            }\n                        });\n                    }\n                });\n\n                var chartData = [];\n\n                angular.forEach(newTime, function (nt) {\n                    chartData.push([new Date(nt)]);\n                });\n\n\n                angular.forEach(newLines, function (line) {\n                    angular.forEach(chartData, function (timeTicket) {\n                        // line data\n                        var flag = false;\n                        var lineData = line.data;\n                        for (var i = 0; i < lineData.length; i++) {\n                            if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                                timeTicket.push(lineData[i].value);\n                                flag = true;\n                                break;\n                            }\n                        }\n                        if (flag != true) {\n                            timeTicket.push(null);\n                        }\n                    });\n                });\n\n\n                if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                    yRange.min = yRange.min - (yRange.min) * 0.10;\n                    yRange.max = yRange.max + (yRange.max) * 0.10;\n                }\n\n\n                if (chartData.length == 0) {\n                    $scope.currentChart.updateOptions({\n                        'file': []\n                    });\n                    $scope.loadingShow = false;\n                } else {\n                    if ($scope.currentChart) {\n\n                        if (showY2axis) {\n                            $scope.currentChart.updateOptions({\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': chartData,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRange.min, yRange.max]}\n                                }\n                                // showRangeSelector: true\n                            });\n                        } else {\n                            var newLines = [];\n                            angular.copy(chartData, newLines);\n                            angular.forEach(newLines, function (line) {\n                                line.push(NaN);\n                            });\n                            series[\"span_y2\"] = {axis: 'y2'};\n                            $scope.currentChart.updateOptions({\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {valueRange: [yRange.min, yRange.max]},\n                                    \"y2\": {\n                                        axisLabelFormatter: function (d) {\n                                            return '';\n                                        }\n                                    }\n                                }\n                                // showRangeSelector: true\n                            });\n                        }\n                        $scope.loadingShow = false;\n                    }\n                }\n\n\n            };\n\n\n            /**\n             * update detail chart\n             * @param metadata\n             * @param store\n             * @param rangeData\n             * @param allData\n             */\n            var updateDetailChart = function (metadata, store, rangeData, allData) {\n                var deviceConfig = metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{min: null, max: null}, {min: null, max: null}];\n                angular.forEach(collections, function (collection) {\n                    if (collection.name == store) {\n                        angular.forEach(allData, function (line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        // var yRange = {'min': null, 'max': null};\n                        var showY2axis = false;\n                        angular.forEach(collection.rows, function (row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {'axis': 'y1'};\n                            } else {\n                                series[row.label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \")return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular.forEach(allLines, function (realLine) {\n                                try {\n                                    var value = f(allData[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular.forEach(yRanges, function (yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        if (allLines.length == 0) {\n                            $scope.currentChart.updateOptions({\n                                'file': []\n                            });\n                            if ($scope.rangeSelectorBar) {\n                                $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                            }\n                            $scope.loadingShow = false;\n                        } else {\n                            if ($scope.currentChart) {\n\n                                if (showY2axis) {\n                                    $scope.currentChart.updateOptions({\n                                        'drawGapEdgePoints': true,\n                                        'pointSize': 3,\n                                        'labelsKMB': true,\n                                        'file': allLines,\n                                        'labels': ['x'].concat(labels),\n                                        'ylabel': leftAndRight.left,\n                                        'y2label': leftAndRight.right,\n                                        'series': series,\n                                        'axes': {\n                                            'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                            'y2': {'labelsKMB': true, valueRange: [yRanges[1].min, yRanges[1].max]}\n                                        },\n                                        'colors': colors\n                                        // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    });\n                                } else {\n\n                                    var newLines = [];\n                                    angular.copy(allLines, newLines);\n                                    angular.forEach(newLines, function (line) {\n                                        line.push(NaN);\n                                    });\n\n                                    series[\"span-Y2\"] = {axis: 'y2'};\n                                    $scope.currentChart.updateOptions({\n                                        'drawGapEdgePoints': true,\n                                        'pointSize': 3,\n                                        'labelsKMB': true,\n                                        'file': newLines,\n                                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                                        'ylabel': leftAndRight.left,\n                                        'y2label': \"\",\n                                        'series': series,\n                                        'axes': {\n                                            'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                            'y2': {\n                                                axisLabelFormatter: function (d) {\n                                                    return '';\n                                                }\n                                            }\n                                        },\n                                        'colors': colors\n                                        // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    });\n\n                                }\n\n                                $scope.loadingShow = false;\n                            }\n                        }\n\n\n                    }\n                });\n\n\n            };\n\n            /**\n             * update range chart\n             * @param metadata\n             * @param store\n             * @param allData\n             */\n            var updateChart = function (metadata, store, allData) {\n                var deviceConfig = metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var leftAndRight = {left: deviceConfig.leftYAxis, right: deviceConfig.rightYAxis};\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{min: null, max: null}, {min: null, max: null}];\n                angular.forEach(collections, function (collection) {\n                    if (collection.name == store) {\n                        $scope.currentIntervalName = store;\n                        angular.forEach(allData, function (line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        $scope.rangeSeriesNumber = collection.rows.length;\n                        var showY2axis = false;\n                        angular.forEach(collection.rows, function (row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {'axis': 'y1'};\n                            } else {\n                                series[row.label] = {'axis': 'y2'};\n                                showY2axis = true;\n                            }\n\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular.forEach(allLines, function (realLine) {\n                                try {\n                                    var value = f(allData[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        if ($scope.currentChart) {\n                            $scope.rangeData = allLines;\n                            var basicInfo = $scope.basicInfo;\n                            if (basicInfo && basicInfo.range_show) {\n                                var rangeBarLabels = [];\n                                for (var i = 0; i < labels.length; i++) {\n                                    rangeBarLabels.push(\"l\" + i);\n                                }\n                                var series_range = {'l0': {axis: 'y1'}};\n                                if (showY2axis) {\n                                    //noinspection JSDuplicatedDeclaration\n                                    series_range = {\n                                        'l0': {axis: 'y1'},\n                                        'l0': {axis: 'y2'}\n                                    };\n                                    $scope.rangeSeries = series_range;\n\n                                    $scope.rangeSelectorBar.updateOptions({\n                                        'file': allLines,\n                                        'labels': ['x'].concat(rangeBarLabels),\n                                        'series': series_range\n                                    });\n                                } else {\n                                    series_range[\"span_y2\"] = {axis: 'y2'};\n                                    $scope.rangeSeries = series_range;\n                                    var newLines = [];\n                                    angular.copy(allLines, newLines);\n                                    angular.forEach(newLines, function (line) {\n                                        line.push(NaN);\n                                    });\n                                    $scope.rangeSelectorBar.updateOptions({\n                                        'file': newLines,\n                                        'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                        'series': series_range\n                                    });\n                                }\n\n\n                            }\n\n                            angular.forEach(yRanges, function (yrange) {\n                                if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                    yrange.min = yrange.min - (yrange.min) * 0.10;\n                                    yrange.max = yrange.max + (yrange.max) * 0.10;\n                                }\n                            });\n\n\n                            // if graph has 2 yAxis or a yAxis\n\n\n                            if (showY2axis) {\n                                $scope.rangeConfig = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'colors': colors,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                        'y2': {'labelsKMB': true, valueRange: [yRanges[1].min, yRanges[1].max]}\n                                    },\n                                    'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    // showRangeSelector: true\n                                };\n                            } else {\n                                series['span_y2'] = {axis: 'y2'};\n                                var newLines = [];\n                                angular.copy(allLines, newLines);\n                                angular.forEach(newLines, function (line) {\n                                    line.push(NaN);\n                                });\n                                $scope.rangeConfig = {\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'colors': colors,\n                                    'axes': {\n                                        'y': {valueRange: [yRanges[0].min, yRanges[0].max]},\n                                        'y2': {\n                                            axisLabelFormatter: function (d) {\n                                                return '';\n                                            }\n                                        }\n                                    },\n                                    'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                    // showRangeSelector: true\n                                };\n                            }\n\n\n                            if (basicInfo && basicInfo.range_show) {\n                                Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                    zoom: true,\n                                    selection: false,\n                                    range: false\n                                });\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            //bind\n                            $scope.loadingShow = false;\n                        }\n\n                    }\n                });\n            };\n\n\n            $scope.chartDateTime = {begin: null, end: null};\n\n            // function for show one\n            $scope.showOne = function (deviceName) {\n                // device type is\n                if ($location.url().indexOf('/app/page/param/') != -1) {\n                    //open window\n                    $window.open(\"/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n                } else {\n                    //open window\n                    $window.open(\"/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n                }\n\n            };\n\n            var timer = null;\n            $scope.refersh = function (g) {\n                if (timer) {\n                    $timeout.cancel(timer);\n                }\n                timer = $timeout(function () {\n                    $scope.chartDateTime = {begin: g.xAxisRange()[0], end: g.xAxisRange()[1]};\n                    $scope.chartDateWindow = g.xAxisRange();\n                }, 600);\n            };\n\n\n        }\n\n    }\n\n\n    static buildFactory($timeout, dataService, $rootScope, $interval, $filter, $location) {\n        fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location);\n        return fgpWidgetGraph.instance;\n    }\n\n}\n\nfgpWidgetGraph.$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location'];\n\nexport {fgpWidgetGraph as default}","/**\n * Created by ericwang on 20/06/2016.\n */\n'use strict';\nexport default class fgpWidgetPageTitle {\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(element, attrs) {\n        var element_id = attrs.id;\n        //drag-channel  item means this widget accepts items\n        var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n            '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n            '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n            '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n            '<h1>{{css.title.text}}</h1>' +\n            '<h3>{{css.subtitle.text}}</h3>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n        return dom_show;\n    }\n\n\n    controller($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.data && widgetData.from == \"show\") {\n            metadata = widgetData.data.metadata;\n            $scope.css = {};\n            $scope.css[\"color\"] = metadata.css.color;\n            $scope.css[\"width\"] = metadata.css.width;\n            $scope.css[\"minHeight\"] = metadata.css.minHeight;\n            $scope.css[\"border\"] = {};\n            $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n            $scope.css[\"background\"] = {};\n            $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n            $scope.css[\"title\"] = metadata.css.title;\n            $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n            $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n            $scope.css[\"subtitle\"] = metadata.css.subtitle;\n            $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n            $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n                $scope.css[\"title\"].text = f(deviceData.device);\n                f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n                $scope.css[\"subtitle\"].text = f(deviceData.device);\n            });\n        }\n\n\n\n\n    }\n\n    static buildFactory() {\n        fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n        return fgpWidgetPageTitle.instance;\n    }\n}","/**\n * Created by ericwang on 20/06/2016.\n */\nimport angular from 'angular';\nimport ngMap from 'ngmap';\nexport default class fgpWidgetMap {\n\n\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(element, attrs) {\n        var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n            '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n            '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n            '</ng-map>' +\n            '</div>' +\n            '';\n        return dom_show;\n    }\n\n\n    controller($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        /**\n         * get device information\n         */\n        if (widgetData.data && widgetData.from == \"show\") {\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n\n                $scope.showdata = widgetData.data;\n\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n\n                var location = {};\n                $scope.markers = [];\n                $scope.details = $scope.$parent.device;\n\n\n                // show one point.\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                        var result = f(deviceData.device);\n                        if (result) {\n                            location[item.label] = result;\n                        } else {\n                            location[item.label] = \"\";\n                        }\n                    } catch (error) {\n                        // show image\n                        if (\"image\" == item.label) {\n                            location[item.label] = item.value;\n                        } else {\n                            location[item.label] = \"\";\n                        }\n\n                    }\n                });\n\n\n                //do not show\n                if (location.latitude == \"\" || location.longitude == \"\") {\n                    //hard code. the location is Melbourne\n                    location.latitude = \"-37.810000\";\n                    location.longitude = \"144.950000\";\n                    $scope.center = [location.latitude, location.longitude];\n                    // $scope.markers.push(location);\n                } else {\n                    $scope.center = [location.latitude, location.longitude];\n                    $scope.markers.push(location);\n                }\n\n            });\n        }\n\n    }\n\n    static buildFactory() {\n        fgpWidgetMap.instance = new fgpWidgetMap();\n        return fgpWidgetMap.instance;\n    }\n\n\n}","/**\n * Created by ericwang on 20/06/2016.\n */\nimport angular from 'angular';\nexport default class fgpWidgetDeviceDetail {\n\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(element, attrs) {\n        return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n            '<div class=\"row\" ng-repeat=\"item in data\">' +\n            '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n            '</div>' +\n            '</div>' +\n            '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n            '</div>' +\n            '</div>';\n    }\n\n\n    controller($scope, $element) {\n        var metadata = null;\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n\n        /**\n         * get device information\n         */\n        if (widgetData.data && widgetData.from == \"show\") {\n\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n\n                $scope.showdata = widgetData.data;\n\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n\n\n                $scope.data = [];\n                //get all columns\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                        item.value = f(deviceData.device);\n                        $scope.data.push(item);\n                    } catch (error) {\n                        item.value = \"\";\n                        $scope.data.push(item);\n                    }\n                });\n\n\n            });\n\n        }\n\n    }\n\n\n    static buildFactory() {\n        fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n        return fgpWidgetDeviceDetail.instance;\n    }\n}","/**\n * Created by ericwang on 20/06/2016.\n */\nexport default class fgpWidgetSpan {\n\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(scope, element) {\n        return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n            '</div>';\n    }\n\n    controller($scope, $element) {\n\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        $scope.showdata = widgetData.data;\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if ($scope.showdata.metadata.css) {\n            $scope.css = $scope.showdata.metadata.css;\n        }\n    }\n\n    static buildFactory() {\n        fgpWidgetSpan.instance = new fgpWidgetSpan();\n        return fgpWidgetSpan.instance;\n    }\n\n}","/**\n * Created by ericwang on 20/06/2016.\n */\nimport angular from 'angular';\nimport chartjs from  'chart.js';\nclass fgpWidgetPie {\n\n    constructor($timeout) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.$timeout = $timeout;\n    }\n\n\n    template(element, attrs) {\n        return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n            '<canvas class=\"fgpPieChart\"></canvas>' +\n            '</div>' +\n            '</div>';\n    }\n\n    link(scope, element) {\n\n        this.$timeout(function () {\n            var ctx = element.find(\"canvas\")[0];\n            scope.chart = new Chart(ctx, {\n                type: 'pie',\n                data: {\n                    labels: ['1'],\n                    datasets: [\n                        {\n                            data: [1],\n                            backgroundColor: []\n                        }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    animation: false,\n                    legend: {display: true}\n                }\n            });\n        });\n    }\n\n\n    controller($scope, $element, $timeout) {\n\n        var id = $element.attr(\"id\");\n        var metadata = null;\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        if (widgetData.from == \"show\" && widgetData.data) {\n            $scope.data_from = \"application\";\n            $scope.parent_container = widgetData.data.parent;\n\n            $scope.$on('deviceInfoEvent', function (event, deviceData) {\n                // if the parent container sends a device to here, ignore global device.\n                if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                    return;\n                } else if (deviceData.from != \"application\") {\n                    if ($scope.parent_container != \"edit\" + deviceData.from) {\n                        return;\n                    } else {\n                        $scope.data_from = deviceData.from;\n                    }\n                }\n                metadata = widgetData.data.metadata;\n                $scope.showdata = widgetData.data;\n                $scope.css = {\n                    width: \"col-md-12\",\n                    height: \"400\"\n                };\n                if ($scope.showdata.metadata.css) {\n                    $scope.css = $scope.showdata.metadata.css;\n                }\n                $scope.data = [];\n                var colors = [];\n                //get all columns\n                var f = null;\n                angular.forEach($scope.showdata.metadata.data, function (item) {\n                    try {\n                        f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                        item.value = f(deviceData.device);\n                        $scope.data.push(item);\n                    } catch (error) {\n                        item.value = item.value;\n                        $scope.data.push(item);\n                    }\n                    if (item.color) {\n                        colors.push(item.color);\n                    } else {\n                        colors.push('#' + (function co(lor) {\n                                return (lor +=\n                                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                                && (lor.length == 6) ? lor : co(lor);\n                            })(''));\n                    }\n                });\n                // timeout\n                $scope.pieData = {labels: [], value: []};\n                $timeout(function () {\n                    // create data\n                    angular.forEach($scope.data, function (item) {\n                        $scope.pieData.labels.push(item.label);\n                        $scope.pieData.value.push(item.value);\n                    });\n\n                    $scope.chart.data.labels = $scope.pieData.labels;\n                    $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                    $scope.chart.data.datasets[0].backgroundColor = colors;\n                    // update chart\n                    $scope.chart.update();\n                });\n\n            });\n\n\n        }\n\n\n    }\n\n    static buildFactory($timeout) {\n        fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n        return fgpWidgetPie.instance;\n    }\n\n}\nfgpWidgetPie.$inject = ['$timeout'];\n\nexport {fgpWidgetPie as default}","/**\n * Created by ericwang on 21/06/2016.\n */\nimport angular from 'angular';\n\nclass fgpWidgetChartTable {\n\n\n    constructor() {\n        this.restrict = 'E';\n        this.scope = {};\n    }\n\n    template(element, attrs) {\n        return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n            '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n            '<thead>' +\n            '<tr>' +\n            '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n            '</tr>' +\n            '</thead>' +\n            '<tbody>' +\n            '<tr ng-repeat=\"value in sampledata.values\">' +\n            '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>' +\n            '</div>';\n    }\n\n    controller($scope, $element) {\n\n        var element_id = $element.attr(\"id\");\n        var widgetData = null;\n\n        $scope.$emit('fetchWidgetMetadataEvent', {\n            id: element_id, callback: function (data) {\n                if (data) {\n                    widgetData = data;\n                }\n            }\n        });\n\n        //show\n        $scope.showdata = widgetData.data;\n\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if ($scope.showdata.metadata.css) {\n            $scope.css = $scope.showdata.metadata.css;\n        }\n\n\n        $scope.$on('chartDataChangeEvent', function (event, chartData) {\n            var chartId = chartData.id;\n            if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n                $scope.sampledata = {};\n                // make data\n                var collectionName = chartData.data.collection;\n                var groupName = chartData.group;\n                var columns = [];\n                //get group and collection configuration\n                angular.forEach($scope.showdata.metadata.data.groups, function (group) {\n                    if (group.name == groupName) {\n                        angular.forEach(group.collections, function (collection) {\n                            if (collection.name === collectionName) {\n                                columns = collection.rows;\n                            }\n                        });\n                    }\n                });\n\n\n                $scope.sampledata.columns = [];\n\n                angular.forEach(columns, function (column) {\n                    $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n                });\n                $scope.sampledata.values = [];\n                angular.forEach(columns, function (column) {\n                    var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                    angular.forEach(chartData.data.data, function (record, index) {\n                        if ($scope.sampledata.values.length < chartData.data.data.length) {\n                            //add new one\n                            var item = {};\n                            item[column.label] = f(record);\n                            $scope.sampledata.values.push(item);\n                        } else {\n                            $scope.sampledata.values[index][column.label] = f(record);\n                        }\n                    });\n                });\n\n                var cleanData = [];\n                angular.forEach($scope.sampledata.values, function (value, index) {\n                    var flag = false;\n                    angular.forEach(columns, function (column) {\n                        if (value[column.label] && value[column.label] != \"\") {\n                            flag = true;\n                        }\n                    });\n\n                    if (flag) {\n                        cleanData.push(value);\n                    }\n                });\n                $scope.sampledata.values = cleanData;\n\n            } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n                //\n\n\n            }\n\n        });\n\n\n    }\n\n    static buildFactory() {\n        fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n        return fgpWidgetChartTable.instance;\n    }\n\n\n}\n\nexport {fgpWidgetChartTable as default}"],"sourceRoot":"/source/"}