{"version":3,"sources":["fgp.kit.bundle.js"],"names":["global","factory","exports","module","require","define","amd","fgp_kit","angular","$","Dygraph","ngmap","chartJS","this","angular$1","jquery","chart_js","fgpStage","scope","applicationName","deviceName","server","configuration","scatterColors","standalone","interactions","drill","replace","restrict","prototype","template","controller","$scope","$element","$timeout","$rootScope","$compile","dataService","$interval","showdata","length","setColors","graphBindingArray","findChild4Repeat","parentId","parentHtmlObj","arrayItems","newId","newScope","i","parent","currentItem","element","html_render","id","attr","repeat","find","append","findChild","$watch","newVal","oldVal","empty","$destroy","$new","$on","evt","msg","push","forEach","item","items","children","item_new","currentElement","groupItems","dulpItem","param","config","callback","metadata","data","datasource","style","key","from","sendDeviceData","graph","$broadcast","graphs","deviceInfo","then","device","buildFactory","instance","dataAccessApi","$http","$q","$cacheFactory","graphDataService","_$http","_$q","indexCache","deviceStores","_$interval","_$graphDataService","host","deviceKey","deferred","defer","url","httpServices","qServices","method","headers","Content-Type","success","type","types","resolve","extensionRequests","name","catch","info","console","warn","all","result","extensionItem","errors","reject","error","promise","deviceInitInfo","application","storeSchema","rangeLevel","otherLevels","fields","get","params","concat","cache","response","childrenDeviceInitInfo","relationType","relationDeviceType","isSame","childrenExtensionInitInfo","extensionType","devicesExtensionInitInfo","devicesKey","promises","__http","fillChildrenTree","buckets","tree","showData","value","flag","fillTree","size","calTree","start","end","filter","elem","devicesStoreData","store","interval","start_point","Date","getTime","devices","index","$graphDataService","JSON","stringify","deviceGraphData","newComeResult","end_point","deviceStoreData","needLoad","timestamp","sort","a","b","put","defaultColors","this$1","colors","co","lor","Math","floor","random","healthcheck","autoUpdateGraph","schema","count","fetcher","last","trees","frequency","timeKey","graphData","$inject","fgpWidgetContainer","attrs","hasOwnProperty","showTitle","element_id","dom_show","dom_show_notitle","widgetData","$emit","css","color","width","border","background","title","show","source","parse","fgpWidgetGraph","$filter","$location","$stateParams","_dataService","dom_loading","dom_legend","dom_empty_data","dom_alert_info","dom_datetime_interval","dom_series_list","dom_real_time_grap","html","link","status","timeOut","completionPercent","graphId","getData","numSeries","numRows","labels","initDate","j","val","sampleData","movePan","event","g","context","side","dragEndX","dragGetX_","dragEndY","dragGetY_","is2DPan","pixelsDragged","dragStartY","axis","axes_","axis_data","axes","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","min","minValue","dragValueRange","attributes_","getForAxis","valueWindow","pow","LOG_SCALE","valueRange","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","max","maxDate","dateRange","zoomRange","xAxisZoomRange","getOptionForAxis","dateWindow_","drawGraph_","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","xAxisRange","yar0","yAxisRange","yOffset","x","y","w","h","xPct","yPct","zoom","zoomInPercentage","xBias","yBias","direction","basicInfo","adjustAxis","bias","delta","increment","foo","yAxes","newYAxes","numAxes","ranges","range","newZoomRange","xAxisExtremes","updateOptions","dateWindow","canScroll","timer","mouseOverHandler","e","cancel","mouseEnterHandler","mouseOutHandler","scroll","normal","WheelEvent","detail","deltaY","wheelDelta","percentage","layerX","target","offsetLeft","layerY","offsetTop","percentages","plotter_","area","cancelEvent","chartDateWindow","firstPoint","mousedownHandler","initializeMouseDown","clientX","startPan","mousemoveHandler","isPanning","currentChart","mouseupHandler","endPan","interactionModel","mousewheel","DOMMouseScroll","wheel","mousedown","mousemove","mouseenter","mouseup","mouseout","drawGapEdgePoints","pointSize","legend","labelsKMB","labelsSeparateLines","highlightSeriesOpts","strokeWidth","strokeBorderWidth","highlightCircleSize","drawPoints","drawAxesAtZero","labelsDivStyles","text-align","position","display","yRangePad","ylabel","xlabel","series","Device0","Device4","axisLabelWidth","y2","valueFormatter","moment","format","pointClickCallback","p","currentView","showOne","drawCallback","isInit","refersh","timer_auto","process_bar_timer","on","tempConifg","realTimeGraph","currentChartOptions","file","auto_device_name","auto_schema","auto_store","auto_fields","graph_data","worker","deviceConfig","auto_metadata","groups","collections","allLines","yRanges","collection","line","showY2axis","rows","row","label","yaxis","f","Function","counter","realLine","ex","yrange","newLines","copy","perInterval","showRealTimeGraph","modal","range_show","rangeSelectorBar","xAxisHeight","drawAxis","showRangeSelector","rangeSelectorHeight","finalDateRagne","chartDateTime","begin","finalDateRange","view","child","synchronize","selection","childrenChart","$window","elementId","emptyDataShow","alertMessage","showY2Btns","legendText","legendText_device","legendText_datetime","legendText_column","legendText_value","legendColor","autoupdate","defaultTimeIntervals","scales","dateTimeIntervals","locked_interval","lock","currentIntervalName","currentIntervalChoosed","_item","changeInterval","basic","checked","rangeConfig","loadingShow","intevals","height","begin_path","end_path","init_flag","fixInterval","noneFixed","fixGraphWithGap","currentInterval","fixed","tempDate","obj","labels_","file_","showOrHideDevice","childrenDevices","setVisibility","fixGraphWithGap_click","parent_container","data_from","checkY2Btns","deviceData","nObj","oObj","button_handlers","level","patt","RegExp","lines","columns","match","column","startsWith","initChart","relation","relationConfig","nameColumn","childrenDeviceNameColumn","relation_group","initChildrenChart","interactionHandler","devices_key","extension_type","buttons","scatter","button","buttons_html","_func","toString","slice","$index","substr","field","dataFilter","highlighting","hideAllOthers","hideOther","timerInterval","setSelection","newValue","oldValue","expect_points","expectedInterval","conf","preOne","lastOne","cin","limits","series_range","l0","rangeBarLabels","objNeed2Add","dataLength","tempObj","rangeSeries","points","connected","connectSeparatedPoints","currentStore","childTrees","arr","deleteIndex","splice","devicesMatchData","updateChildrenDetailChart","rangeChildrenData","updateDetailChart","rangeData","group","fetchData","values","node","array","Array","apply","ordinalRangeData","intevalforshow","rangeTree","allData","first","newData","thePoint","endOf","toDate","updateChart","deviceDatas","devicesInfo","_index","merge","extension","deviceObj","updateChildrenChart","leftAndRight","left","leftYAxis","right","rightYAxis","allXLabels","yRange","originalData","odata","childrenRangeConfig","y2label","axisLabelFormatter","d","Number","newTime","tempData","tempTime","dateTime","indexOf","chartData","nt","timeTicket","lineData","highlightCallback","pts","seriesName","currentHighLightChildDevice","maxWidth","offsetWidth","sn","point_show","colorIndex","user_attrs_","legendText_device_name","tz","guess","xval","yval","point","canvasy","canvasx","legendbox","$apply","legendTop","legendLeft","unhighlightCallback","autoUpdateChart","rangeSeriesNumber","drillDown","open","lastIndexOf","btntimer","btnZoomInVLeft","btnZoomOutVLeft","btnZoomInVRight","btnZoomOutVRight","btnPanVULeft","btnPanVDLeft","btnPanVURight","btnPanVDRight","btnpanleft","panRange","pan_delta","startDate","endDate","btnpanright","btnzoomin","rangeStart","rangeEnd","btnzoomout","init","fgpWidgetPageTitle","minHeight","subtitle","text","fgpWidgetMap","location","markers","details","$parent","latitude","longitude","center","fgpWidgetDeviceDetail","fgpWidgetSpan","fgpWidgetPie","ctx","chart","Chart","datasets","backgroundColor","options","responsive","maintainAspectRatio","animation","pieData","update","fgpDockerButton","show_dom","stats","confData","repeateId","pageDevice","container","checkShow","shown","split","healthinfo","action","func","script","relationship","successCallback","errorCallback","fgpWidgetRepeatContainer","$websocket","labelstyle","listStyle","deviceType","dataStream","port","onMessage","message","backData","State","Health","Status","fgpImage","fgpIcon","icon","content","desc","fgpWidgetAppContainer","containers","containerswithTimeout","showstyle","pp","gotoContainer","showLabel","app","timer_index","t","newTimer","itemIndex","fgpWidgetChartTable","chartId","sampledata","collectionName","groupName","formatter","record","cleanData","service","input","substring","setTree","localStorage","getTree","addTree","clear","directive","$last","CacheFactoryProvider","extend","defaults","maxAge","deleteOnExpire","CacheFactory","graphCache"],"mappings":"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","file":"fgp.kit.bundle.min.js","sourcesContent":["/**\n * fgp-kit\n * @version 1.0 - Homepage <http://www.future-grid.com.au>\n * @copyright (c) 2013-2016 Eric.Wang <flexdeviser@gmail.com>\n * @license Apache2. \n * @overview fgp.kit.js is a useful toolkit for future-grid's clients.\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('angular'), require('jquery'), require('dygraphs'), require('ngmap'), require('chart.js')) :\n    typeof define === 'function' && define.amd ? define(['angular', 'jquery', 'dygraphs', 'ngmap', 'chart.js'], factory) :\n    (global.fgp_kit = factory(global.angular,global.$,global.Dygraph,global.ngmap,global.chartJS));\n}(this, (function (angular$1,jquery,Dygraph,ngmap,chart_js) {\n\nangular$1 = 'default' in angular$1 ? angular$1['default'] : angular$1;\nDygraph = 'default' in Dygraph ? Dygraph['default'] : Dygraph;\n\n/**\n * Created by ericwang on 10/06/2016.\n */\nvar fgpStage = function fgpStage() {\n    this.scope = {\n        applicationName: \"=\",\n        deviceName: \"=\",\n        server: \"=\",\n        configuration: '=',\n        scatterColors: \"=\",\n        standalone: \"=\",\n        interactions: \"=\",\n        drill: \"=\"\n    };\n    this.replace = true;\n    this.restrict = 'A';\n};\n\nfgpStage.prototype.template = function template () {\n    return '<div id=\"pageStage\" class=\"wrapper col-md-12 col-xl-12\" style=\"background-color: #fff;height:100%;padding: 0px;\">' +\n        '</div>';\n};\n\nfgpStage.prototype.controller = function controller ($scope, $element, $timeout, $rootScope, $compile, dataService, $interval) {\n    $scope.showdata = {};\n\n    if ($scope.scatterColors && $scope.scatterColors.length > 0) {\n        dataService.setColors($scope.scatterColors);\n    }\n\n\n    $rootScope['applicationName'] = $scope.applicationName;\n    $rootScope['host'] = $scope.server;\n    $rootScope['device'] = $scope.deviceName;\n    $rootScope['standalone'] = $scope.standalone;\n\n\n    var graphBindingArray = [];\n\n\n    function findChild4Repeat(parentId, parentHtmlObj, arrayItems, newId,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n\n                newScope.showdata[id] = arrayItems[i];\n                if (parentHtmlObj.attr(\"repeat-id\")) {\n                    newScope.repeat = parentHtmlObj.attr(\"repeat-id\");\n                }\n                if (parentHtmlObj.find('#edit' + parentId).find(\"#\" + id).length == 0) {\n                    parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                }\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n            else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild4Repeat(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    function findChild(parentId, parentHtmlObj, arrayItems,newScope) {\n\n        for (var i = 0; i < arrayItems.length; i++) {\n            if ('edit' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#edit' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            } else if ('detail_status_' + parentId === arrayItems[i].parent) {\n                var currentItem = angular$1.element(arrayItems[i].html_render);\n                var id = arrayItems[i].id;\n                newScope.showdata[id] = arrayItems[i];\n                parentHtmlObj.find('#detail_status_' + parentId).append($compile(currentItem)(newScope));\n                findChild(arrayItems[i].id, currentItem, arrayItems,newScope);\n            }\n        }\n    }\n\n    var newScope = null;\n    $scope.$watch('deviceName', function (newVal, oldVal) {\n        if(newVal){\n            $element.empty();\n            if(newScope){\n                newScope.$destroy();\n            }\n            newScope = $rootScope.$new(true);\n            newScope[\"showdata\"] = {};\n\n            newScope.$on('bindChildChartEvent', function (evt, msg) {\n                graphBindingArray.push(msg);\n            });\n\n            newScope[\"interactions\"] = $scope.interactions;\n            newScope[\"drill\"] = $scope.drill;\n\n            newScope.$on('bindChildRepeatEvent', function (evt, msg) {\n                angular$1.forEach($scope.configuration, function (item) {\n                    if (item.id == msg.id) {\n                        var items = angular$1.element(\"body\").find(\"#\" + item.id).children();\n                        angular$1.forEach(items, function (item_new) {\n                            newScope.showdata[item_new.id] = item;\n                            var currentElement = angular$1.element(item_new);\n                            if (currentElement.attr(\"dulp\")) {\n                                var groupItems = angular$1.element(\"body\").find(\"div[dulp='\" + item.id + \"']\");\n                                angular$1.forEach(groupItems, function (dulpItem) {\n                                    findChild4Repeat(item.id, angular$1.element(dulpItem), $scope.configuration, item_new.id,newScope);\n                                });\n                            }else{\n                                findChild4Repeat(item.id, currentElement, $scope.configuration, item_new.id,newScope);\n                            }\n                        });\n                    }\n                });\n            });\n\n            newScope.$on('listStyleEvent', function (evt, param) {\n                var config = newScope.showdata[param.id.replace(\"edit\", \"\")];\n                param.callback(config.metadata.data.datasource.style);\n            });\n\n\n            newScope.$on('fetchWidgetMetadataEvent', function (evt, msg) {\n                angular$1.forEach(newScope.showdata, function (metadata, key) {\n                    if (key == msg.id) {\n                        msg.callback({data: metadata, from: 'show'});\n                        return;\n                    }\n                });\n            });\n\n            // refersh\n            angular$1.forEach($scope.configuration, function (item) {\n                if ('workingArea' === item.parent) {\n                    var currentItem = angular$1.element(item.html_render);\n                    newScope.showdata[item.id] = item;\n                    $element.append($compile(currentItem)(newScope));\n                    findChild(item.id, currentItem, $scope.configuration,newScope);\n                }\n            });\n            /**\n             * get device information\n             */\n            if ($scope.deviceName && $scope.deviceName != \"\" && \"undefined\" != $scope.deviceName) {\n                // first time\n                sendDeviceData(newScope);\n            }\n            // all item created;\n            $timeout(function () {\n                angular$1.forEach(graphBindingArray, function (graph) {\n                    newScope.$broadcast('bindFatherGraphEvent', {parent: graph.graphs, children: graph.children});\n                });\n            });\n        }\n    });\n\n\n    var sendDeviceData = function (newScope) {\n            dataService.deviceInfo($scope.server, $scope.deviceName, null, $scope.applicationName).then(function (data) {\n                // send device info to all widget\n                $timeout(function () {\n                    newScope.$broadcast('deviceInfoEvent', {device: data, from: 'application'});\n                });\n            });\n    };\n};\nfgpStage.buildFactory = function buildFactory () {\n    fgpStage.instance = new fgpStage();\n    return fgpStage.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar dataAccessApi = function dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService) {\n    this._$http = $http;\n    this._$q = $q;\n    // get cache\n    this.indexCache = $cacheFactory('indexCache');\n    this.deviceStores = $cacheFactory('deviceStores');\n    this._$interval = $interval;\n    this._$graphDataService = graphDataService;\n};\n\n\n/**\n * sync using JQuery\n * @param deviceName\n * @param deviceKey\n * @param applicationName\n * @returns {*}\n */\ndataAccessApi.prototype.deviceInfo = function deviceInfo (host, deviceName, deviceKey, applicationName) {\n    var deferred = this._$q.defer();\n    var url = host + \"/rest/api/\";\n\n    if (applicationName) {\n        url += \"app/\" + applicationName;\n    }\n\n    if (deviceName) {\n        url += '/devices/' + deviceName;\n    } else if (deviceKey) {\n        url += 'devices?key=' + deviceKey;\n    }\n\n    var httpServices = this._$http;\n    var qServices = this._$q;\n\n    httpServices({\n        method: 'GET',\n        url: url,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).success(function(data) {\n        var url = host + \"/rest/api/\";\n        if (applicationName) {\n            url += \"app/\" + applicationName + \"/devices/extension-types?device_type=\";\n        } else {\n            url += \"devices/extension-types?device_type=\";\n        }\n        //get all extension types\n        httpServices({\n            method: 'GET',\n            url: url + data.type,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).success(function(types) {\n\n            if (!types || types.length == 0) {\n                deferred.resolve(data);\n            } else {\n                var extensionRequests = [];\n                var url = host + \"/rest/api/\";\n                if (applicationName) {\n                    url += \"app/\" + applicationName + \"/devices/extensions?device_name=\";\n                } else {\n                    url += \"devices/extensions?device_name=\";\n                }\n                angular$1.forEach(types, function(type) {\n                    // extension types\n                    extensionRequests.push(\n                        httpServices({\n                            method: 'GET',\n                            url: url + deviceName + '&extension_type=' + type.name,\n                            headers: {\n                                'Content-Type': 'application/json'\n                            }\n                        }).catch(function(info) {\n                            console.warn(info);\n                        })\n                    );\n                });\n\n                qServices.all(extensionRequests).then(function(result) {\n                    result.forEach(function(extensionItem) {\n                        if (extensionItem && extensionItem.data) {\n                            data[extensionItem.data.type.name] = extensionItem.data;\n                        }\n                    });\n                    deferred.resolve(data);\n                }, function(errors) {\n                    deferred.reject(error);\n                });\n            }\n        }).error(function(error) {\n            deferred.reject(error);\n        });\n\n    }).error(function(error) {\n        deferred.reject(error);\n    });\n\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.deviceInitInfo = function deviceInitInfo (host, application, deviceKey, storeSchema, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            'otherLevels': otherLevels,\n            'fields': [].concat(fields)\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenDeviceInitInfo = function childrenDeviceInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.childrenExtensionInitInfo = function childrenExtensionInitInfo (host, application, deviceKey, storeSchema, relationType, relationDeviceType, extensionType, rangeLevel, otherLevels, fields) {\n    var deferred = this._$q.defer();\n    this._$http.get(host + '/rest/api/app/' + application + '/store/index/children/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n        params: {\n            relationType: relationType,\n            relationDeviceType: relationDeviceType,\n            otherLevels: otherLevels,\n            fields: [].concat(fields),\n            isSame: true\n        },\n        cache: this.deviceStores\n    }).then(\n        function(response) {\n            deferred.resolve(response.data);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n/**\n *\n * @param application\n * @param deviceKey\n * @param storeSchema\n * @returns {Promise}\n */\ndataAccessApi.prototype.devicesExtensionInitInfo = function devicesExtensionInitInfo (host, application, devicesKey, storeSchema, extensionType, rangeLevel, otherLevels, fields) {\n    var result = {};\n    var promises = [];\n    var __http = this._$http;\n    angular$1.forEach(devicesKey, function(deviceKey) {\n        if (deviceKey != null) {\n            var promise = __http.get(host + '/rest/api/app/' + application + '/store/index/' + deviceKey + '/' + storeSchema + '/' + rangeLevel + '/' + extensionType, {\n                params: {\n                    otherLevels: otherLevels,\n                    fields: [].concat(fields),\n                    isSame: true\n                },\n                cache: this.deviceStores\n            }).then(\n                function(response) {\n                    return response.data;\n                },\n                function(response) {\n                    console.error(response.data);\n                }\n            );\n            promises.push(promise);\n        }\n    });\n    // call $q.all on the other side\n    return promises;\n};\n\n\n\ndataAccessApi.prototype.fillChildrenTree = function fillChildrenTree (buckets, tree, showData) {\n\n    if (tree.children[0] != null) {\n        fillChildrenTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillChildrenTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id && value != null) {\n                tree.data = value;\n                tree['size'] = value.length;\n\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        tree['size'] = value.length;\n                        flag = true;\n                    }\n                });\n\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n};\n\n\ndataAccessApi.prototype.fillTree = function fillTree (buckets, tree, showData) {\n    if (tree.children[0] != null) {\n        fillTree(buckets, tree.children[0], showData);\n    }\n\n    if (tree.children[1] != null) {\n        fillTree(buckets, tree.children[1], showData);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        angular$1.forEach(buckets, function(value, key) {\n            if (key == tree.id) {\n                tree.data = value;\n                tree['size'] = value.size;\n                var flag = false;\n                angular$1.forEach(showData, function(data) {\n                    if (data.id == tree.id) {\n                        data.data = tree.data;\n                        data['size'] = tree.size;\n                        flag = true;\n                    }\n                });\n                if (!flag) {\n                    console.info(\"error:\" + key);\n                }\n            }\n        });\n    }\n\n};\n\ndataAccessApi.prototype.calTree = function calTree (buckets, tree, start, end) {\n    if (tree.children[0] != null) {\n        calTree(buckets, tree.children[0], start, end);\n    }\n\n    if (tree.children[1] != null) {\n        calTree(buckets, tree.children[1], start, end);\n    }\n\n    if (tree.children[0] == null && tree.children[1] == null) {\n        // is overlap?\n        if (((start >= tree.start) && start < tree.end) ||\n            ((start > tree.start) && start <= tree.end) ||\n            ((tree.start >= start) && tree.start < end) ||\n            ((tree.start > start) && tree.start <= end)) {\n            if (buckets.filter(function(elem) {\n                    return elem.id == tree.id\n                }).length == 0) {\n                buckets.push(tree);\n            }\n        }\n    }\n};\n\n\n/**\n *\n * @param application\n * @param deviceInfo deviceKey and tree\n * @param storeSchema\n * @param store\n * @param start\n * @param end\n */\ndataAccessApi.prototype.devicesStoreData = function devicesStoreData (id, host, application, deviceInfo, storeSchema, store, start, end, fields, interval) {\n    var start_point = new Date().getTime();\n    if (!deviceInfo || deviceInfo.length == 0) {\n        return false;\n    }\n\n    var devices = \"[\";\n\n    deviceInfo.forEach(function(device, index) {\n        if (index < deviceInfo.length - 1) {\n            devices += \"\\\"\" + device.name + \"\\\",\";\n        } else {\n            devices += \"\\\"\" + device.name + \"\\\"]\";\n        }\n    });\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    // send request to back-end // TODO: change it to post\n    this._$http({\n        method: 'POST',\n        url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store,\n        data: {\n            \"devices\": devices,\n            \"fields\": JSON.stringify(fields),\n            \"start\": start,\n            \"end\": end\n        }\n    }).then(\n        function(response) {\n            var result = {};\n            var data = response.data;\n            for (key in data) {\n                var deviceGraphData = $graphDataService.get(key + \"/\" + store + \"/\" + id) ? $graphDataService.get(key + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = data[key].data;\n                // TODO: make all the lines in same x-axis timeseries\n                result[key] = newComeResult;\n            }\n            var end_point = new Date().getTime();\n            console.info((end_point - start_point) / 1000 + \"s\");\n            deferred.resolve(result);\n        },\n        function(response) {\n            deferred.reject(response.data);\n        }\n    );\n    return deferred.promise;\n};\n\n\ndataAccessApi.prototype.deviceStoreData = function deviceStoreData (id, host, application, deviceKey, storeSchema, store, tree, start, end, fields, interval) {\n    //\n    var $graphDataService = this._$graphDataService;\n    // new way to get the data without tree index.\n    var deferred = this._$q.defer();\n    if (start instanceof Date) {\n        start = start.getTime();\n    }\n    if (end instanceof Date) {\n        end = end.getTime();\n    }\n    var needLoad = true;\n    if (!needLoad) {\n        // return data\n        deferred.resolve($graphDataService.get(deviceKey + \"/\" + store + \"/\" + id));\n    } else {\n        // send request to back-end\n        this._$http({\n            method: 'GET',\n            url: host + '/rest/api/app/' + application + '/store/devices/store/data/' + storeSchema + '/' + store + '?devices=[\"' + deviceKey + '\"]&fields=' + JSON.stringify(fields) + '&start=' + start + '&end=' + end\n        }).then(\n            function(response) {\n                // only return 1 device data\n                var deviceGraphData = $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) ? $graphDataService.get(deviceKey + \"/\" + store + \"/\" + id) : [];\n                var newComeResult = response.data[deviceKey].data;\n                newComeResult.forEach(function(item) {\n                    var flag = false;\n                    for (var i = 0; i < deviceGraphData.length; i++) {\n                        if (deviceGraphData[i].timestamp == item.timestamp) {\n                            deviceGraphData[i] = item;\n                            flag = true;\n                        }\n                    }\n                    if (!flag) {\n                        // add\n                        deviceGraphData.push(item);\n                    }\n                });\n                // order by timestamp\n                deviceGraphData.sort(function(a, b) {\n                    if (a.timestamp > b.timestamp) {\n                        return 1;\n                    } else if (a.timestamp < b.timestamp) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                $graphDataService.put(deviceKey + \"/\" + store + \"/\" + id, deviceGraphData);\n                deferred.resolve(deviceGraphData);\n            },\n            function(response) {\n                deferred.reject(response.data);\n            }\n        );\n    }\n\n    return deferred.promise;\n};\n\ndataAccessApi.prototype.defaultColors = function defaultColors () {\n        var this$1 = this;\n\n    if (!this.colors) {\n        this['colors'] = [];\n        for (var i = 0; i < 300; i++) {\n            this$1.colors.push('#' + (function co(lor) {\n                return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) &&\n                    (lor.length == 6) ? lor : co(lor);\n            })(''));\n        }\n    }\n    return this.colors;\n};\n\ndataAccessApi.prototype.setColors = function setColors (colors) {\n    this.colors = colors;\n};\n\n\n/**\n * device id\n * @param id\n */\ndataAccessApi.prototype.healthcheck = function healthcheck (application, id) {\n\n    if (id = null || id == \"\") {\n        return;\n    }\n    this._$http.get('/rest/api/app/' + application + '/docker/healthcheck/reports?id=' + id)\n        .success(function(response) {\n            console.info(response);\n            return response;\n        });\n\n\n};\n\n\ndataAccessApi.prototype.autoUpdateGraph = function autoUpdateGraph (application, device, schema, store, fields, count, callback) {\n    var _$interval = this._$interval;\n    var _$http = this._$http;\n    var fetcher = null;\n    this._$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n        .success(function(response) {\n            var last = -1;\n            var interval = -1;\n            if (response.trees && response.trees.length === 1) {\n                interval = response.trees[0].frequency;\n                last = response.trees[0].last.timeKey;\n            }\n            if (interval != -1) {\n                var start = last - (count * interval);\n                var end = last;\n                // first time\n                _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                    params: {\n                        \"devices\": JSON.stringify([device]),\n                        \"fields\": JSON.stringify(fields),\n                        \"start\": start,\n                        \"end\": end\n                    }\n                }).success(function(graphData) {\n\n                    // start task\n                    fetcher = _$interval(function() {\n                        _$http.get('/rest/api/app/' + application + '/store/index/' + device + '/' + schema + '/' + store)\n                            .success(function(response) {\n                                if (response.trees && response.trees.length === 1) {\n                                    last = response.trees[0].last.timeKey;\n                                    start = last - (count * interval);\n                                    end = last;\n                                    _$http.get('/rest/api/app/' + application + '/store/devices/store/data/' + schema + '/' + store, {\n                                        params: {\n                                            \"devices\": JSON.stringify([device]),\n                                            \"fields\": JSON.stringify(fields),\n                                            \"start\": start,\n                                            \"end\": end\n                                        }\n                                    }).success(function(graphData) {\n                                        // put the data back\n                                        callback(graphData[device], null, interval);\n                                    });\n                                }\n                            });\n                    }, interval);\n\n                    // put the data back\n                    callback(graphData[device], fetcher, interval);\n                });\n            }\n        });\n\n};\n\n\ndataAccessApi.buildFactory = function buildFactory ($http, $q, $cacheFactory, $interval, graphDataService) {\n    dataAccessApi.instance = new dataAccessApi($http, $q, $cacheFactory, $interval, graphDataService);\n    return dataAccessApi.instance;\n};\n\ndataAccessApi.$inject = ['$http', '$q', '$cacheFactory', '$interval', 'graphDataService'];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetContainer = function fgpWidgetContainer() {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\"\n    };\n};\n\nfgpWidgetContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding: 0px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}}\">{{css.title.text}}</div>' +\n        '<div class=\"panel-body\" id=\"edit' + element_id + '\" style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '\" style=\"margin-top:2px;margin-bottom:2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-top:10px;margin-bottom:10px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n\n};\n\nfgpWidgetContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n    if (metadata.data) {\n        $scope.data[\"source\"] = metadata.data.source;\n        if ($scope.data && $scope.data.source.device && $scope.data.source.device != -1) {\n\n            if ($scope.data.source.device) {\n                /**\n                 * get device information\n                 */\n                dataService.deviceInfo($rootScope.host, JSON.parse($scope.data.source.device).name, null, $rootScope.applicationName).then(function (data) {\n                    // send device info to all widget\n                    $timeout(function () {\n                        $rootScope.$broadcast('deviceInfoEvent', {device: data, from: element_id});\n                    });\n                });\n            }\n\n        }\n    }\n\n};\n\n\nfgpWidgetContainer.buildFactory = function buildFactory () {\n    fgpWidgetContainer.instance = new fgpWidgetContainer();\n    return fgpWidgetContainer.instance;\n};\n\nfgpWidgetContainer.$inject = [];\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetGraph = function fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile,$q) {\n    this.restrict = 'E';\n    this.scope = {\n        interactions: \"=\",\n        drill: \"=\"\n    };\n    this.$timeout = $timeout;\n    this._dataService = dataService;\n    this._$interval = $interval;\n    this._$q = $q;\n};\n\nfgpWidgetGraph.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    if (flag) {\n        var dom_loading = '<div ng-show=\"loadingShow\" id=\"loading_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\">' +\n            '<div class=\"rect1\"></div>' +\n            '<div class=\"rect2\"></div>' +\n            '<div class=\"rect3\"></div>' +\n            '<div class=\"rect4\"></div>' +\n            '<div class=\"rect5\"></div>' +\n            '</div></div>';\n\n\n        var dom_legend = '<li>{{legendText_device_name}}</li><li>{{legendText_datetime}}</li><li><label style=\"color: {{legendColor}}\">{{legendText_column}}</label>:{{legendText_value}}</li>';\n\n        var dom_empty_data = '<div ng-show=\"emptyDataShow\" id=\"emptydata_' + attrs.id + '\" style=\"width: 100%;height:100%;position: absolute;background: rgba(255, 255, 255, 0.1);\" data-chartloading><div class=\"spinner\" style=\"width: 100%;\">' +\n            '<h1>Empty Data!</h1>' +\n            '</div></div>';\n\n        var dom_alert_info = '<span class=\"label label-warning\" ng-show=\"alertMessage\" style=\"color: #000;\">{{alertMessage}}</span>';\n\n        var dom_datetime_interval = '<div ng-show=\"rangeSelectorBar\" class=\"dropdown\"> <button class=\"btn btn-info dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">{{currentIntervalChoosed.name}}<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;\"><li ng-repeat=\"interval in dateTimeIntervals\"><a href=\"javascript:;\" ng-click=\"changeInterval(interval)\">{{interval.name}}</a></li></ul> </div>';\n\n\n        var dom_series_list = '<div ng-show=\"currentView === 1\" class=\"dropdown\"> <button class=\"btn btn-warning dropdown-toggle badge\" type=\"button\" data-toggle=\"dropdown\">Devices<span class=\"caret\"></span></button> <ul class=\"dropdown-menu\" style=\"font-size:12px;height:auto;max-height:300px;overflow-x:hidden;\"><li ng-repeat=\"device in childrenDevices\"><input type=\"checkbox\" ng-click=\"showOrHideDevice(device)\" ng-checked=\"device.show\"/>{{device[childrenDeviceNameColumn]}}</li></ul> </div>';\n\n\n        var dom_real_time_grap = '<div class=\"modal fade \" id=\"real_time_graph_' + attrs.id + '\" role=\"dialog\">' +\n            '<div class=\"modal-dialog modal-lg\">' +\n            '<div class=\"modal-content\">' +\n            '<div class=\"col-md-12\"  style=\"padding-top:3px;height: 1px;background-color: #0e90d2;\" ng-style=\"{ \\'width\\': completionPercent + \\'%\\' }\"></div>' +\n            '<div class=\"modal-body\" style=\"width: 100%;height: 300px;\">' +\n            '<div class=\"real-time-graph\" style=\"width: 100%;height: 100%\"></div>' +\n            '</div>' +\n            '</div>' +\n            '</div>' +\n            '</div>';\n\n        var html = '<div id=\"legendbox' + attrs.id + '\" ng-show=\"legendText\" ng-style=\"{top:legendTop,left:legendLeft}\" style=\"border-radius:10px;background-color:#ffffff;position: absolute;border: 1px solid {{legendColor}};-moz-box-shadow: 5px 5px 5px #888888;box-shadow: 5px 5px 5px #888888;z-index: 99999999;margin-right: 5px;\"><ul style=\"list-style: none;list-style-position: inside;text-align: right;\">' + dom_legend + '</ul></div><div class=\"{{css.width}}\"><div class=\"col-md-12\" style=\"padding:0px;height:{{css.height}}px;-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\"><div class=\"row\"><div class=\"col-md-12\"><a class=\"tooltips btn btn-xs btn-info badge\" href=\"javascript:;\" ng-hide=\"interactions.graphs.btns.scatter == \\'hide\\'\"  style=\"float: right;margin-right: 10px;\" ng-click=\"currentView = -currentView\"><i class=\"glyphicon glyphicon-transfer\"></i><span>Scatter View</span></a><div id=\"buttons_area\" style=\"\"></div><a ng-show=\"autoupdate\" class=\"tooltips btn btn-xs btn-info badge\" style=\"float: right;margin-right: 10px;\" ng-click=\"showRealTimeGraph()\" data-toggle=\"modal\"><span>Auto Update</span><i class=\"glyphicon glyphicon-random\"></i></a><div style=\"float: right; margin-right: 10px;\">' + dom_series_list + '</div><div style=\"float: right; margin-right: 10px;\">' + dom_datetime_interval + '</div><div ng-hide=\"true\" class=\"checkbox\" style=\"float: right;margin-right: 10px; margin-bottom: 5px; margin-top: 0;\" ng-model=\"fixInterval\" ng-click=\"fixInterval=!fixInterval\"><label><input type=\"checkbox\" ng-model=\"fixInterval\" ng-clicked=\"fixInterval\" ng-change=\"fixGraphWithGap_click()\"/>fixed interval</label></div><div style=\"float: right; margin-right: 10px;\"><label class=\"label-inline\" ng-repeat=\"item in intevals.device\"><span class=\"badge\" style=\"background-color: {{ item.name == currentIntervalName ? (locked_interval.name == item.name ? \\'#e57432;\\':\\'#009900;\\') : (locked_interval.name == item.name ? \\'#e57432;\\':\\'\\') }}\" ng-click=\"lock(item)\">{{item.name}}</span></label></div><div style=\"float: right; margin-right: 10px;\">' + dom_alert_info + '</div></div></div><div style=\"position: relative;width: 100%;height:100%;\"><div style=\"position: absolute;left:25px;z-index: 999;\" ng-show=\"basicInfo.zoom\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVULeft()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDLeft()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVLeft()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVLeft()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div><div class=\"line-chart-graph\" style=\"width: 100%;height:100%;\" ng-click=\"drillDown()\"></div><div style=\"position: absolute;right:-15px;top:0px;z-index: 999;\" ng-show=\"checkY2Btns()\" class=\"btn-group-vertical btn-group-xs\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVURight()\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnPanVDRight()\"><i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomInVRight()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnZoomOutVRight()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div>' + dom_loading + dom_empty_data + '<div class=\"row\"><div class=\"col-md-12\" style=\"min-height: 30px;\"></div><div class=\"col-md-6\" style=\"text-align: left;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[0] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-6\" style=\"text-align: right;\" ng-show=\"rangeSelectorBar\">{{rangeSelectorBar.xAxisRange()[1] | date : \\'dd/MM/yyyy HH:mm:ss\\'}}</div><div class=\"col-md-12\" style=\"min-height: 40px;position: relative\"><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;left: 20px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanleft()\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnpanright()\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div><div class=\"range-selector-bar\" style=\"height: 0px;margin-top: 30px;width: 100%;position: absolute;\"></div><div class=\"btn-group btn-group-xs\" role=\"group\" style=\"position: absolute;right: -5px;\" ng-show=\"basicInfo.range_show\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomin()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><button type=\"button\" class=\"btn btn-default\" ng-click=\"btnzoomout()\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button></div></div></div></div></div>' + dom_real_time_grap;\n\n        return html;\n    }\n};\n\nfgpWidgetGraph.prototype.link = function link (scope, element, attrs) {\n    scope['defaultColors'] = this._dataService.defaultColors();\n    var dataService = this._dataService;\n    var _$interval = this._$interval;\n    scope.status = true;\n    var timeOut = this.$timeout;\n    scope.completionPercent = 0;\n    scope.graphId = attrs.id;\n    this.$timeout(function() {\n        var getData = function(numSeries, numRows, name) {\n            var result = {\n                labels: null,\n                data: null\n            };\n            var data = [];\n            var labels = [];\n            //init date\n            var initDate = new Date(\"2014/01/01 00:00:00\");\n            for (var j = 0; j < numRows; ++j) {\n                data[j] = [new Date(initDate.getTime() + 900000)];\n            }\n            for (var i = 0; i < numSeries; ++i) {\n                labels.push(name + i);\n                var val = 0;\n                for (var j = 0; j < numRows; ++j) {\n                    val += Math.random() - 0.5;\n                    data[j][i + 1] = val;\n                }\n            }\n            result.labels = labels;\n            result.data = data;\n            return result;\n        };\n\n\n        var sampleData = getData(1, 10, 'Device');\n\n        function movePan(event, g, context, side) {\n\n            context.dragEndX = Dygraph.dragGetX_(event, context);\n            context.dragEndY = Dygraph.dragGetY_(event, context);\n\n\n            // y-axis scaling is automatic unless this is a full 2D pan.\n            if (context.is2DPan) {\n\n                var pixelsDragged = context.dragEndY - context.dragStartY;\n                // Adjust each axis appropriately.\n                if (side == \"r\") {\n                    var axis = g.axes_[0];\n                    var axis_data = context.axes[0];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[0] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 0)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else if (side == 'l') {\n                    var axis = g.axes_[1];\n                    var axis_data = context.axes[1];\n                    var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n                    var boundedValue = context.boundedValues ? context.boundedValues[1] : null;\n\n                    // In log scale, maxValue and minValue are the logs of those values.\n                    var maxValue = axis_data.initialTopValue + unitsDragged;\n                    if (boundedValue) {\n                        maxValue = Math.min(maxValue, boundedValue[1]);\n                    }\n                    var minValue = maxValue - axis_data.dragValueRange;\n                    if (boundedValue) {\n                        if (minValue < boundedValue[0]) {\n                            // Adjust maxValue, and recompute minValue.\n                            maxValue = maxValue - (minValue - boundedValue[0]);\n                            minValue = maxValue - axis_data.dragValueRange;\n                        }\n                    }\n                    if (g.attributes_.getForAxis(\"logscale\", 1)) {\n                        axis.valueWindow = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                        axis.valueRange = [Math.pow(Dygraph.LOG_SCALE, minValue),\n                            Math.pow(Dygraph.LOG_SCALE, maxValue)\n                        ];\n                    } else {\n                        axis.valueWindow = [minValue, maxValue];\n                        axis.valueRange = [minValue, maxValue];\n                    }\n                } else {\n                    var minDate = context.initialLeftmostDate -\n                        (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n                    if (context.boundedDates) {\n                        minDate = Math.max(minDate, context.boundedDates[0]);\n                    }\n                    var maxDate = minDate + context.dateRange;\n                    if (context.boundedDates) {\n                        if (maxDate > context.boundedDates[1]) {\n                            // Adjust minDate, and recompute maxDate.\n                            minDate = minDate - (maxDate - context.boundedDates[1]);\n                            maxDate = minDate + context.dateRange;\n                        }\n                    }\n                    var zoomRange = g.xAxisZoomRange;\n                    if (g.xAxisZoomRange[0] instanceof Date) {\n                        zoomRange[0] = g.xAxisZoomRange[0].getTime();\n                    }\n                    if (g.xAxisZoomRange[1] instanceof Date) {\n                        zoomRange[1] = g.xAxisZoomRange[1].getTime();\n                    }\n\n                    if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                        return;\n                    }\n\n                    if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                        g.dateWindow_ = [Math.pow(Dygraph.LOG_SCALE, minDate),\n                            Math.pow(Dygraph.LOG_SCALE, maxDate)\n                        ];\n                    } else {\n                        g.dateWindow_ = [minDate, maxDate];\n                    }\n                }\n            }\n            g.drawGraph_(false);\n        }\n\n\n        function offsetToPercentage(g, offsetX, offsetY) {\n            // This is calculating the pixel offset of the leftmost date.\n            var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n            var yar0 = g.yAxisRange(0);\n\n            // This is calculating the pixel of the higest value. (Top pixel)\n            var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n            // x y w and h are relative to the corner of the drawing area,\n            // so that the upper corner of the drawing area is (0, 0).\n            var x = offsetX - xOffset;\n            var y = offsetY - yOffset;\n\n            // This is computing the rightmost pixel, effectively defining the\n            // width.\n            var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n            // This is computing the lowest pixel, effectively defining the height.\n            var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n            // Percentage from the left.\n            var xPct = w == 0 ? 0 : (x / w);\n            // Percentage from the top.\n            var yPct = h == 0 ? 0 : (y / h);\n\n            // The (1-) part below changes it from \"% distance down from the top\"\n            // to \"% distance up from the bottom\".\n            return [xPct, (1 - yPct)];\n        }\n\n\n        function zoom(g, zoomInPercentage, xBias, yBias, direction, side) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n\n            function adjustAxis(axis, zoomInPercentage, bias) {\n                var delta = axis[1] - axis[0];\n                var increment = delta * zoomInPercentage;\n                var foo = [increment * bias, increment * (1 - bias)];\n                return [axis[0] + foo[0], axis[1] - foo[1]];\n            }\n\n            xBias = xBias || 0.5;\n            yBias = yBias || 0.5;\n            var yAxes = g.axes_;\n            var newYAxes = [];\n            for (var i = 0; i < g.numAxes(); i++) {\n                newYAxes[i] = adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n            }\n            if ('v' == direction) {\n                if ('l' == side) {\n                    yAxes[0]['valueRange'] = newYAxes[0];\n                    yAxes[0]['valueWindow'] = newYAxes[0];\n                } else if ('r' == side && g.numAxes() == 2) {\n                    yAxes[1]['valueRange'] = newYAxes[1];\n                    yAxes[1]['valueWindow'] = newYAxes[1];\n                }\n                g.drawGraph_(false);\n            } else {\n\n                var ranges = [];\n                angular$1.forEach(g.xAxisRange(), function(range) {\n                    if (range instanceof Date) {\n                        ranges.push(range.getTime());\n                    } else {\n                        ranges.push(range);\n                    }\n                });\n\n                var newZoomRange = adjustAxis(ranges, zoomInPercentage, xBias);\n                // do not bigger than range data\n                var zoomRange = [];\n                if (g.hasOwnProperty(\"xAxisZoomRange\") && g.xAxisZoomRange) {\n                    zoomRange[0] = g.xAxisZoomRange[0];\n                    zoomRange[1] = g.xAxisZoomRange[1];\n                } else {\n                    zoomRange[0] = g.xAxisExtremes()[0];\n                    zoomRange[1] = g.xAxisExtremes()[1];\n                }\n                if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] >= newZoomRange[1]) {\n                    return;\n                } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [zoomRange[0], newZoomRange[1]]\n                    });\n                } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                    g.updateOptions({\n                        dateWindow: [newZoomRange[0], zoomRange[1]]\n                    });\n                } else {\n                    g.updateOptions({\n                        dateWindow: newZoomRange\n                    });\n                }\n            }\n        }\n\n\n        var canScroll = false;\n\n        var timer = null;\n        var mouseOverHandler = function(e, g, context) {\n            //\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n\n        var mouseEnterHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            //\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            timer = timeOut(function() {\n                canScroll = true;\n            }, 1000);\n        };\n\n        var mouseOutHandler = function(e, g, context) {\n            // set flag to false\n            if (timer != null) {\n                timeOut.cancel(timer);\n            }\n            canScroll = false;\n        };\n\n        var scroll = function(e, g, context) {\n\n            if ((scope.basicInfo && !scope.basicInfo.zoom) || !canScroll) {\n                return;\n            }\n\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // console.info(\"v\", \"l\")\n                // left zoom\n                zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                // console.info(\"v\", \"r\")\n                zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                // console.info(\"h\")\n                zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            Dygraph.cancelEvent(e);\n            timeOut(function() {\n                scope.chartDateWindow = g.xAxisRange();\n            });\n        };\n\n        var firstPoint = null;\n        var mousedownHandler = function(e, g, context) {\n            if (scope.basicInfo && !scope.basicInfo.zoom) {\n                return;\n            }\n            context.initializeMouseDown(e, g, context);\n            firstPoint = e.clientX;\n            Dygraph.startPan(e, g, context);\n        };\n        var mousemoveHandler = function(e, g, context) {\n            if (context.isPanning) {\n                if (e.offsetX <= (g.plotter_.area.x)) {\n                    movePan(e, g, context, 'r');\n                } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                    movePan(e, g, context, 'l');\n                } else {\n                    movePan(e, g, context, 'h');\n                }\n                timeOut(function() {\n                    scope.chartDateWindow = scope.currentChart.xAxisRange();\n                });\n            }\n        };\n\n        var mouseupHandler = function(e, g, context) {\n            if (context.isPanning) {\n                Dygraph.endPan(e, g, context);\n            }\n\n            canScroll = true;\n        };\n\n        var interactionModel = {\n            'mousewheel': scroll,\n            'DOMMouseScroll': scroll,\n            'wheel': scroll,\n            'mousedown': mousedownHandler,\n            'mousemove': mousemoveHandler,\n            'mouseenter': mouseEnterHandler,\n            'mouseup': mouseupHandler,\n            // 'mouseover': mouseOverHandler,\n            'mouseout': mouseOutHandler\n        };\n\n\n        //init configuration\n        var configuration = {\n            drawGapEdgePoints: true,\n            'pointSize': 3,\n            legend: 'follow',\n            labelsKMB: true,\n            labelsSeparateLines: true,\n            // data formate\n            labels: ['x'].concat(sampleData.labels),\n            highlightSeriesOpts: {\n                strokeWidth: 3,\n                strokeBorderWidth: 1,\n                highlightCircleSize: 5\n            },\n            drawPoints: false,\n            drawAxesAtZero: false,\n            labelsDivStyles: {\n                'text-align': 'right',\n                'position': 'relative',\n                'display': 'inline-block'\n            },\n            yRangePad: 10,\n            // x label y label\n            ylabel: 'Value',\n            xlabel: 'Date',\n            colors: scope.defaultColors,\n            // multiple Y axis\n            series: {\n                'Device0': {\n                    axis: 'y2'\n                },\n                'Device4': {\n                    axis: 'y2'\n                }\n            },\n            // showRangeSelector: true,\n            axes: {\n                y: {\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                y2: {\n                    // set axis-related properties here\n                    'labelsKMB': true,\n                    valueRange: [0, 1],\n                    axisLabelWidth: 80\n                },\n                x: {\n                    // datetime format\n                    valueFormatter: function(y) {\n                        return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                    }\n                }\n            },\n            pointClickCallback: function(e, p) {\n                if (scope.currentView != -1) {\n                    scope.showOne(p.name);\n                }\n            },\n            drawCallback: function(g, isInit) {\n                if (scope.refersh) { // make sure \"scope.refersh\" doesn't call when the graph create first time.\n                    scope.refersh(g, isInit);\n                }\n            },\n            'interactionModel': interactionModel\n        };\n        scope.currentChart = new Dygraph(element.find(\"div[class='line-chart-graph']\")[0], sampleData.data, configuration);\n        element.find(\"canvas\").css(\"zIndex\", 99);\n\n        var timer_auto = null;\n        var process_bar_timer = null;\n        element.find(\"#real_time_graph_\" + attrs.id).on(\"hidden.bs.modal\", function() {\n            // put your default event here\n            _$interval.cancel(timer_auto);\n            _$interval.cancel(process_bar_timer);\n        });\n\n\n        //real-time-graph\n        element.find(\"#real_time_graph_\" + attrs.id).on('shown.bs.modal', function() {\n\n            var tempConifg = {\n                drawGapEdgePoints: true,\n                'pointSize': 3,\n                labelsKMB: true,\n                labelsSeparateLines: false,\n                drawPoints: false,\n                drawAxesAtZero: false,\n                labelsDivStyles: {\n                    'text-align': 'right',\n                    'position': 'relative',\n                    'display': 'inline-block'\n                },\n                // x label y label\n                ylabel: 'Value',\n                xlabel: 'Date',\n                colors: scope.defaultColors,\n                // multiple Y axis\n                series: {\n                    'Device0': {\n                        axis: 'y2'\n                    },\n                    'Device4': {\n                        axis: 'y2'\n                    }\n                },\n                // showRangeSelector: true,\n                axes: {\n                    y: {\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    y2: {\n                        // set axis-related properties here\n                        'labelsKMB': true,\n                        valueRange: [0, 1],\n                        axisLabelWidth: 80\n                    },\n                    x: {\n                        // datetime format\n                        valueFormatter: function(y) {\n                            return moment(y).format('DD/MM/YYYY HH:mm:ss'); //Hide legend label\n                        }\n                    }\n                },\n                interactionModel: {}\n            };\n\n            scope.realTimeGraph = new Dygraph(element.find(\"div[class='real-time-graph']\")[0], sampleData.data, tempConifg);\n            scope.realTimeGraph.updateOptions(scope.currentChartOptions);\n            scope.realTimeGraph.updateOptions({\n                \"file\": [],\n                highlightSeriesOpts: {\n                    strokeWidth: 3,\n                    strokeBorderWidth: 1,\n                    highlightCircleSize: 5\n                },\n            });\n\n            timer_auto = dataService.autoUpdateGraph(scope.applicationName, scope.auto_device_name, scope.auto_schema, scope.auto_store, scope.auto_fields, element.find(\"div[class='real-time-graph']\").width() / 4, function(graph_data, worker, interval) {\n                // update graph\n                var deviceConfig = scope.auto_metadata.data.groups[1];\n                var collections = deviceConfig.collections;\n                var labels = [];\n                var series = {};\n                var colors = [];\n                var allLines = [];\n                //0 for y  1 for y2\n                var yRanges = [{\n                    min: null,\n                    max: null\n                }, {\n                    min: null,\n                    max: null\n                }];\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == scope.auto_store) {\n                        angular$1.forEach(graph_data.data, function(line) {\n                            allLines.push([new Date(line.timestamp)]);\n                        });\n\n                        var showY2axis = false;\n                        angular$1.forEach(collection.rows, function(row) {\n                            labels.push(row.label);\n                            colors.push(row.color);\n\n                            if (row.yaxis == 0) {\n                                series[row.label] = {\n                                    'axis': 'y1'\n                                };\n                            } else {\n                                series[row.label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                            // add value\n                            var counter = 0;\n                            angular$1.forEach(allLines, function(realLine) {\n                                try {\n                                    var value = f(graph_data.data[counter]);\n                                    realLine.push(value);\n                                    if (row.yaxis == 0) {\n                                        if (yRanges[0].min == null) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max == null) {\n                                            yRanges[0].max = value;\n                                        }\n\n                                        if (yRanges[0].min > value) {\n                                            yRanges[0].min = value;\n                                        }\n\n                                        if (yRanges[0].max < value) {\n                                            yRanges[0].max = value;\n                                        }\n                                    } else {\n                                        if (yRanges[1].min == null) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max == null) {\n                                            yRanges[1].max = value;\n                                        }\n\n                                        if (yRanges[1].min > value) {\n                                            yRanges[1].min = value;\n                                        }\n\n                                        if (yRanges[1].max < value) {\n                                            yRanges[1].max = value;\n                                        }\n                                    }\n                                } catch (ex) {\n                                    realLine.push(null);\n                                }\n                                counter++;\n                            });\n\n                        });\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.min) * 0.10;\n                            } else {\n                                yrange.min = yrange.min - (yrange.max - yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max - yrange.min) * 0.10;\n                            }\n                        });\n\n                        var newLines = [];\n                        if (!showY2axis) {\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: newLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        } else {\n                            // update graph\n                            scope.realTimeGraph.updateOptions({\n                                file: allLines,\n                                axes: {\n                                    y: {\n                                        valueRange: [yRanges[0].min, yRanges[0].max]\n                                    },\n                                    y2: {\n                                        valueRange: [yRanges[1].min, yRanges[1].max]\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                if (worker) {\n                    timer_auto = worker;\n                }\n\n\n                //\n                var perInterval = interval / 100;\n                var counter = 0;\n\n                if (process_bar_timer) {\n                    _$interval.cancel(process_bar_timer);\n                    counter = 0;\n                }\n\n                process_bar_timer = _$interval(function() {\n                    scope.completionPercent = counter;\n                    counter++;\n                }, perInterval, 100);\n\n\n            });\n        });\n\n\n        scope.currentChartOptions = {};\n\n        scope.showRealTimeGraph = function() {\n            element.find(\"#real_time_graph_\" + attrs.id).modal();\n        };\n\n\n        if (attrs.hasOwnProperty(\"shown\")) {\n\n\n            var basicInfo = scope.basicInfo;\n            if (basicInfo && basicInfo.range_show) {\n                scope.rangeSelectorBar = new Dygraph(element.find(\"div[class='range-selector-bar']\")[0], sampleData.data, {\n                    xAxisHeight: 0,\n                    axes: {\n                        x: {\n                            drawAxis: false\n                        }\n                    },\n                    showRangeSelector: true,\n                    rangeSelectorHeight: 30\n                });\n                scope.chartDateWindow = scope.rangeSelectorBar.xAxisRange();\n            }\n\n\n            var status = false;\n            // add mouse up event to range select\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mouseup', function(event) {\n                status = false;\n                timeOut(function() {\n                    var finalDateRagne = scope.currentChart.xAxisRange();\n                    scope.chartDateTime = {\n                        begin: finalDateRagne[0],\n                        end: finalDateRagne[1]\n                    };\n                });\n            });\n\n            scope.$on('mouseUpMessage', function($scope, e) {\n                if (\"mouseup\" === e.type && status) {\n                    status = false;\n                    timeOut(function() {\n                        var finalDateRange = scope.currentChart.xAxisRange();\n                        scope.chartDateTime = {\n                            begin: finalDateRange[0],\n                            end: finalDateRange[1]\n                        };\n                    });\n                }\n            });\n\n            scope.$on('parentScatterViewChangedEvent', function(event, params) {\n                angular$1.forEach(params.children, function(item) {\n                    if (item == attrs.id) {\n                        scope.currentView = params.view;\n                    }\n                });\n            });\n\n\n            scope.$on('bindFatherGraphEvent', function(event, data) {\n                angular$1.forEach(data.children, function(child) {\n                    if (child == attrs.id) {\n                        Dygraph.synchronize([scope.currentChart].concat(data.parent), {\n                            zoom: true,\n                            selection: false,\n                            range: false\n                        });\n                        scope.currentChart.updateOptions({\n                            drawCallback: function(g, isInit) {\n                                // console.info(\"refersh running!\" + \" is  Init?\"+ isInit);\n                                scope.refersh(g, isInit);\n                            }\n                        });\n\n                    }\n                });\n\n\n            });\n\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousemove', function(event) {\n                if (status) {\n                    timeOut(function() {\n                        scope.chartDateWindow = scope.currentChart.xAxisRange();\n                    });\n                }\n            });\n\n            element.find('.dygraph-rangesel-fgcanvas, .dygraph-rangesel-zoomhandle').on('mousedown', function(event) {\n                status = true;\n            });\n\n            //bind chart\n            if (basicInfo && basicInfo.childrenChart.length > 0) {\n                var param = {\n                    'graphs': [scope.currentChart],\n                    children: basicInfo.childrenChart\n                };\n                if (scope.rangeSelectorBar) {\n                    param.graphs.push(scope.rangeSelectorBar);\n                }\n                scope.$emit('bindChildChartEvent', param);\n            }\n        }\n    }, 0);\n};\n\n//controller: ['$scope', '$element', '$window', '$interval', '$timeout', '$filter', '$location', function ($scope, $element, $window, $interval, $timeout, $filter, $location) {\nfgpWidgetGraph.prototype.controller = function controller ($scope, $element, $window, $interval, $timeout, $filter, $location, dataService, $rootScope, $stateParams, graphDataService, $compile, $q) {\n    var element_id = $element.attr(\"id\");\n    $scope.elementId = element_id;\n\n    $scope['defaultColors'] = dataService.defaultColors();\n    var metadata = null;\n    var widgetData = null;\n    $scope.emptyDataShow = false;\n    // attributes----------------------\n    $scope.applicationName = $rootScope.applicationName;\n\n    $scope.alertMessage;\n\n    $scope.showY2Btns = false;\n\n    $scope.legendText = null;\n    $scope.legendText_device = null;\n    $scope.legendText_datetime = null;\n    $scope.legendText_column = null;\n    $scope.legendText_value = null;\n    $scope.legendColor = null;\n    $scope.autoupdate = false;\n    $scope.auto_device_name = \"\";\n    $scope.auto_schema = \"\";\n    $scope.auto_store = \"\";\n    $scope.auto_fields = [];\n    // default data-time intervals\n\n    $scope.defaultTimeIntervals = [{\n            name: \"10 seconds\",\n            interval: 10000\n        },\n        {\n            name: \"30 seconds\",\n            interval: 30000,\n            scales: [10000]\n        },\n        {\n            name: \"1 minutes\",\n            interval: 60000,\n            scales: [10000, 30000]\n        },\n        {\n            name: \"5 minutes\",\n            interval: 300000,\n            scales: [30000, 60000]\n        },\n        {\n            name: \"30 minutes\",\n            interval: 1800000,\n            scales: [60000, 300000]\n        }, {\n            name: \"1 hour\",\n            interval: 3600000,\n            scales: [60000, 300000, 1800000]\n        }, {\n            name: \"1 day\",\n            interval: 86400000,\n            scales: [300000, 1800000, 3600000]\n        }, {\n            name: \"1 week\",\n            interval: 604800017,\n            scales: [3600000, 86400000]\n        }, {\n            name: \"1 month\",\n            interval: 2629800000,\n            scales: [86400000, 604800017]\n        }, {\n            name: \"1 year\",\n            interval: 31557600000,\n            scales: [2629800000]\n        }\n    ];\n\n    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n\n    $scope.locked_interval = null;\n    // lock interval\n    $scope.lock = function(interval) {\n        if ($scope.locked_interval) {\n            if ($scope.locked_interval == interval) {\n                $scope.locked_interval = null; // unlocked\n                if (!$scope.dateTimeIntervals) {\n                    $scope.dateTimeIntervals = [].concat($scope.defaultTimeIntervals);\n                }\n                // change default choosed interval\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            } else {\n                $scope.locked_interval = interval; // locked\n                // change color\n                // change dropdown list\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n\n                $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n                $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n            }\n        } else {\n            $scope.locked_interval = interval;\n            // change color\n\n            // change dropdown list\n            // check the user default config first\n            if ($scope.dateTimeIntervals) {\n\n            } else {\n                $scope.defaultTimeIntervals.forEach(function(item) {\n                    //\n                    if (item[\"scales\"] && item[\"scales\"].length > 0) {\n                        item[\"scales\"].forEach(function(_item) {\n                            if (_item == interval.interval) {\n                                //\n                                $scope.dateTimeIntervals.push(item);\n                            }\n                        });\n                    }\n\n                });\n            }\n\n\n            $scope.currentIntervalName = $scope.dateTimeIntervals[0].name;\n            $scope.currentIntervalChoosed = $scope.dateTimeIntervals[0];\n        }\n        // change\n        $scope.changeInterval($scope.currentIntervalChoosed);\n    };\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id,\n        callback: function(data) {\n            if (data) {\n                widgetData = data;\n                if (widgetData.data.metadata.data.basic.ranges) {\n                    if (widgetData.data.metadata.data.basic.hasOwnProperty(\"ranges\")) {\n                        $scope.dateTimeIntervals = widgetData.data.metadata.data.basic.ranges;\n                        angular$1.forEach($scope.dateTimeIntervals, function(range) {\n                            range[\"interval\"] = range.value;\n                            if (range.checked == true) {\n                                $scope.currentIntervalChoosed = range;\n                            }\n                        });\n                    }\n                } else {\n                    $scope.currentIntervalChoosed = $scope.dateTimeIntervals[1];\n                }\n            }\n        }\n    });\n\n\n    $scope.changeInterval = function(interval) {\n\n        var range = $scope.currentChart[\"xAxisZoomRange\"];\n\n        if (range[0] instanceof Date) {\n            range[0] = range[0].getTime();\n        }\n\n        if (range[1] instanceof Date) {\n            range[1] = range[1].getTime();\n        }\n\n        if (interval && ((range[1] - interval.interval) >= range[0])) {\n            $scope.rangeConfig.dateWindow = [new Date(range[1] - interval.interval), range[1]];\n            $scope.currentChart.updateOptions($scope.rangeConfig);\n            $scope.currentIntervalChoosed = interval;\n        }\n    };\n\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.loadingShow = false;\n\n        $scope.intevals = {\n            device: []\n        };\n\n\n        // update chart\n        $scope.css = {\n            width: \"col-md-12\",\n            height: \"400\"\n        };\n        if (widgetData.data.metadata.css) {\n            $scope.css = widgetData.data.metadata.css;\n        }\n\n        // get start and end from url\n        var begin_path = $stateParams.begin;\n        var end_path = $stateParams.end;\n        var init_flag = false;\n\n\n        //fix interval\n        $scope.fixInterval = false;\n        var noneFixed = [];\n        $scope.fixGraphWithGap = function() {\n            if ($scope.currentChart && $scope.fixInterval) {\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n        $scope.showOrHideDevice = function(device) {\n            angular$1.forEach($scope.childrenDevices, function(item, index) {\n                if (item.name === device.name) {\n                    var graph = $scope.currentChart;\n                    if (device.show == true) {\n                        graph.setVisibility(index, false);\n                        device.show = false;\n                    } else {\n                        graph.setVisibility(index, true);\n                        device.show = true;\n                    }\n\n                }\n            });\n        };\n\n        $scope.fixGraphWithGap_click = function() {\n            if ($scope.currentChart && !$scope.fixInterval) {\n                noneFixed = [];\n                angular$1.copy($scope.currentChart.file_, noneFixed);\n                var currentInterval = -1;\n                angular$1.forEach($scope.intevals.device, function(item) {\n                    if (item.name === $scope.currentIntervalName) {\n                        currentInterval = item.interval;\n                    }\n                });\n                if (noneFixed && noneFixed.length > 0) {\n                    //fix\n                    //get first one\n                    var fixed = [noneFixed[0]];\n                    var tempDate = fixed[0][0].getTime() + currentInterval;\n                    while (tempDate <= noneFixed[noneFixed.length - 1][0].getTime()) {\n                        var flag = false;\n                        // add new\n                        for (var i = 0; i < noneFixed.length; i++) {\n                            if (noneFixed[i][0].getTime() == tempDate) {\n                                flag = true;\n                                fixed.push(noneFixed[i]);\n                                break;\n                            }\n                        }\n\n                        if (!flag) {\n                            var obj = [new Date(tempDate)];\n                            // add NaN\n                            for (var j = 0; j < $scope.currentChart.attributes_.labels_.length; j++) {\n                                obj.push(null);\n                            }\n                            fixed.push(obj);\n                        }\n                        tempDate += currentInterval;\n                    }\n                    $scope.currentChart.updateOptions({\n                        file: fixed\n                    });\n                }\n            } else if ($scope.currentChart && $scope.fixInterval) {\n                $scope.currentChart.updateOptions({\n                    file: noneFixed\n                });\n            }\n\n        };\n\n\n        metadata = widgetData.data.metadata;\n        $scope.basicInfo = metadata.data.basic;\n        $scope.currentView = -1; // -1 is device view and 1 is scatter view\n\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.data_from = \"application\";\n\n        $scope.checkY2Btns = function() {\n            return $scope.basicInfo.zoom === true && $scope.showY2Btns === true;\n        };\n\n        $scope.$on('deviceInfoEvent', function(event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            $scope.auto_schema = metadata.data.source.store;\n            $scope.auto_metadata = metadata;\n            $scope.auto_device_name = deviceData.device.name;\n\n            $scope.$watch('currentView', function(nObj, oObj) {\n                // change\n                if (nObj != oObj) {\n                    $scope.$emit('graphScatterViewChangeEvent', {\n                        children: $scope.basicInfo.childrenChart,\n                        view: nObj\n                    });\n                    $scope.button_handlers = {}; // clean handlers\n                    $element.find(\"#buttons_area\").empty();\n                    if (nObj == -1) {\n                        $scope.autoupdate = true;\n                        var rangeLevel = null;\n                        var otherLevels = [];\n                        angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                            if (level.rows.length > 0) {\n                                if (rangeLevel != null) {\n                                    otherLevels.push(rangeLevel);\n                                }\n                                rangeLevel = level.name;\n                            }\n                        });\n                        if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n                            // show device view\n                            var fields = [];\n                            var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                            angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                if (level.rows.length > 0 && level.name === rangeLevel) {\n                                    var lines = level.rows;\n                                    if (lines) {\n                                        angular$1.forEach(lines, function(line) {\n                                            if (line.value) {\n                                                var columns = (line.value).match(patt);\n                                                angular$1.forEach(columns, function(column) {\n                                                    if (column.startsWith('data.')) {\n                                                        fields.push(column.replace('data.', ''));\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                }\n                            });\n                            $scope.auto_fields = fields;\n                            dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                                initChart(data, deviceData.device.name);\n                            }, function(error) {\n                                console.error(error);\n                            });\n                        }\n\n                    } else {\n                        $scope.autoupdate = false;\n                        //get relation config\n                        if (!metadata.data.source.relation || \"none\" === metadata.data.source.relation) {\n                            return;\n                        } else {\n                            var rangeLevel = null;\n                            var otherLevels = [];\n                            var relationConfig = metadata.data.groups[2];\n                            if(relationConfig.nameColumn){\n                                $scope.childrenDeviceNameColumn = relationConfig.nameColumn;\n                            }else{\n                                $scope.childrenDeviceNameColumn = \"name\";\n                            }\n                            angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                if (level.rows.length > 0) {\n                                    if (rangeLevel != null) {\n                                        otherLevels.push(rangeLevel);\n                                    }\n                                    rangeLevel = level.name;\n                                }\n                            });\n                            if (deviceData.device.name && deviceData.device.name != \"\" && deviceData.device.name != \"undefined\") {\n\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === rangeLevel) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if (column.startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    }\n                                });\n                                $scope.auto_fields = fields;\n                                // show children view\n                                dataService.childrenExtensionInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, metadata.data.source.relation, metadata.data.source.relation_group, metadata.data.source.relation_group, rangeLevel, otherLevels, fields).then(function(data) {\n                                    if (data != null && data.length > 0) {\n                                        initChildrenChart(data);\n                                        interactionHandler();\n                                    }else if($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.device && $scope.interactions.graphs.device.children){\n                                        // no relationship in fgp platform just take it from interactions Configuration  extension_type\n                                        if($scope.interactions.graphs.device.children.data){\n                                            var devices_key = $scope.interactions.graphs.device.children.data().then(\n                                                function(data){\n                                                    $q.all(dataService.devicesExtensionInitInfo($rootScope.host, $rootScope.applicationName,data,metadata.data.source.store, $scope.interactions.graphs.device.children.extension_type, rangeLevel, otherLevels, fields)).then(\n                                                        function(data){\n                                                            initChildrenChart(data);\n                                                            interactionHandler();\n                                                        },\n                                                        function(error){\n                                                            console.error(error);\n                                                        }\n                                                    );\n                                                },\n                                                function(error){\n                                                    return;\n                                                }\n                                            );\n                                        }else{\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                }, function(error) {\n                                    console.error(error);\n                                });\n\n                            }\n                        }\n                    }\n                }\n                $scope.fixInterval = false;\n\n            });\n\n            var interactionHandler = function(){\n                // interactions for scatter view\n                if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter) {\n                    // 1. color\n                    if ($scope.interactions.graphs.buttons.scatter.color) {\n                        // change color by \"field\"\n                        var buttons = $scope.interactions.graphs.buttons.scatter.color;\n\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                var colors = [];\n                                // set button status\n                                if (button[\"active\"]) {\n                                    // make them random colors\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        if ($scope.defaultColors[$index]) {\n                                            colors.push($scope.defaultColors[$index]);\n                                        } else {\n                                            colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                                        }\n                                    });\n                                    button[\"active\"] = false;\n                                } else {\n                                    // the custom func returns color.\n                                    var field = button.field;\n                                    var _func = button._func;\n                                    // devices\n                                    angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                        colors.push(_func(device[field]));\n                                    });\n                                    button[\"active\"] = true;\n                                }\n                                // update graph colors\n                                $scope.currentChart.updateOptions({\n                                    \"colors\": colors\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // 2. data filter\n                    if ($scope.interactions.graphs.buttons.scatter.dataFilter) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.dataFilter;\n\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                // devices\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        device.show = true;\n                                        $scope.currentChart.setVisibility($index, true);\n                                    } else {\n                                        device.show = false;\n                                        $scope.currentChart.setVisibility($index, false);\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n                    // highlight   $scope.currentChart.setSelection(false, line);\n                    if ($scope.interactions && $scope.interactions.graphs && $scope.interactions.graphs.buttons && $scope.interactions.graphs.buttons.scatter && $scope.interactions.graphs.buttons.scatter.highlighting) {\n                        var buttons = $scope.interactions.graphs.buttons.scatter.highlighting;\n                        angular$1.forEach(buttons, function(button) {\n                            var buttons_html = '';\n                            // create an event handler\n                            var _func = '_' + (Math.random().toString(36).slice(2, 13));\n                            $scope.button_handlers[_func] = function() {\n                                // set button status\n                                // the custom func returns color.\n                                var field = button.field;\n                                var _func = button._func;\n                                var hideAllOthers = button.hideOther;\n                                // devices\n                                var timerInterval = 0;\n                                angular$1.forEach($scope.childrenDevices, function(device, $index) {\n                                    if (_func(device[field])) {\n                                        $timeout(function(){\n                                            $scope.currentChart.setSelection(false, device[field]);\n                                        }, timerInterval);\n                                        timerInterval += 1000;\n                                    }else{\n                                        if(hideAllOthers && hideAllOthers == true){\n                                            device.show = false;\n                                            $scope.currentChart.setVisibility($index, false);\n                                        }\n                                    }\n                                });\n                            };\n                            // create click event handler for this button and put it into $scope\n                            buttons_html += '<span class=\"btn btn-xs btn-info badge\" style=\"float:right;margin-right:10px;\" ng-click=\"button_handlers.' + _func + '();\">' + button.label + '</span>';\n                            // compile the html and add it into toolbar\n                            $element.find(\"#buttons_area\").append($compile(buttons_html)($scope));\n                        });\n                    }\n\n                }\n                // n. other.....\n            };\n\n\n\n            // first time of showing chart\n            $scope.$watch('currentChart', function(newValue) {\n                if (newValue) {\n                    //device first level\n                    var rangeLevel = null;\n                    var otherLevels = [];\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0) {\n                            if (rangeLevel != null) {\n                                otherLevels.push(rangeLevel);\n                            }\n                            rangeLevel = level.name;\n                        }\n                    });\n\n                    // fields of range level\n                    var fields = [];\n                    var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                    angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                        if (level.rows.length > 0 && level.name === rangeLevel) {\n                            var lines = level.rows;\n                            if (lines) {\n                                angular$1.forEach(lines, function(line) {\n                                    //\n                                    if (line.value) {\n                                        var columns = (line.value).match(patt);\n                                        angular$1.forEach(columns, function(column) {\n                                            if ((column).startsWith('data.')) {\n                                                fields.push(column.replace('data.', ''));\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    $scope.auto_fields = fields;\n                    //send a rest request\n                    dataService.deviceInitInfo($rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, rangeLevel, otherLevels, fields).then(function(data) {\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n                            //call scatter view init.\n                            $scope.currentView = 1;\n                        } else {\n                            $scope.currentView = -1;\n                            initChart(data, deviceData.device.name);\n                        }\n\n                    }, function(error) {\n                        console.error(error);\n                    });\n                }\n            });\n            $scope.$watch(\"chartDateTime\", function(newValue, oldValue) {\n                if (newValue.begin != null && newValue.end != null) {\n                    var expect_points = Math.floor($element.parent().width());\n                    // find a interval\n                    var expectedInterval = (newValue.end - newValue.begin) / expect_points;\n                    if ($scope.locked_interval) {\n                        expectedInterval = $scope.locked_interval.interval;\n                    }\n                    var conf = $scope.intevals.device;\n\n                    if(conf == null || conf.length == 0){\n                        return false;\n                    }\n                    // device detail view\n                    var preOne = conf[0].interval;\n                    var lastOne = conf[conf.length - 1].interval;\n                    var cin = \"\";\n                    if (expectedInterval >= preOne) {\n                        expectedInterval = preOne;\n                        $scope.autoupdate = false;\n                    } else if (expectedInterval <= lastOne) {\n                        expectedInterval = lastOne;\n\n\n                        if ($scope.currentView == -1) {\n                            $scope.autoupdate = true;\n                            $scope.auto_store = conf[conf.length - 1].name;\n                        }\n\n\n                    } else {\n                        for (var i = 1; i < conf.length; i++) {\n                            if (expectedInterval <= preOne && expectedInterval > conf[i].interval) {\n                                expectedInterval = preOne;\n                            } else {\n                                preOne = conf[i].interval;\n                                cin = conf[i].name;\n                            }\n                        }\n                        $scope.autoupdate = false;\n                    }\n\n                    $scope.currentIntervalName = \"\";\n\n                    angular$1.forEach(conf, function(config) {\n                        if (config.interval == expectedInterval) {\n                            $scope.currentIntervalName = config.name;\n                        }\n                    });\n\n                    // check the interval(data) no more than the number of expected points\n                    if (expectedInterval == lastOne) {\n\n                        // check\n                        if ($scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.limits) {\n                            expect_points = $scope['interactions'].graphs.limits;\n                        }\n                        //\n                        if (((newValue.end - newValue.begin) / expectedInterval) > expect_points) {\n                            // reset range bar\n                            $scope.rangeConfig.dateWindow = [new Date(newValue.end - (expect_points - 1) * expectedInterval), new Date(newValue.end)];\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                            $scope.alertMessage = \"Limit the number of \\\"Zoom-Out\\\" points to \" + expect_points + \".\";\n                            $timeout(function() {\n                                $scope.alertMessage = null;\n                            }, 5000);\n                            return;\n                        }\n                    }\n\n                    // update range-bar\n                    if ($scope.rangeSelectorBar) {\n                        angular$1.forEach($scope.trees, function(tree) {\n                            if (tree.range == true) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === tree.store) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                                        // udpate chart\n                                        var showData = data;\n                                        showData = showData.filter(function(obj) {\n                                            return obj != null;\n                                        });\n\n                                        // update range bar\n                                        var basicInfo = $scope.basicInfo;\n                                        var allLines = [];\n                                        angular$1.forEach(showData, function(line) {\n                                            allLines.push([new Date(line.timestamp)]);\n                                        });\n                                        var series_range = {\n                                            'l0': {\n                                                axis: 'y1'\n                                            }\n                                        };\n\n                                        var rangeBarLabels = [];\n                                        for (var i = 0; i < fields.length; i++) {\n                                            rangeBarLabels.push(fields[i]);\n\n                                            var f = new Function(\"data\", \"with(data) { if(data.\" + fields[i] + \"!=null)return data.\" + fields[i] + \";return null;}\");\n                                            // add value\n                                            var counter = 0;\n                                            angular$1.forEach(allLines, function(realLine) {\n                                                try {\n                                                    var value = f(showData[counter]);\n                                                    realLine.push(value);\n                                                } catch (ex) {\n                                                    realLine.push(null);\n                                                }\n                                                counter++;\n                                            });\n                                        }\n                                        //\n\n                                        if ($scope.rangeConfig && $scope.rangeConfig.file && $scope.rangeConfig.file != null) {\n                                            var objNeed2Add = [];\n                                            angular$1.forEach($scope.rangeConfig.file, function(item) {\n                                                var flag = false;\n                                                var dataLength = -1;\n                                                angular$1.forEach(allLines, function(line) {\n                                                    dataLength = line.length;\n                                                    if (line.length > 0 && line[0].getTime() === item[0].getTime()) {\n                                                        flag = true;\n                                                    } else if (line.length === 0) {\n                                                        flag = true;\n                                                    } else {\n                                                        dataLength = line.length;\n                                                    }\n\n                                                });\n                                                if (!flag) {\n                                                    var tempObj = [];\n                                                    for (var i = 0; i < dataLength; i++) {\n                                                        tempObj[i] = item[i];\n                                                    }\n                                                    objNeed2Add.push(tempObj);\n                                                }\n                                            });\n                                        }\n                                        allLines = allLines.concat(objNeed2Add);\n                                        allLines.sort(function(a, b) {\n                                            return a[0] > b[0] ? 1 : -1;\n                                        });\n                                        if ($scope.showY2Btns) {\n                                            //noinspection JSDuplicatedDeclaration\n                                            if (!$scope.rangeConfig.axes.hasOwnProperty(\"y2\")) {\n                                                series_range = {\n                                                    'l0': {\n                                                        axis: 'y1'\n                                                    },\n                                                    'l0': {\n                                                        axis: 'y2'\n                                                    }\n                                                };\n                                                $scope.rangeSeries = series_range;\n                                                $scope.rangeConfig = {\n                                                    'file': allLines,\n                                                    'labels': ['x'].concat(rangeBarLabels),\n                                                    'series': series_range,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                };\n                                                if (basicInfo && basicInfo.range_show) {\n                                                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                                }\n                                            } else {\n                                                $scope.rangeSelectorBar.updateOptions({\n                                                    'file': allLines,\n                                                    highlightSeriesOpts: {\n                                                        strokeWidth: 3,\n                                                        strokeBorderWidth: 1,\n                                                        highlightCircleSize: 5\n                                                    }\n                                                });\n                                            }\n\n                                        } else {\n                                            series_range[\"span_y2\"] = {\n                                                axis: 'y2'\n                                            };\n                                            $scope.rangeSeries = series_range;\n                                            var newLines = [];\n                                            angular$1.copy(allLines, newLines);\n                                            angular$1.forEach(newLines, function(line) {\n                                                line.push(null);\n                                            });\n                                            $scope.rangeConfig = {\n                                                'file': newLines,\n                                                'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                                'series': series_range,\n                                                highlightSeriesOpts: {\n                                                    strokeWidth: 3,\n                                                    strokeBorderWidth: 1,\n                                                    highlightCircleSize: 5\n                                                }\n                                            };\n                                            if (basicInfo && basicInfo.range_show) {\n                                                $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                                            }\n                                        }\n                                    },\n                                    function(data) {\n                                        console.info(data);\n                                    }\n                                );\n                            }\n                        });\n                    }\n\n\n                    $scope.loadingShow = true;\n                    // check separated points config\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: true\n                        });\n                    } else {\n                        $scope.currentChart.updateOptions({\n                            connectSeparatedPoints: false\n                        });\n                    }\n\n                    if ($scope.currentView == 1) {\n                        // scatter detail view\n                        $scope.legendText = null;\n                        var deviceInfo = [];\n                        var currentStore = \"\";\n                        $scope.childrenDevices = [];\n                        angular$1.forEach($scope.childTrees, function(device) {\n                            angular$1.forEach(device.trees, function(tree, index) {\n                                if (expectedInterval == tree.frequency) {\n                                    currentStore = tree.store;\n                                    deviceInfo.push({\n                                        name: device.name,\n                                        tree: tree.tree\n                                    });\n                                    device[\"show\"] = true;\n                                    $scope.childrenDevices.push(device);\n                                }\n                            });\n                        });\n                        var fields = [];\n                        var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n                        angular$1.forEach(metadata.data.groups[2].collections, function(level) {\n                            if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                var lines = level.rows;\n                                if (lines) {\n                                    angular$1.forEach(lines, function(line) {\n                                        if (line.value) {\n                                            var columns = (line.value).match(patt);\n                                            angular$1.forEach(columns, function(column) {\n                                                if (column && (column).startsWith('data.')) {\n                                                    fields.push(column.replace('data.', ''));\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            }\n                        });\n\n                        $scope.auto_fields = fields;\n                        dataService.devicesStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceInfo, metadata.data.source.store, currentStore, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, expectedInterval).then(function(data) {\n                            var showData = [];\n                            angular$1.forEach(data, function(arr, key) {\n                                var deviceData = [].concat(arr);\n                                showData.push({\n                                    device: key,\n                                    data: deviceData\n                                });\n                                if(deviceData.length == 0){\n                                    var deleteIndex = -1;\n                                    // no data\n                                    angular$1.forEach($scope.childrenDevices, function(item, index){\n                                        if(item.name == key){\n                                            deleteIndex = index;\n                                        }\n                                    });\n                                    if(deleteIndex != -1){\n                                        $scope.childrenDevices.splice(deleteIndex, 1);\n                                    }\n                                }\n                            });\n                            // order childrenDevices by showData\n                            var devicesMatchData = [];\n                            angular$1.forEach(showData, function(item){\n                                angular$1.forEach($scope.childrenDevices, function(device){\n                                    if(item.device == device.name){\n                                        devicesMatchData.push(device);\n                                    }\n                                });\n                            });\n                            //reset childrenDevies\n                            $scope.childrenDevices = devicesMatchData;\n                            //get configuration\n                            updateChildrenDetailChart(metadata, currentStore, $scope.rangeChildrenData, showData);\n                        }, function(data) {\n                            console.info(data);\n                        });\n                        $scope.fixGraphWithGap();\n                    } else {\n                        // cal tree\n                        angular$1.forEach($scope.trees, function(tree, index) {\n                            if (expectedInterval == tree.frequency) {\n                                // send request\n                                var fields = [];\n                                var patt = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n                                angular$1.forEach(metadata.data.groups[1].collections, function(level) {\n                                    if (level.rows.length > 0 && level.name === $scope.currentIntervalName) {\n                                        var lines = level.rows;\n                                        if (lines) {\n                                            angular$1.forEach(lines, function(line) {\n                                                //\n                                                if (line.value) {\n                                                    var columns = (line.value).match(patt);\n                                                    angular$1.forEach(columns, function(column) {\n                                                        if ((column).startsWith('data.')) {\n                                                            fields.push(column.replace('data.', ''));\n                                                        }\n                                                    });\n\n                                                }\n\n                                            });\n                                        }\n                                    }\n                                });\n\n                                $scope.auto_fields = fields;\n                                dataService.deviceStoreData($scope.graphId, $rootScope.host, $rootScope.applicationName, deviceData.device.name, metadata.data.source.store, tree.store, tree.tree, new Date(newValue.begin).getTime(), new Date(newValue.end).getTime(), fields, tree.frequency).then(function(data) {\n                                    // udpate chart\n                                    var showData = data;\n                                    showData = showData.filter(function(obj) {\n                                        return obj != null;\n                                    });\n                                    showData.sort(function(a, b) {\n                                        return a.timestamp > b.timestamp ? 1 : -1;\n                                    });\n                                    // get configuration\n                                    updateDetailChart(metadata, tree.store, $scope.rangeData, showData);\n                                    // rest visibility\n                                    angular$1.forEach(showData, function(item){\n                                        item[\"show\"] = true;\n                                    });\n\n                                    // tell some other widgets, the graph is changed.\n                                    $timeout(function() {\n                                        $rootScope.$broadcast('chartDataChangeEvent', {\n                                            'id': element_id,\n                                            'group': 'device',\n                                            'data': {\n                                                'collection': tree.store,\n                                                'group': 'device',\n                                                'data': showData\n                                            }\n                                        });\n                                    });\n\n                                }, function(data) {\n                                    console.info(data);\n                                });\n                            }\n                        });\n\n                        $scope.fixGraphWithGap();\n                    }\n                    // 2. series highlighting\n\n                    $scope.status = false;\n                }\n            });\n\n        });\n\n\n        var fetchData = function(values, node) {\n            if (node.children[0] != null) {\n                fetchData(values, node.children[0]);\n            }\n\n            if (node.children[1] != null) {\n                fetchData(values, node.children[1]);\n            }\n\n            if (node.children[0] == null && node.children[1] == null) {\n                if (node.data != null && node.data.array) {\n                    Array.prototype.push.apply(values, node.data.array.slice(0, node.data.size));\n                } else if (node.data != null) {\n                    Array.prototype.push.apply(values, node.data.slice(0, node.data.length));\n                }\n\n            }\n\n        };\n\n\n        $scope.trees = [];\n        $scope.rangeData = [];\n\n        $scope.ordinalRangeData = [];\n\n        var initChart = function(data, deviceName) {\n            $scope.intevalforshow = [];\n            //\n            $scope.intevals.device = [];\n            var trees = data.trees;\n            $scope.trees = trees;\n            var rangeTree = null;\n            angular$1.forEach(trees, function(tree) {\n                if (tree.range) {\n                    rangeTree = tree;\n                }\n                $scope.intevals.device.push({\n                    name: tree.store,\n                    interval: tree.frequency\n                });\n            });\n\n\n            // init chart with range data\n            var store = rangeTree.store;\n\n            // get all data\n            var allData = [];\n            // fetchData(allData, rangeTree.tree);only get first and last\n            // fix the problem of never seen the current data.\n            rangeTree.last.timestamp = rangeTree.last.timestamp + (rangeTree.frequency - 1);\n            allData = allData.concat([rangeTree.first, rangeTree.last]);\n\n            allData = allData.filter(function(obj) {\n                return obj != null;\n            });\n\n            allData.sort(function(a, b) {\n                return a.timestamp > b.timestamp ? 1 : -1;\n            });\n\n\n            if ($scope.trees.length == 0 || allData.length == 0) {\n                $scope.emptyDataShow = true;\n                return;\n            }\n\n            // if the data only has one point. change the data range to bigger\n            if (allData.length == 1) { //  means only one point.\n                var newData = [];\n                // add 1 points into both side\n                var thePoint = allData[0];\n                var timestamp = thePoint.timestamp;\n                var currentInterval = $scope.intevals.device[0].interval;\n                newData.push({\n                    timestamp: timestamp - currentInterval\n                });\n                Array.prototype.push.apply(newData, allData);\n                newData.push({\n                    timestamp: timestamp + currentInterval\n                });\n                allData = newData;\n            }\n            $scope.ordinalRangeData = allData;\n            // put the data into range tree cache\n            if (rangeTree) {\n                //\n                graphDataService.put(deviceName + \"/\" + rangeTree.store + \"/\" + $scope.graphId, [rangeTree.first, {\n                    timestamp: moment().endOf('day').toDate().getTime()\n                }]);\n            }\n            // get configuration and make real data\n            updateChart(metadata, store, allData, rangeTree);\n        };\n\n        var initChildrenChart = function(deviceDatas) {\n            var devicesInfo = {};\n            $scope.intevals.device = [];\n            //range data with all device\n            $scope.childTrees = [];\n            $scope.childrenDevices = [];\n\n            angular$1.forEach(deviceDatas, function(deviceData, _index) {\n                var device = {};\n                device[\"show\"] = true;\n                angular$1.merge(device, deviceData.device, deviceData.extension);\n                $scope.childrenDevices.push(device);\n                var trees = deviceData.trees;\n                device[\"trees\"] = trees;\n                $scope.childTrees.push(device);\n                var rangeTree = null;\n                angular$1.forEach(trees, function(tree) {\n                    if (tree.range) {\n                        rangeTree = tree;\n                    }\n\n                    var flag = false;\n                    angular$1.forEach($scope.intevals.device, function(interval) {\n                        if (interval.name == tree.store && interval.interval == tree.frequency) {\n                            // has same one\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        $scope.intevals.device.push({\n                            name: tree.store,\n                            interval: tree.frequency\n                        });\n                    }\n\n                });\n\n                if (rangeTree != null) {\n                    var deviceObj = devicesInfo[device.name] = {};\n                    // get all data\n                    var allData = [rangeTree.first, {\n                        timestamp: moment().endOf('day').toDate().getTime()\n                    }];\n                    allData = allData.filter(function(obj) {\n                        return obj != null;\n                    });\n                    allData.sort(function(a, b) {\n                        return a.timestamp > b.timestamp ? 1 : -1;\n                    });\n                    //\n                    deviceObj[\"range\"] = rangeTree;\n                    deviceObj[\"data\"] = allData;\n                } else {\n                    console.info(device.name + \" has none data.\");\n                }\n            });\n            updateChildrenChart(metadata, devicesInfo);\n        };\n\n        var updateChildrenChart = function(metadata, devicesInfo) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var allLines = [];\n            var allXLabels = [];\n            angular$1.forEach(devicesInfo, function(device, key, _index) {\n                angular$1.forEach(device.data, function(item) {\n                    var flag = false;\n                    angular$1.forEach(allXLabels, function(label) {\n                        if (label.getTime() == item.timestamp) {\n                            flag = true;\n                        }\n                    });\n                    if (!flag) {\n                        allXLabels.push(new Date(item.timestamp));\n                    }\n                });\n            });\n            // order\n            allXLabels.sort(function(a, b) {\n                return a > b ? 1 : -1;\n            });\n\n            // make all line\n            angular$1.forEach(allXLabels, function(label) {\n                allLines.push([label]);\n            });\n\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var showY2axis = false;\n            var counter = 0;\n            angular$1.forEach(devicesInfo, function(device, key) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                angular$1.forEach(collections, function(collection) {\n                    if (collection.name == device.range.store) {\n                        $scope.currentIntervalName = device.range.store;\n                        var originalData = device.data;\n\n                        // always same for each device\n                        if (collection.rows[0].yaxis == 0) {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[collection.rows[0].label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        labels.push(key);// put the name here and\n                        // make a line\n                        var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                        // add value\n                        angular$1.forEach(allLines, function(realLine, index) {\n\n                            var flag = false;\n                            angular$1.forEach(originalData, function(odata) {\n                                if (realLine[0].getTime() == odata.timestamp) {\n                                    try {\n                                        var value = f(odata);\n                                        realLine.push(value);\n                                        if (yRange.min == null) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max == null) {\n                                            yRange.max = value;\n                                        }\n\n                                        if (yRange.min > value) {\n                                            yRange.min = value;\n                                        }\n\n                                        if (yRange.max < value) {\n                                            yRange.max = value;\n                                        }\n                                    } catch (ex) {\n                                        realLine.push(null);\n                                    }\n                                    flag = true;\n                                }\n                            });\n\n                            if (!flag) {\n                                realLine.push(null);\n                            }\n                        });\n\n\n                    }\n                });\n            });\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n            var connectSeparatedPoints = false;\n            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n            }\n\n            //update chart\n            if ($scope.currentChart) {\n                $scope.rangeChildrenData = allLines;\n\n                if (showY2axis) {\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'labelsKMB': true,\n                        'file': allLines,\n                        legend: 'never',\n                        labelsKMB: true,\n                        labelsSeparateLines: false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        // data formate\n                        labels: ['x'].concat(sampleData.labels),\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels),\n                        'ylabel': leftAndRight.left,\n                        'y2label': leftAndRight.right,\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max],\n                                axisLabelWidth: 80\n                            },\n                            'y2': {}\n                        }\n                        // showRangeSelector: true\n                    };\n                } else {\n                    $scope.showY2Btns = false;\n                    var newLines = [];\n                    angular$1.copy(allLines, newLines);\n                    angular$1.forEach(newLines, function(line) {\n                        line.push(null);\n                    });\n                    series[\"span_y2\"] = {\n                        'axis': 'y2'\n                    };\n                    $scope.childrenRangeConfig = {\n                        'connectSeparatedPoints': connectSeparatedPoints,\n                        'drawGapEdgePoints': true,\n                        'pointSize': 3,\n                        'legend': 'never',\n                        'labelsKMB': true,\n                        'file': newLines,\n                        'labelsSeparateLines': false,\n                        highlightCircleSize: 2,\n\n                        strokeBorderWidth: 1,\n                        highlightSeriesOpts: {\n                            strokeWidth: 3,\n                            strokeBorderWidth: 1,\n                            highlightCircleSize: 5\n                        },\n                        'labels': ['x'].concat(labels).concat(['span_y2']),\n                        'ylabel': leftAndRight.left,\n                        'y2label': \"\",\n                        'series': series,\n                        'colors': colors,\n                        'axes': {\n                            'y': {\n                                valueRange: [yRange.min, yRange.max]\n                            },\n                            'y2': {\n                                axisLabelFormatter: function(d) {\n                                    return '';\n                                }\n                            }\n                        }\n                        // showRangeSelector: true\n                    };\n                }\n                //\n                $scope.currentChart.updateOptions($scope.childrenRangeConfig);\n\n                // set the first one to range bar\n                // update range bar with the first channel data\n                if ($scope.basicInfo && $scope.basicInfo.range_show && $scope['interactions'] && $scope['interactions'].graphs && $scope['interactions'].graphs.scatter) {\n\n                    Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                        zoom: true,\n                        selection: false,\n                        range: false\n                    });\n                    if (showY2axis) {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    } else {\n                        $scope.rangeConfig = {\n                            'file': newLines,\n                            'series': series,\n                            'labels': ['x'].concat(labels).concat(['span_y2']),\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            }\n                        };\n                    }\n                    $scope.rangeSelectorBar.updateOptions($scope.rangeConfig);\n                    // reset the datetime for current chart\n\n                    if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= newLines[0][0] && $scope.chartDateWindow[1] <= newLines[newLines.length - 1][0])) {\n                        // keep the current range bar refresh once.\n                        $scope.chartDateTime = {\n                            begin: $scope.chartDateTime.begin,\n                            end: $scope.chartDateTime.end\n                        };\n                        $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    } else {\n\n                        $scope.currentChart[\"xAxisZoomRange\"] = [newLines[0][0], newLines[newLines.length - 1][0]];\n                        if (begin_path && end_path && !init_flag) {\n                            // $scope.chartDateTime = {\n                            // \"begin\": new Date(new Number(begin_path)),\n                            // \"end\": new Date(new Number(end_path))\n                            // };\n                            $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                            init_flag = true;\n                        } else {\n                            if ($scope.currentIntervalChoosed && ((newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= newLines[0][0].getTime())) {\n                                $scope.rangeConfig.dateWindow = [new Date(newLines[newLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), newLines[newLines.length - 1][0]];\n                            } else {\n                                $scope.chartDateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                                $scope.rangeConfig.dateWindow = [newLines[0][0], newLines[newLines.length - 1][0]];\n                            }\n                        }\n                        $scope.currentChart.updateOptions($scope.rangeConfig);\n                        $scope.currentChartOptions = $scope.rangeConfig;\n                    }\n                } else {\n                    //  keep the same time window and refersh\n                    $scope.chartDateTime = {\n                        begin: $scope.chartDateTime.begin,\n                        end: $scope.chartDateTime.end\n                    };\n                    $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                    $scope.loadingShow = false;\n                }\n\n            }\n\n\n        };\n\n\n        var updateChildrenDetailChart = function(metadata, store, rangeData, allData) {\n            //relation\n            var relationConfig = metadata.data.groups[2];\n            // scatter view shows only one collection\n            var collections = relationConfig.collections;\n            var newLines = [];\n            var newTime = [];\n            var series = {};\n            var labels = [];\n            var colors = [];\n            var leftAndRight = {\n                left: relationConfig.leftYAxis,\n                right: relationConfig.rightYAxis\n            };\n            var yRange = {\n                min: null,\n                max: null\n            };\n            var counter = 0;\n            var showY2axis = null;\n            angular$1.forEach(allData, function(device) {\n                if ($scope.defaultColors[counter]) {\n                    colors.push($scope.defaultColors[counter]);\n                } else {\n                    colors.push('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6));\n                }\n                counter++;\n\n                if (device.data.length > 0) {\n                    labels.push(device.device);\n                    angular$1.forEach(collections, function(collection) {\n                        if (collection.name == store) {\n                            $scope.currentIntervalName = store;\n                            if (collection.rows[0].yaxis == 0) {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y1',\n                                };\n                            } else {\n                                series[collection.rows[0].label] = {\n                                    'axis': 'y2'\n                                };\n                                showY2axis = true;\n                                $scope.showY2Btns = true;\n                            }\n                            var f = new Function(\"data\", \"with(data) { if(\" + collection.rows[0].value + \"!=null)return \" + collection.rows[0].value + \";return null;}\");\n                            var tempData = [];\n                            var tempTime = [];\n                            // make data\n                            angular$1.forEach(device.data, function(data) {\n                                var dateTime = new Date(data.timestamp);\n                                try {\n                                    var value = f(data);\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: value\n                                    });\n\n                                    if (yRange.min == null) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max == null) {\n                                        yRange.max = value;\n                                    }\n\n                                    if (yRange.min > value) {\n                                        yRange.min = value;\n                                    }\n\n                                    if (yRange.max < value) {\n                                        yRange.max = value;\n                                    }\n\n                                } catch (e) {\n                                    tempData.push({\n                                        timestamp: dateTime,\n                                        value: null\n                                    });\n                                }\n                                tempTime.push(dateTime.getTime());\n                            });\n                            newTime = newTime.concat(tempTime.filter(function(item) {\n                                return newTime.indexOf(item) < 0;\n                            }));\n                            newLines.push({\n                                device: device.device,\n                                data: tempData\n                            });\n                        }\n                    });\n                }\n            });\n\n            var chartData = [];\n            // time needs sort!!!\n            newTime = newTime.sort();\n            angular$1.forEach(newTime, function(nt) {\n                chartData.push([new Date(nt)]);\n            });\n\n\n            angular$1.forEach(newLines, function(line) {\n                angular$1.forEach(chartData, function(timeTicket) {\n                    // line data\n                    var flag = false;\n                    var lineData = line.data;\n                    for (var i = 0; i < lineData.length; i++) {\n                        if (lineData[i].timestamp.getTime() == timeTicket[0].getTime()) {\n                            timeTicket.push(lineData[i].value);\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag != true) {\n                        // we should use \"NaN\"\n                        timeTicket.push(null);\n                    }\n                });\n            });\n\n\n            if (yRange.min == yRange.max && yRange.min != null && yRange.max != null) {\n                yRange.min = yRange.min - (yRange.min) * 0.10;\n                yRange.max = yRange.max + (yRange.max) * 0.10;\n            }\n\n\n            if (chartData.length == 0) {\n                $scope.currentChart.updateOptions({\n                    'file': []\n                });\n                $scope.loadingShow = false;\n            } else {\n                if ($scope.currentChart) {\n                    var connectSeparatedPoints = false;\n                    if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                        connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                    }\n                    if (showY2axis) {\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                        };\n\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            highlightCircleSize: 2,\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            labelsSeparateLines: false,\n                            'file': chartData,\n                            'labels': ['x'].concat(labels),\n                            'ylabel': leftAndRight.left,\n                            'y2label': leftAndRight.right,\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    } else {\n                        var newLines = [];\n                        $scope.showY2Btns = false;\n                        angular$1.copy(chartData, newLines);\n                        angular$1.forEach(newLines, function(line) {\n                            line.push(null);\n                        });\n                        series[\"span_y2\"] = {\n                            axis: 'y2'\n                        };\n                        $scope.currentChartOptions = {\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        };\n                        $scope.currentChart.updateOptions({\n                            'connectSeparatedPoints': connectSeparatedPoints,\n                            'pointSize': 3,\n                            'legend': 'never',\n                            'labelsKMB': true,\n                            'file': newLines,\n                            labelsSeparateLines: false,\n                            'labels': ['x'].concat(labels).concat([\"span_y2\"]),\n                            'ylabel': leftAndRight.left,\n                            highlightCircleSize: 2,\n\n                            strokeBorderWidth: 1,\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                            highlightCallback: function(e, x, pts, row, seriesName) {\n                                if($scope.currentView == -1){\n                                    // device view is using default legend\n                                    return false;\n                                }\n                                // set current child device and will do show one\n                                $scope.currentHighLightChildDevice = seriesName;\n                                var maxWidth = e.target.offsetWidth;\n                                var sn = \"\";\n                                angular$1.forEach(series, function(value, name, item) {\n                                    if (value.axis === \"y1\") {\n                                        sn = name;\n                                    }\n                                });\n                                var point_show = {\n                                    x: 0,\n                                    y: 0\n                                };\n                                // get device name columns\n                                var relationConfig = metadata.data.groups[2];\n                                angular$1.forEach(pts, function(item, index) {\n                                    if (item.name === seriesName) {\n                                        $scope.legendText = seriesName;\n                                        var colorIndex = -1;\n                                        //get index from childrenDevices\n                                        angular$1.forEach($scope.childrenDevices, function(device, _index){\n                                            if(device.name == seriesName){\n                                                colorIndex = _index;\n                                            }\n                                        });\n                                        $scope.legendColor = $scope.currentChart.user_attrs_.colors[colorIndex];\n                                        // $scope.legendText = seriesName +\"[\"+moment(item.xval).format('l HH:mm:ss')+\", \"+sn+\":\"+ item.yval+\"]\";\n                                        $scope.legendText_device = seriesName;\n                                        $scope.legendText_device_name = \"\";\n                                        // if the nameSd exist\n                                        if($scope.childTrees && $scope.childTrees.length > 0){\n                                            angular$1.forEach($scope.childTrees, function(item){\n                                                //\n                                                if(item.name == seriesName){\n                                                    if(item[relationConfig.nameColumn]){\n                                                        $scope.legendText_device_name = item[relationConfig.nameColumn];\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        if($scope.legendText_device_name == \"\"){\n                                            //\n                                            $scope.legendText_device_name = seriesName;\n                                        }\n\n                                        if (moment.tz.guess()) {\n                                            $scope.legendText_datetime = moment(item.xval).tz(moment.tz.guess()).format('DD/MM/YYYY HH:mm:ss');\n                                        } else {\n                                            $scope.legendText_datetime = moment(item.xval).format('DD/MM/YYYY HH:mm:ss');\n                                        }\n                                        $scope.legendText_column = sn;\n                                        $scope.legendText_value = item.yval;\n                                        angular$1.forEach(pts, function(point) {\n                                            if (point.name === seriesName) {\n                                                point_show.y = point.canvasy + 30;\n                                                point_show.x = point.canvasx + 30;\n                                            }\n                                        });\n                                    }\n                                });\n                                var legendbox = angular$1.element(\"#legendbox\" + element_id);\n\n                                $scope.$apply(function() {\n                                    $scope.legendTop = point_show.y;\n                                    if (maxWidth < (point_show.x + 200)) {\n                                        $scope.legendLeft = point_show.x - 200;\n                                    } else {\n                                        $scope.legendLeft = point_show.x;\n                                    }\n                                });\n\n                            },\n\n                            unhighlightCallback: function(e) {\n                                $scope.$apply(function() {\n                                    $scope.legendText = null;\n                                    $scope.legendText_device = null;\n                                    $scope.legendText_datetime = null;\n                                    $scope.legendText_column = null;\n                                    $scope.legendText_value = null;\n                                });\n                            },\n                            'y2label': \"\",\n                            'series': series,\n                            'colors': colors,\n                            'axes': {\n                                'y': {\n                                    valueRange: [yRange.min, yRange.max],\n                                    axisLabelWidth: 80\n                                },\n                                \"y2\": {\n                                    axisLabelFormatter: function(d) {\n                                        return '';\n                                    },\n                                    axisLabelWidth: 80\n                                }\n                            }\n                            // showRangeSelector: true\n                        });\n                    }\n                    $scope.loadingShow = false;\n                }\n            }\n        };\n\n\n        /**\n         * update detail chart\n         * @param metadata\n         * @param store\n         * @param rangeData\n         * @param allData\n         */\n        var updateDetailChart = function(metadata, store, rangeData, allData) {\n\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    // var yRange = {'min': null, 'max': null};\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    angular$1.forEach(yRanges, function(yrange) {\n                        if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                            yrange.min = yrange.min - (yrange.min) * 0.10;\n                            yrange.max = yrange.max + (yrange.max) * 0.10;\n                        }\n                    });\n\n                    if (allLines.length == 0) {\n                        $scope.currentChart.updateOptions({\n                            'file': [],\n                            highlightSeriesOpts: {\n                                strokeWidth: 3,\n                                strokeBorderWidth: 1,\n                                highlightCircleSize: 5\n                            },\n                        });\n                        if ($scope.rangeSelectorBar) {\n                            $scope.currentChart[\"xAxisZoomRange\"] = $scope.rangeSelectorBar.xAxisExtremes();\n                        }\n                        $scope.loadingShow = false;\n                    } else {\n                        if ($scope.currentChart) {\n                            var connectSeparatedPoints = false;\n                            if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                                connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                            }\n                            if (showY2axis) {\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': allLines,\n                                    'labels': ['x'].concat(labels),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': leftAndRight.right,\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            'labelsKMB': true,\n                                            valueRange: [yRanges[1].min, yRanges[1].max],\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            } else {\n                                var newLines = [];\n                                $scope.showY2Btns = false;\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n\n                                series[\"span-Y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.currentChartOptions = {\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                };\n                                $scope.currentChart.updateOptions({\n                                    'connectSeparatedPoints': connectSeparatedPoints,\n                                    'drawGapEdgePoints': true,\n                                    'pointSize': 3,\n                                    'legend': 'follow',\n                                    labelsSeparateLines: true,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                    'labelsKMB': true,\n                                    'file': newLines,\n                                    'labels': ['x'].concat(labels).concat(['span_y2']),\n                                    'ylabel': leftAndRight.left,\n                                    'y2label': \"\",\n                                    'series': series,\n                                    'axes': {\n                                        'y': {\n                                            valueRange: [yRanges[0].min, yRanges[0].max],\n                                            axisLabelWidth: 80\n                                        },\n                                        'y2': {\n                                            axisLabelFormatter: function(d) {\n                                                return '';\n                                            },\n                                            axisLabelWidth: 80\n                                        }\n                                    },\n                                    'colors': colors\n                                    // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                });\n                            }\n                            $scope.loadingShow = false;\n                        }\n                    }\n\n\n                }\n            });\n\n\n        };\n\n        $scope.autoUpdateChart = updateDetailChart;\n\n        /**\n         * update range chart\n         * @param metadata\n         * @param store\n         * @param allData\n         */\n        var updateChart = function(metadata, store, allData, rangeTree) {\n            var deviceConfig = metadata.data.groups[1];\n            var collections = deviceConfig.collections;\n            var labels = [];\n            var series = {};\n            var colors = [];\n            var leftAndRight = {\n                left: deviceConfig.leftYAxis,\n                right: deviceConfig.rightYAxis\n            };\n            var allLines = [];\n            //0 for y  1 for y2\n            var yRanges = [{\n                min: null,\n                max: null\n            }, {\n                min: null,\n                max: null\n            }];\n            angular$1.forEach(collections, function(collection) {\n                if (collection.name == store) {\n                    $scope.currentIntervalName = store;\n                    angular$1.forEach(allData, function(line) {\n                        allLines.push([new Date(line.timestamp)]);\n                    });\n\n                    $scope.rangeSeriesNumber = collection.rows.length;\n                    var showY2axis = false;\n                    angular$1.forEach(collection.rows, function(row) {\n                        labels.push(row.label);\n                        colors.push(row.color);\n\n                        if (row.yaxis == 0) {\n                            series[row.label] = {\n                                'axis': 'y1'\n                            };\n                        } else {\n                            series[row.label] = {\n                                'axis': 'y2'\n                            };\n                            showY2axis = true;\n                            $scope.showY2Btns = true;\n                        }\n\n                        var f = new Function(\"data\", \"with(data) { if(\" + row.value + \"!=null)return \" + row.value + \";return null;}\");\n                        // add value\n                        var counter = 0;\n                        angular$1.forEach(allLines, function(realLine) {\n                            try {\n                                var value = f(allData[counter]);\n                                realLine.push(value);\n                                if (row.yaxis == 0) {\n                                    if (yRanges[0].min == null) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max == null) {\n                                        yRanges[0].max = value;\n                                    }\n\n                                    if (yRanges[0].min > value) {\n                                        yRanges[0].min = value;\n                                    }\n\n                                    if (yRanges[0].max < value) {\n                                        yRanges[0].max = value;\n                                    }\n                                } else {\n                                    if (yRanges[1].min == null) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max == null) {\n                                        yRanges[1].max = value;\n                                    }\n\n                                    if (yRanges[1].min > value) {\n                                        yRanges[1].min = value;\n                                    }\n\n                                    if (yRanges[1].max < value) {\n                                        yRanges[1].max = value;\n                                    }\n                                }\n\n                            } catch (ex) {\n                                realLine.push(null);\n                            }\n                            counter++;\n                        });\n\n                    });\n\n                    if ($scope.currentChart) {\n                        $scope.rangeData = allLines;\n                        var basicInfo = $scope.basicInfo;\n                        if (basicInfo && basicInfo.range_show) {\n                            var rangeBarLabels = [];\n                            for (var i = 0; i < labels.length; i++) {\n                                rangeBarLabels.push(\"l\" + i);\n                            }\n                            var series_range = {\n                                'l0': {\n                                    axis: 'y1'\n                                }\n                            };\n                            if (showY2axis) {\n                                //noinspection JSDuplicatedDeclaration\n                                series_range = {\n                                    'l0': {\n                                        axis: 'y1'\n                                    },\n                                    'l0': {\n                                        axis: 'y2'\n                                    }\n                                };\n                                $scope.rangeSeries = series_range;\n\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': allLines,\n                                    'labels': ['x'].concat(rangeBarLabels),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                            } else {\n                                series_range[\"span_y2\"] = {\n                                    axis: 'y2'\n                                };\n                                $scope.showY2Btns = false;\n                                $scope.rangeSeries = series_range;\n                                var newLines = [];\n                                angular$1.copy(allLines, newLines);\n                                angular$1.forEach(newLines, function(line) {\n                                    line.push(null);\n                                });\n                                $scope.rangeSelectorBar.updateOptions({\n                                    'file': newLines,\n                                    'labels': ['x'].concat(rangeBarLabels).concat(['span_y2']),\n                                    'series': series_range,\n                                    highlightSeriesOpts: {\n                                        strokeWidth: 3,\n                                        strokeBorderWidth: 1,\n                                        highlightCircleSize: 5\n                                    },\n                                });\n                                // save\n                            }\n\n\n                        }\n\n                        angular$1.forEach(yRanges, function(yrange) {\n                            if (yrange.min == yrange.max && yrange.min != null && yrange.max != null) {\n                                yrange.min = yrange.min - (yrange.min) * 0.10;\n                                yrange.max = yrange.max + (yrange.max) * 0.10;\n                            }\n                        });\n\n\n                        // if graph has 2 yAxis or a yAxis\n                        var connectSeparatedPoints = false;\n                        if ($scope.basicInfo && $scope.basicInfo.points && $scope.basicInfo.points.connected) {\n                            connectSeparatedPoints = true; //'connectSeparatedPoints': connectSeparatedPoints,\n                        }\n\n                        if (showY2axis) {\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': allLines,\n                                'labels': ['x'].concat(labels),\n                                'ylabel': leftAndRight.left,\n                                'y2label': leftAndRight.right,\n\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        'labelsKMB': true,\n                                        valueRange: [yRanges[1].min, yRanges[1].max],\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        } else {\n                            series['span_y2'] = {\n                                axis: 'y2'\n                            };\n                            $scope.showY2Btns = false;\n                            var newLines = [];\n                            angular$1.copy(allLines, newLines);\n                            angular$1.forEach(newLines, function(line) {\n                                line.push(null);\n                            });\n                            $scope.rangeConfig = {\n                                'connectSeparatedPoints': connectSeparatedPoints,\n                                'drawGapEdgePoints': true,\n                                'pointSize': 3,\n                                'legend': 'follow',\n                                labelsSeparateLines: true,\n                                highlightSeriesOpts: {\n                                    strokeWidth: 3,\n                                    strokeBorderWidth: 1,\n                                    highlightCircleSize: 5\n                                },\n                                'labelsKMB': true,\n                                'file': newLines,\n                                'labels': ['x'].concat(labels).concat(['span_y2']),\n                                'ylabel': leftAndRight.left,\n                                'y2label': \"\",\n                                'series': series,\n                                'colors': colors,\n                                'axes': {\n                                    'y': {\n                                        valueRange: [yRanges[0].min, yRanges[0].max],\n                                        axisLabelWidth: 80\n                                    },\n                                    'y2': {\n                                        axisLabelFormatter: function(d) {\n                                            return '';\n                                        },\n                                        axisLabelWidth: 80\n                                    }\n                                },\n                                'dateWindow': [allLines[0][0], allLines[allLines.length - 1][0]],\n                                // 'valueRange': [yRange.min - (Math.abs(yRange.min) * 0.1), yRange.max + (Math.abs(yRange.max) * 0.1)]\n                                // showRangeSelector: true\n                            };\n                        }\n\n\n                        if (basicInfo && basicInfo.range_show) {\n                            Dygraph.synchronize([$scope.rangeSelectorBar, $scope.currentChart], {\n                                zoom: true,\n                                selection: false,\n                                range: false\n                            });\n                        }\n\n\n                        if ($scope.chartDateWindow && ($scope.chartDateWindow[0] != 1388495700000 || $scope.chartDateWindow[0] != 1388503800000) && ($scope.chartDateWindow[0] >= allLines[0][0] && $scope.chartDateWindow[1] <= allLines[allLines.length - 1][0])) {\n                            // keep the current range bar refresh once.\n                            $scope.chartDateTime = {\n                                begin: $scope.chartDateTime.begin,\n                                end: $scope.chartDateTime.end\n                            };\n                            $scope.chartDateWindow = [$scope.chartDateTime.begin, $scope.chartDateTime.end];\n                        } else {\n\n                            $scope.currentChart[\"xAxisZoomRange\"] = [allLines[0][0], allLines[allLines.length - 1][0]];\n                            if (begin_path && end_path && !init_flag) {\n                                // $scope.chartDateTime = {\n                                // \"begin\": new Date(new Number(begin_path)),\n                                // \"end\": new Date(new Number(end_path))\n                                // };\n                                $scope.chartDateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                $scope.rangeConfig.dateWindow = [new Date(new Number(begin_path)), new Date(new Number(end_path))];\n                                init_flag = true;\n                            } else {\n                                if ($scope.currentIntervalChoosed && ((allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval) >= allLines[0][0].getTime())) {\n                                    $scope.rangeConfig.dateWindow = [new Date(allLines[allLines.length - 1][0].getTime() - $scope.currentIntervalChoosed.interval), allLines[allLines.length - 1][0]];\n                                } else {\n                                    $scope.chartDateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                    $scope.rangeConfig.dateWindow = [allLines[0][0], allLines[allLines.length - 1][0]];\n                                }\n                            }\n                            $scope.currentChart.updateOptions($scope.rangeConfig);\n                            $scope.currentChartOptions = $scope.rangeConfig;\n                        }\n                        //bind\n                        $scope.loadingShow = false;\n                    }\n\n                }\n            });\n        };\n\n        $scope.chartDateTime = {\n            begin: null,\n            end: null\n        };\n\n\n        $scope.drillDown = function(){\n            //get redirect configuration from interactions\n            if($scope.currentView == 1 && $scope.currentHighLightChildDevice && $scope.drill && $scope.drill.graphs && $scope.drill.graphs.drillDown && $scope.drill.graphs.drillDown.url){\n                //\n                var url = $scope.drill.graphs.drillDown.url;\n                url = url.replace(\"{0}\", $scope.currentHighLightChildDevice);\n                $window.open(url);\n            }\n        };\n        // function for show one\n        $scope.showOne = function(deviceName) {\n\n            if ($rootScope['standalone'] && $rootScope['standalone'] == true) {\n                return false;\n            }\n\n            // device type is\n            if ($location.url().indexOf('/app/page/param/') != -1) {\n                //open window\n                $window.open(\"/admin/#/app/page/param/\" + $rootScope.applicationName + \"/\" + metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1]));\n            } else {\n                //open window\n                $window.open(\"/admin/#\" + $location.url().replace(\"show\", \"param\").replace($location.url().substr($location.url().lastIndexOf('/', $location.url().lastIndexOf('/') - 1) + 1), metadata.data.source.relation_group + \"/\" + deviceName + \"/\" + Math.floor($scope.chartDateWindow[0]) + \"/\" + Math.floor($scope.chartDateWindow[1])));\n            }\n\n        };\n\n\n        var btntimer = null;\n\n\n        $scope.btnZoomInVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomInVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnZoomOutVRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVULeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVDLeft = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[0].valueRange;\n            yAxes[0]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[0]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n\n        $scope.btnPanVURight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] - (range[1] - range[0]) * 0.2, range[1] - (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        $scope.btnPanVDRight = function() {\n            var g = $scope.currentChart;\n            var yAxes = g.axes_;\n            var range = yAxes[1].valueRange;\n            yAxes[1]['valueRange'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            yAxes[1]['valueWindow'] = [range[0] + (range[1] - range[0]) * 0.2, range[1] + (range[1] - range[0]) * 0.2];\n            g.drawGraph_(false);\n        };\n\n        // functions for buttons\n        $scope.btnpanleft = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[0] - pan_delta) < panRange[0]) {\n                    // go to the left\n                    startDate = panRange[0];\n                } else {\n                    startDate = $scope.chartDateWindow[0] - pan_delta;\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1].getTime() - pan_delta;\n                }\n            } else {\n                if (($scope.chartDateWindow[1] - pan_delta) < (panRange[0] + pan_delta)) {\n                    // go to the left\n                    endDate = panRange[0] + pan_delta;\n                } else {\n                    endDate = $scope.chartDateWindow[1] - pan_delta;\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnpanright = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n\n            //split range to 20 pieces\n            var pan_delta = (panRange[1] - panRange[0]) / 20;\n            var startDate;\n            var endDate;\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                if (($scope.chartDateWindow[0].getTime() + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = $scope.chartDateWindow[0].getTime() + pan_delta;\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            } else {\n                if (($scope.chartDateWindow[0] + pan_delta) < (panRange[1] - pan_delta)) {\n                    // go to the left\n                    startDate = ($scope.chartDateWindow[0] + pan_delta);\n                } else {\n                    startDate = (panRange[1] - pan_delta);\n                }\n            }\n\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                if (($scope.chartDateWindow[1].getTime() + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1].getTime() + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            } else {\n                if (($scope.chartDateWindow[1] + pan_delta) < panRange[1]) {\n                    // go to the left\n                    endDate = ($scope.chartDateWindow[1] + pan_delta);\n                } else {\n                    endDate = panRange[1];\n                }\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        $scope.btnzoomin = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            startDate = rangeStart + (delta * 2);\n            endDate = rangeEnd - (delta * 2);\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            //\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n        $scope.btnzoomout = function() {\n            // get current datetime window\n            var g = $scope.currentChart;\n            var panRange = g.xAxisZoomRange;\n            if (g.xAxisZoomRange[0] instanceof Date) {\n                panRange[0] = g.xAxisZoomRange[0].getTime();\n            }\n            if (g.xAxisZoomRange[1] instanceof Date) {\n                panRange[1] = g.xAxisZoomRange[1].getTime();\n            }\n            //split range to 20 pieces\n            var startDate;\n            var endDate;\n\n            var rangeStart = $scope.chartDateWindow[0];\n            if ($scope.chartDateWindow[0] instanceof Date) {\n                rangeStart = $scope.chartDateWindow[0].getTime();\n            }\n            var rangeEnd = $scope.chartDateWindow[1];\n            if ($scope.chartDateWindow[1] instanceof Date) {\n                rangeEnd = $scope.chartDateWindow[1].getTime();\n            }\n\n            var delta = (rangeEnd - rangeStart) / 20;\n\n            if ((rangeStart - (delta * 2)) > panRange[0]) {\n                startDate = rangeStart - (delta * 2);\n            } else {\n                startDate = panRange[0];\n            }\n\n            if ((rangeEnd + (delta * 2)) < panRange[1]) {\n                endDate = rangeEnd + (delta * 2);\n            } else {\n                endDate = panRange[1];\n            }\n\n            //update graph\n            $scope.chartDateWindow = [new Date(new Number(startDate)), new Date(new Number(endDate))];\n            g.updateOptions({\n                dateWindow: [new Date(new Number(startDate)), new Date(new Number(endDate))]\n            });\n\n            if (btntimer) {\n                $timeout.cancel(btntimer);\n            }\n\n            btntimer = $timeout(function() {\n                $scope.chartDateTime = {\n                    begin: new Date(new Number(startDate)),\n                    end: new Date(new Number(endDate))\n                };\n            }, 600);\n        };\n\n\n        var timer = null;\n        $scope.refersh = function(g, init) {\n            if (timer) {\n                $timeout.cancel(timer);\n            }\n            timer = $timeout(function() {\n                if (init || g.xAxisRange()[0] != $scope.chartDateTime.begin || g.xAxisRange()[1] != $scope.chartDateTime.end) {\n                    $scope.chartDateTime = {\n                        begin: g.xAxisRange()[0],\n                        end: g.xAxisRange()[1]\n                    };\n                    $scope.chartDateWindow = g.xAxisRange();\n                }\n            }, 600);\n        };\n    }\n\n};\n\n\nfgpWidgetGraph.buildFactory = function buildFactory ($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q) {\n    fgpWidgetGraph.instance = new fgpWidgetGraph($timeout, dataService, $rootScope, $interval, $filter, $location, $stateParams, $compile, $q);\n    return fgpWidgetGraph.instance;\n};\n\nfgpWidgetGraph\n    .$inject = ['$timeout', 'dataService', '$rootScope', '$interval', '$filter', '$location', '$stateParams', '$compile', '$q'];\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPageTitle = function fgpWidgetPageTitle() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetPageTitle.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //drag-channel  item means this widget accepts items\n    var dom_show = '<div class=\"\" id=\"' + element_id + '\">' +\n        '<div class=\"{{css.width}}\" style=\"-webkit-user-select: none; /* Chrome all / Safari all */  -moz-user-select: none; /* Firefox all */  -ms-user-select: none; /* IE 10+ */  user-select: none;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div id=\"edit' + element_id + '\" style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"\">' +\n        '<h1>{{css.title.text}}</h1>' +\n        '<h3>{{css.subtitle.text}}</h3>' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div>';\n    return dom_show;\n};\n\n\nfgpWidgetPageTitle.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.data && widgetData.from == \"show\") {\n        metadata = widgetData.data.metadata;\n        $scope.css = {};\n        $scope.css[\"color\"] = metadata.css.color;\n        $scope.css[\"width\"] = metadata.css.width;\n        $scope.css[\"minHeight\"] = metadata.css.minHeight;\n        $scope.css[\"border\"] = {};\n        $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n        $scope.css[\"background\"] = {};\n        $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n        $scope.css[\"title\"] = metadata.css.title;\n        $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n        $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n        $scope.css[\"subtitle\"] = metadata.css.subtitle;\n        $scope.css[\"subtitle\"][\"color\"] = metadata.css.subtitle.color;\n        $scope.css[\"subtitle\"][\"show\"] = metadata.css.subtitle.show;\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"title\"].text + \"}\");\n            $scope.css[\"title\"].text = f(deviceData.device);\n            f = new Function(\"device\", \"with(device) { return \" + $scope.css[\"subtitle\"].text + \"}\");\n            $scope.css[\"subtitle\"].text = f(deviceData.device);\n        });\n    }\n\n\n\n\n};\n\nfgpWidgetPageTitle.buildFactory = function buildFactory () {\n    fgpWidgetPageTitle.instance = new fgpWidgetPageTitle();\n    return fgpWidgetPageTitle.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetMap = function fgpWidgetMap() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetMap.prototype.template = function template (element, attrs) {\n    var dom_show = '<div class = \"{{css.width}}\" style=\"padding:0px;height:{{css.height}}px;\" map-lazy-load=\"https://maps.google.com/maps/api/js\">' +\n        '<ng-map style=\"height: 100%;width: 100%;\" center=\"{{center}}\" zoom=\"15\">' +\n        '<marker on-click=\"map.showInfoWindow(\\'info_' + attrs.id + '\\')\" id=\"marker_' + attrs.id + '\" ng-repeat=\"item in markers\" icon=\"{{item.image}}\" position=\"{{item.latitude}},{{item.longitude}}\" title=\"{{item.name}}\" animation=\"Animation.DROP\" ></marker>' +\n        '</ng-map>' +\n        '</div>' +\n        '';\n    return dom_show;\n};\n\n\nfgpWidgetMap.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n            var location = {};\n            $scope.markers = [];\n            $scope.details = $scope.$parent.device;\n\n\n            // show one point.\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { return \" + item.value + \";}\");\n                    var result = f(deviceData.device);\n                    if (result) {\n                        location[item.label] = result;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n                } catch (error) {\n                    // show image\n                    if (\"image\" == item.label) {\n                        location[item.label] = item.value;\n                    } else {\n                        location[item.label] = \"\";\n                    }\n\n                }\n            });\n\n\n            //do not show\n            if (location.latitude == \"\" || location.longitude == \"\") {\n                //hard code. the location is Melbourne\n                location.latitude = \"-37.810000\";\n                location.longitude = \"144.950000\";\n                $scope.center = [location.latitude, location.longitude];\n                // $scope.markers.push(location);\n            } else {\n                $scope.center = [location.latitude, location.longitude];\n                $scope.markers.push(location);\n            }\n\n        });\n    }\n\n};\n\nfgpWidgetMap.buildFactory = function buildFactory () {\n    fgpWidgetMap.instance = new fgpWidgetMap();\n    return fgpWidgetMap.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetDeviceDetail = function fgpWidgetDeviceDetail() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetDeviceDetail.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '<div class=\"row\" ng-repeat=\"item in data\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"text-align: right; font-weight: bold;line-height: 30px;\">{{item.label}}</div><div class=\"col-xs-8 col-md-8\" style=\"text-align: left;line-height: 30px;\">{{item.value}}</div>' +\n        '</div>' +\n        '</div>' +\n        '<div id=\"detail_status_' + attrs.id + '\" class=\"row\" style=\"min-height: 50px;\">' +\n        '</div>' +\n        '</div>';\n};\n\n\nfgpWidgetDeviceDetail.prototype.controller = function controller ($scope, $element) {\n    var metadata = null;\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n\n    /**\n     * get device information\n     */\n    if (widgetData.data && widgetData.from == \"show\") {\n\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n\n            $scope.showdata = widgetData.data;\n\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n\n\n            $scope.data = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = \"\";\n                    $scope.data.push(item);\n                }\n            });\n\n\n        });\n\n    }\n\n};\n\n\nfgpWidgetDeviceDetail.buildFactory = function buildFactory () {\n    fgpWidgetDeviceDetail.instance = new fgpWidgetDeviceDetail();\n    return fgpWidgetDeviceDetail.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetSpan = function fgpWidgetSpan() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetSpan.prototype.template = function template (scope, element) {\n    return '<div class = \"{{css.width}}\" style=\"padding:0px;\"><div class=\"row\" style=\"height: {{css.height}}px;\">' +\n        '</div>';\n};\n\nfgpWidgetSpan.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n};\n\nfgpWidgetSpan.buildFactory = function buildFactory () {\n    fgpWidgetSpan.instance = new fgpWidgetSpan();\n    return fgpWidgetSpan.instance;\n};\n\n/**\n * Created by ericwang on 20/06/2016.\n */\nvar fgpWidgetPie = function fgpWidgetPie($timeout) {\n    this.restrict = 'E';\n    this.scope = {};\n    this.$timeout = $timeout;\n};\n\n\nfgpWidgetPie.prototype.template = function template (element, attrs) {\n    return '<div class = \"{{css.width}}\" ><div style=\"height: {{css.height}}px;\">' +\n        '<canvas class=\"fgpPieChart\"></canvas>' +\n        '</div>' +\n        '</div>';\n};\n\nfgpWidgetPie.prototype.link = function link (scope, element) {\n\n    this.$timeout(function () {\n        var ctx = element.find(\"canvas\")[0];\n        scope.chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['1'],\n                datasets: [\n                    {\n                        data: [1],\n                        backgroundColor: []\n                    }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: false,\n                legend: {display: true}\n            }\n        });\n    });\n};\n\n\nfgpWidgetPie.prototype.controller = function controller ($scope, $element, $timeout) {\n\n    var id = $element.attr(\"id\");\n    var metadata = null;\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            metadata = widgetData.data.metadata;\n            $scope.showdata = widgetData.data;\n            $scope.css = {\n                width: \"col-md-12\",\n                height: \"400\"\n            };\n            if ($scope.showdata.metadata.css) {\n                $scope.css = $scope.showdata.metadata.css;\n            }\n            $scope.data = [];\n            var colors = [];\n            //get all columns\n            var f = null;\n            angular$1.forEach($scope.showdata.metadata.data, function (item) {\n                try {\n                    f = new Function(\"device\", \"with(device) { if(\" + item.value + \") return \" + item.value + \";}\");\n                    item.value = f(deviceData.device);\n                    $scope.data.push(item);\n                } catch (error) {\n                    item.value = item.value;\n                    $scope.data.push(item);\n                }\n                if (item.color) {\n                    colors.push(item.color);\n                } else {\n                    colors.push('#' + (function co(lor) {\n                            return (lor +=\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)])\n                            && (lor.length == 6) ? lor : co(lor);\n                        })(''));\n                }\n            });\n            // timeout\n            $scope.pieData = {labels: [], value: []};\n            $timeout(function () {\n                // create data\n                angular$1.forEach($scope.data, function (item) {\n                    $scope.pieData.labels.push(item.label);\n                    $scope.pieData.value.push(item.value);\n                });\n\n                $scope.chart.data.labels = $scope.pieData.labels;\n                $scope.chart.data.datasets[0].data = $scope.pieData.value;\n                $scope.chart.data.datasets[0].backgroundColor = colors;\n                // update chart\n                $scope.chart.update();\n            });\n\n        });\n\n\n    }\n\n\n};\n\nfgpWidgetPie.buildFactory = function buildFactory ($timeout) {\n    fgpWidgetPie.instance = new fgpWidgetPie($timeout);\n    return fgpWidgetPie.instance;\n};\nfgpWidgetPie.$inject = ['$timeout'];\n\n/**\n * Created by eric on 22/11/16.\n */\n\nvar fgpDockerButton = function fgpDockerButton() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\n\nfgpDockerButton.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"col-xs-12 btn-group\" role=\"group\" style=\"padding: 2px;\" aria-label=\"...\">' +\n        '<div style=\"float: right;\">' +\n        '<button type=\"button\" class=\"btn btn-{{button.color}} btn-xs\" ' +\n        ' ng-click=\"action(button)\" ng-repeat=\"button in buttons\" ng-show=\"checkShow(button)\"><i class=\"fa {{button.icon}}\"' +\n        ' aria-hidden=\"true\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>';\n    return show_dom;\n};\n\n\nfgpDockerButton.prototype.controller = function controller ($scope, $element, $http, $timeout) {\n\n    $scope.stats = \"\";\n\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var confData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                confData = data.data;\n            }\n        }\n    });\n\n    var repeateId = [];\n\n    var pageDevice = null;\n    $scope.$on('deviceInfoEvent', function (event, data) {\n        pageDevice = data.device;\n    });\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n        if (data.application === repeateId[2] && data.container === repeateId[0] && data.host === repeateId[1]) {\n            $scope.stats = data.stats;\n        }\n    });\n\n    $scope.checkShow = function (button) {\n\n\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            return true;\n        }\n\n\n        if (button.type === \"stop\") {\n            if ($scope.stats === \"running\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"start\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (button.type === \"delete\") {\n            if ($scope.stats === \"exited\" || $scope.stats === \"created\") {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    // how many buttons?\n    $scope.buttons = [];\n\n    if ($scope.$parent.repeat) {\n        repeateId = $scope.$parent.repeat.split(\",\");\n    }\n\n    angular.forEach(configuration, function (item) {\n        if (item.label == \"buttons\") {\n            $scope.buttons = item.value;\n        }\n    });\n\n    $scope.healthinfo = \"\";\n\n\n    // submit \"action\" to rest api\n    $scope.action = function (button) {\n        if (button.hasOwnProperty(\"shown\") && button.shown) {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/exec',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    deviceName: pageDevice.name,\n                    deviceKey: pageDevice.key.id,\n                    relationship: 'node_application'\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        } else {\n            // send request through $http\n            $http({\n                method: 'POST',\n                url: '/api/docker/hosts/action',\n                data: {\n                    func: button.func,\n                    script: button.script,\n                    container: repeateId[0],\n                    host: repeateId[1],\n                    application: repeateId[2]\n                }\n            }).then(function successCallback(response) {\n                console.info(response.data);\n            }, function errorCallback(response) {\n                console.error(response.data);\n            });\n        }\n\n    };\n};\n\n\nfgpDockerButton.buildFactory = function buildFactory () {\n    fgpDockerButton.instance = new fgpDockerButton();\n    return fgpDockerButton.instance;\n};\n\n/**\n * Created by ericwang on 15/06/2016.\n */\nvar fgpWidgetRepeatContainer = function fgpWidgetRepeatContainer($http) {\n    this.restrict = 'E';\n    this.scope = {};\n    this._$http = $http;\n};\n\nfgpWidgetRepeatContainer.prototype.template = function template (element, attrs) {\n    var flag = attrs.hasOwnProperty(\"shown\");\n    var showTitle = attrs.hasOwnProperty(\"showtitle\");\n    var element_id = attrs.id;\n    var dom_show = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{item.device.key.id}}\" ng-repeat=\"item in items\" emit-last-repeater-element style=\"padding-left: 2px; padding-right: 2px;\">' +\n        '<div class=\"{{css.width}}\" style=\"padding-left: 1px; padding-right: 1px;\">' +\n        '<div class=\"panel\" style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"panel-heading\" style=\"background-color: {{css.title.color || \\'#fff\\'}};\"><i class=\"fa fa-desktop\" aria-hidden=\"true\" style=\"margin-right: 5px;\"></i>{{item.device.name}}</div>' +\n        '<div class=\"panel-body\"  style=\"padding:0px;min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\'}};\">' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n    var dom_show_notitle = '<div class=\"\" id=\"' + element_id + '_{{$index}}\" ng-repeat=\"item in items\" repeat-id=\"{{item.device.key.id}}\">' +\n        '<div class=\"{{css.width}}\" style=\"margin-bottom:15px;padding-left: 2px; padding-right: 2px;\">' +\n        '<div style=\"border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div style=\"min-height:{{css.minHeight || 100}}px;background-color: {{css.background.color||\\'#fff\\';}}\"></div>' +\n        '<div style=\"float:left;padding-top: 5px;padding-left:5px;padding-right:5px;\">' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-{{labelstyle[$index]}}\" ng-repeat=\"label in labels\">{{label}}:{{item.labels[label]}}</span>' +\n        '<span style=\"float:left;margin-right: 5px;\" class=\"label label-success\" ng-click=\"healthcheck(item)\">{{item.health}}</span>' +\n        '</div>' +\n        '<div class=\"col-md-12 col-xs-12\" style=\"padding-top: 5px;padding-left:5px;padding-right:5px;float:left;max-height: 200px; overflow-y: auto;\" id=\"edit' + element_id + '\" list-type=\"{{listStyle}}\">' +\n        '</div>' +\n        '</div>' +\n        '</div></div>';\n\n    // show or design\n    if (flag) {\n        if (showTitle) {\n            return dom_show;\n        } else {\n            // without title\n            return dom_show_notitle;\n        }\n    }\n};\n\nfgpWidgetRepeatContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout, $http, $location, $stateParams, $websocket) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    // all items\n    $scope.items = [];\n\n    $scope.labelstyle = [\"default\", \"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n    $scope.css[\"title\"] = metadata.css.title;\n    $scope.css[\"title\"][\"color\"] = metadata.css.title.color;\n    $scope.css[\"title\"][\"show\"] = metadata.css.title.show;\n\n    $scope.data = {};\n\n    $scope.listStyle = \"list\";\n\n    $scope.labels = [];\n\n    var deviceType = $stateParams.type;\n    var deviceName = $stateParams.device;\n\n    if (metadata.data) {\n\n\n        $scope.labels = [];\n\n\n        if (metadata.data.datasource.labels) {\n            $scope.labels = metadata.data.datasource.labels.split(\" \");\n        }\n\n        if (metadata.data.datasource.style) {\n            $scope.listStyle = metadata.data.datasource.style;\n        }\n\n        // show different type\n        var relation = metadata.data.datasource.type;\n        $scope.items = [];\n        $http({\n            method: 'GET',\n            url: 'api/docker/repeat/' + deviceType + '/' + deviceName + '/' + relation\n        }).then(function (data) {\n            $scope.items = data.data;\n        }, function (error) {\n            console.error(error);\n        });\n\n        // I'm ready. please give all my children to me~\n        // call stage\n        $scope.$on('LastRepeaterElement', function () {\n            $timeout(function () {\n                $scope.$emit('bindChildRepeatEvent', {\n                    id: element_id\n                });\n            });\n        });\n\n\n    }\n    //establish a connection with websocket\n    var dataStream = $websocket('ws://' + $location.host() + \":\" + $location.port() + '/ws/hosts');\n    dataStream.onMessage(function (message) {\n        try {\n            var backData = JSON.parse(message.data);\n            if (backData.hasOwnProperty(\"container\")) {\n                // tell children\n                $scope.$parent.$broadcast('containerStatusEvent', backData);\n                // update health-check status\n                angular.forEach($scope.items, function (item) {\n                    if (backData.application == item.device.key.id) {\n                        if (backData.config.State.Health) {\n                            item[\"health\"] = backData.config.State.Health.Status;\n                        } else {\n                            item[\"health\"] = null;\n                        }\n\n                        if (backData.stats == \"exited\") {\n                            item[\"health\"] = null;\n                        }\n                    }\n                });\n            }\n        } catch (e) {\n        }\n    });\n\n    $scope.healthcheck = function (item) {\n        // call server and get the exception.\n        dataService.healthcheck(item.name, item.device.key.id);\n    };\n\n\n};\n\n\nfgpWidgetRepeatContainer.buildFactory = function buildFactory ($http) {\n    fgpWidgetRepeatContainer.instance = new fgpWidgetRepeatContainer($http);\n    return fgpWidgetRepeatContainer.instance;\n};\n\nfgpWidgetRepeatContainer.$inject = ['$http'];\n\n/**\n * Created by eric on 25/11/16.\n */\nvar fgpImage = function fgpImage() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpImage.prototype.template = function template (scope, element) {\n    return '' +\n        '<img src=\"{{url}}\" style=\"width:{{css.width}}px;height:{{css.height}}px;\">' +\n        '';\n};\n\nfgpImage.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    $scope.showdata = widgetData.data;\n    $scope.css = {\n        width: \"0\",\n        height: \"0\"\n    };\n\n    $scope.url = \"\";\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n    if($scope.showdata.metadata.data){\n        $scope.url = $scope.showdata.metadata.data.url;\n    }\n};\n\nfgpImage.buildFactory = function buildFactory () {\n    fgpImage.instance = new fgpImage();\n    return fgpImage.instance;\n};\n\n/**\n * Created by eric on 28/11/16.\n */\nvar fgpIcon = function fgpIcon() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpIcon.prototype.template = function template (element, attrs) {\n    var show_dom = '<div class=\"{{css.width}}\" style=\"margin-top: 10px;background-color: {{css.background.color}};border-color:{{css.border.color || \\'#fff\\'}};\">' +\n        '<div class=\"col-xs-4 col-md-4\" style=\"padding: 5px;\">' +\n        '<i class=\"fa fa-{{icon}}\" style=\"font-size: 60px;\"></i>' +\n        '</div>' +\n        '<div class=\"col-xs-8 col-md-8\">' +\n        '<div style=\"text-align: right;font-size: large;\"><label>{{title}}</label></div>' +\n        '<div style=\"text-align: right;font-size: small;\"><label>{{desc}}</label></div>' +\n        '</div>' +\n        '</div>' +\n        '';\n    return show_dom;\n};\n\nfgpIcon.prototype.controller = function controller ($scope, $element) {\n    // get configuration\n    var id = $element.attr(\"id\");\n    var configuration = null;\n    var widgetData = null;\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: id, callback: function (data) {\n            if (data) {\n                configuration = data.data.metadata.data;\n                widgetData = data;\n            }\n        }\n    });\n\n\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.icon = configuration.content.icon;\n\n    $scope.desc = configuration.content.desc;\n\n    $scope.title = \"\";\n\n    if (widgetData.from == \"show\" && widgetData.data) {\n        $scope.data_from = \"application\";\n        $scope.parent_container = widgetData.data.parent;\n        $scope.$on('deviceInfoEvent', function (event, deviceData) {\n            // if the parent container sends a device to here, ignore global device.\n            if ($scope.data_from != \"application\" && deviceData.from == \"application\") {\n                return;\n            } else if (deviceData.from != \"application\") {\n                if ($scope.parent_container != \"edit\" + deviceData.from) {\n                    return;\n                } else {\n                    $scope.data_from = deviceData.from;\n                }\n            }\n            var f = new Function(\"device\", \"with(device) { return \" + configuration.content.f + \"}\");\n            $scope.title = f(deviceData.device);\n        });\n\n    }\n\n};\n\n\nfgpIcon.buildFactory = function buildFactory () {\n    fgpIcon.instance = new fgpIcon();\n    return fgpIcon.instance;\n};\n\n/**\n * Created by eric on 29/11/16.\n */\nvar fgpWidgetAppContainer = function fgpWidgetAppContainer() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetAppContainer.prototype.template = function template (element, attrs) {\n    var element_id = attrs.id;\n    //<div class=\"alert alert-info\" role=\"alert\">...</div>\n    return '' +\n        '<div ng-show=\"showstyle == \\'list\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-12 col-xs-12  alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px; text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n\n        '<div ng-show=\"showstyle == \\'grid\\'\" style=\"padding:0;margin-bottom: 5px;background-color: {{css.background.color}}; border: 1px solid; border-color: {{css.border.color}};border-radius: 5px;\"  class=\"col-md-6 col-xs-6 alert alert-info\" dulp=\"'+element_id+'\" id=\"' + element_id + '_{{$index}}\" repeat-id=\"{{container.id}},{{host}},{{container.application}}\" ng-repeat=\"container in containers | orderBy: \\'Name\\' as filtered_result track by $index\" emit-last-repeater-element>' +\n        '<div class=\"col-md-8 col-xs-8\" role=\"alert\" style=\"min-height: 24px;text-align: left;margin-bottom: 0px;padding: 3px;\">' +\n        '<i class=\"fa fa-hdd-o\" aria-hidden=\"true\" style=\"padding-right: 5px;\"></i><a href=\"javascript:;\" ng-click=\"gotoContainer(container);\">{{container.name | removeSlash}}</a>' +\n        '</div>' +\n        '<div class=\"col-md-4 col-xs-4\" id=\"edit' + element_id + '\" style=\"min-height: 24px; padding: 0;\">' +\n        '</div>' +\n        '</div>' +\n        '';\n};\n\nfgpWidgetAppContainer.prototype.controller = function controller ($scope, $element, dataService, $rootScope, $timeout) {\n    // only show\n    var element_id = $element.attr(\"id\");\n\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n    var metadata = widgetData.data.metadata;\n    $scope.css = {};\n    $scope.css[\"color\"] = metadata.css.color;\n    $scope.css[\"width\"] = metadata.css.width;\n    $scope.css[\"border\"] = {};\n    $scope.css[\"border\"][\"color\"] = metadata.css.border.color;\n    $scope.css[\"background\"] = {};\n    $scope.css[\"background\"][\"color\"] = metadata.css.background.color;\n\n    $scope.containers = [];\n    $scope.containerswithTimeout = [];\n    var metadata = widgetData.data.metadata;\n    // should be a host id\n    var repeat = $scope.$parent.repeat;\n\n    $scope.showstyle = \"list\";\n\n    $scope.host = repeat;\n\n\n    // I'm ready. please give all my children to me~\n    // call stage\n    $scope.$on('LastRepeaterElement', function () {\n        $timeout(function () {\n            $scope.$emit('bindChildRepeatEvent', {\n                id: element_id\n            });\n        });\n    });\n\n    $timeout(function () {\n        var pp = $scope.$emit('listStyleEvent', {\n            id: widgetData.data.parent,\n            callback: function (style) {\n                $scope.showstyle = style;\n            }\n        });\n\n    });\n\n    $scope.gotoContainer = function (container) {\n        // \"device type and device name\" display by a dynamic page!\n        console.info(container);\n        return false;\n    };\n\n\n    $scope.$on('containerStatusEvent', function (event, data) {\n\n        if (data.host == repeat) {\n            //f\n            var labels = [];\n\n            if (metadata.data.datasource.labels) {\n                labels = metadata.data.datasource.labels.split(\" \");\n            }\n            var showLabel = \"\";\n            angular.forEach(labels, function (label) {\n                showLabel += data.config[label] + \" \";\n            });\n\n            var app = {\n                id: data.container,\n                label: showLabel,\n                application: data.application,\n                name: data.deviceName,\n                type: data.deviceType\n            };\n            var flag = false;\n            angular.forEach($scope.containers, function (container) {\n                if (container.id == app.id) {\n                    // update timer\n                    var timer_index = -1;\n                    var timer = $scope.containerswithTimeout.filter(function (item, index) {\n                        if(item.app.id == app.id){\n                            timer_index = index;\n                            return true;\n                        }else{\n                            false;\n                        }\n                    });\n                    $timeout.cancel(timer[0].t);\n                    if (data.stats != \"removed\") {\n                        var newTimer = $timeout(function () {\n                            var index = $scope.containers.indexOf(app);\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }, 30000);\n                        timer[0].t = newTimer;\n                        flag = true;\n                    } else {\n                        var index = -1;\n                        angular.forEach($scope.containers, function (item, itemIndex) {\n                            if (item.id === app.id) {\n                                index = itemIndex;\n                            }\n                        });\n                        if (index != -1 && timer_index != -1) {\n                            $scope.containers.splice(index, 1);\n                            $scope.containerswithTimeout.splice(timer_index, 1);\n                            flag = true;\n                            $timeout(function () {\n                                $scope.$emit('bindChildRepeatEvent', {\n                                    id: element_id\n                                });\n                            });\n                        }\n                    }\n                }\n            });\n\n            if (!flag) {\n                // add to\n                $scope.containers.push(app);\n                // delete it after 30 seconds!\n                var t = $timeout(function () {\n                    var index = $scope.containers.indexOf(app);\n                    $scope.containers.splice(index, 1);\n                }, 30000);\n                $scope.containerswithTimeout.push({t: t, app: app});\n            }\n        }\n\n    });\n\n};\n\nfgpWidgetAppContainer.buildFactory = function buildFactory () {\n    fgpWidgetAppContainer.instance = new fgpWidgetAppContainer();\n    return fgpWidgetAppContainer.instance;\n};\n\nfgpWidgetAppContainer.$inject = [];\n\n/**\n * Created by ericwang on 21/06/2016.\n */\nvar fgpWidgetChartTable = function fgpWidgetChartTable() {\n    this.restrict = 'E';\n    this.scope = {};\n};\n\nfgpWidgetChartTable.prototype.template = function template (element, attrs) {\n    return '<div style=\"padding:0px;height: {{css.height}}px;position: relative; overflow-y : auto;\">' +\n        '<table st-table=\"rowCollection\" class=\"col-md-12 table table-striped\">' +\n        '<thead>' +\n        '<tr>' +\n        '<th ng-repeat=\"column in sampledata.columns\">{{column.label}}</th>' +\n        '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n        '<tr ng-repeat=\"value in sampledata.values\">' +\n        '<td ng-repeat=\"col in sampledata.columns\">{{value[col.label] | tableformatter: value : col.label : col.formatter}}</td>' +\n        '</tr>' +\n        '</tbody>' +\n        '</table>' +\n        '</div>';\n};\n\nfgpWidgetChartTable.prototype.controller = function controller ($scope, $element) {\n\n    var element_id = $element.attr(\"id\");\n    var widgetData = null;\n\n    $scope.$emit('fetchWidgetMetadataEvent', {\n        id: element_id, callback: function (data) {\n            if (data) {\n                widgetData = data;\n            }\n        }\n    });\n\n    //show\n    $scope.showdata = widgetData.data;\n\n    $scope.css = {\n        width: \"col-md-12\",\n        height: \"400\"\n    };\n    if ($scope.showdata.metadata.css) {\n        $scope.css = $scope.showdata.metadata.css;\n    }\n\n\n    $scope.$on('chartDataChangeEvent', function (event, chartData) {\n        var chartId = chartData.id;\n        if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"device\") {\n            $scope.sampledata = {};\n            // make data\n            var collectionName = chartData.data.collection;\n            var groupName = chartData.group;\n            var columns = [];\n            //get group and collection configuration\n            angular$1.forEach($scope.showdata.metadata.data.groups, function (group) {\n                if (group.name == groupName) {\n                    angular$1.forEach(group.collections, function (collection) {\n                        if (collection.name === collectionName) {\n                            columns = collection.rows;\n                        }\n                    });\n                }\n            });\n\n\n            $scope.sampledata.columns = [];\n\n            angular$1.forEach(columns, function (column) {\n                $scope.sampledata.columns.push({label: column.label, formatter: column.formatter});\n            });\n            $scope.sampledata.values = [];\n            angular$1.forEach(columns, function (column) {\n                var f = new Function(\"data\", \"with(data) { if(\" + column.value + \") return \" + column.value + \";return '';}\");\n                angular$1.forEach(chartData.data.data, function (record, index) {\n                    if ($scope.sampledata.values.length < chartData.data.data.length) {\n                        //add new one\n                        var item = {};\n                        item[column.label] = f(record);\n                        $scope.sampledata.values.push(item);\n                    } else {\n                        $scope.sampledata.values[index][column.label] = f(record);\n                    }\n                });\n            });\n\n            var cleanData = [];\n            angular$1.forEach($scope.sampledata.values, function (value, index) {\n                var flag = false;\n                angular$1.forEach(columns, function (column) {\n                    if (value[column.label] && value[column.label] != \"\") {\n                        flag = true;\n                    }\n                });\n\n                if (flag) {\n                    cleanData.push(value);\n                }\n            });\n            $scope.sampledata.values = cleanData;\n\n        } else if ($scope.showdata.metadata.data.chartId === chartId && chartData.group == \"relation\") {\n            //\n\n\n        }\n\n    });\n\n\n};\n\nfgpWidgetChartTable.buildFactory = function buildFactory () {\n    fgpWidgetChartTable.instance = new fgpWidgetChartTable();\n    return fgpWidgetChartTable.instance;\n};\n\n/**\n * Created by ericwang on 10/06/2016.\n */\n// angular module\nangular$1.module('fgp-kit', ['ngMap', 'ui.router', 'angular-cache']).service('dataService', dataAccessApi.buildFactory)\n    .filter('removeSlash', function() {\n        return function(input) {\n            if (input.startsWith(\"/\")) {\n                return input.substring(1, input.length);\n            }\n            return input;\n        }\n    })\n    .factory('$graphstorage', ['$window', function($window) {\n        return {\n            setTree: function(key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getTree: function(key) {\n                return JSON.parse($window.localStorage[key]) || false;\n            },\n            addTree: function(key, value) {\n                if ($window.localStorage[key]) {\n                    var trees = JSON.parse($window.localStorage[key]);\n                    trees.push(value);\n                    this.setTree(key, trees);\n                } else {\n                    this.setTree(key, [value]);\n                }\n            },\n            clear: function() {\n                $window.localStorage.clear();\n            }\n        }\n    }])\n    .directive('fgpContainer', fgpStage.buildFactory)\n    .directive('widgetContainer', fgpWidgetContainer.buildFactory)\n    .directive('widgetGraph', fgpWidgetGraph.buildFactory)\n    .directive('widgetPageTitle', fgpWidgetPageTitle.buildFactory)\n    .directive('widgetMap', fgpWidgetMap.buildFactory)\n    .directive('widgetStatus', fgpStage.buildFactory)\n    .directive('widgetDeviceDetail', fgpWidgetDeviceDetail.buildFactory)\n    .directive('widgetDeviceSpan', fgpWidgetSpan.buildFactory)\n    .directive('widgetPie', fgpWidgetPie.buildFactory)\n    .directive('widgetDockerButton', fgpDockerButton.buildFactory)\n    .directive('widgetRepeatContainer', fgpWidgetRepeatContainer.buildFactory)\n    .directive('widgetImage', fgpImage.buildFactory)\n    .directive('widgetIcon', fgpIcon.buildFactory)\n    .directive('widgetAppContainer', fgpWidgetAppContainer.buildFactory)\n    .directive('widgetChartTable', fgpWidgetChartTable.buildFactory)\n    .directive('emitLastRepeaterElement', [function() {\n        return function(scope) {\n            if (scope.$last) {\n                scope.$emit('LastRepeaterElement');\n            }\n        };\n    }]).config(function(CacheFactoryProvider) {\n        angular$1.extend(CacheFactoryProvider.defaults, {\n            maxAge: 30 * 60 * 1000, // half an hour\n            deleteOnExpire: 'aggressive',\n        });\n    }).service('graphDataService', function(CacheFactory) {\n        var graphCache = null;\n        if (!CacheFactory.get('graphCache')) {\n            graphCache = CacheFactory('graphCache',{\n                maxAge: 30 * 60 * 1000, // half an hour\n                deleteOnExpire: 'aggressive'\n            });\n        }\n        return {\n            get: function(name) {\n                return graphCache.get('/graph/'+name);\n            },\n            put: function(name, data) {\n                return graphCache.put('/graph/'+name, data);\n            }\n        };\n    })\n    .filter('tableformatter', ['$filter', function($filter) {\n        return function(input, obj, field, formatter) {\n            if (formatter) {\n                if (obj[field]) {\n                    if (\"date\" == formatter) {\n                        return $filter('date')(new Date(obj[field]), 'd/M/yy h:mm a');\n                    } else {\n                        return input;\n                    }\n                }\n            } else {\n                return input;\n            }\n        };\n    }]);\nvar index = 'fgp-kit';\n\nreturn index;\n\n})));\n\n//# sourceMappingURL=fgp.kit.bundle.js.map\n"],"sourceRoot":"/source/"}